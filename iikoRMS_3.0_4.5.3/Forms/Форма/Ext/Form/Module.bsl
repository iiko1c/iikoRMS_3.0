Перем тз, ТЗзз, Тз2, тз1, тзз, тз3, тз4, тз5, тз6, тз7, тз8, тз9, тз10, тз11, Тз12, ТекущийПользователь, Открывать, хб, хб1, хб2,СписокДокументов,
ТаблицаЗапроса, ТаблицаЗапросаК, режим, Слово, ОсновнаяНоменклатурнаяГруппа, Юрлицо, ТекущаяНастройка, НужноеЮрЛицо, 
ТекНастр, КаталогБазы, ВсяНомеклатураАйко, Ошибок, ЗначенияВостановлены, Форма, ВерсияАйко,ДатаДокумМесяц;  

&НаСервере
Функция ИзСтрокиВСпис(Стрр)
	
	Списс = Новый Массив; 
	Стрр2 = СтрЗаменить(Стрр,";",Символы.ПС);
	
	Для ии = 1  по СтрЧислоСтрок(Стрр2) цикл
		Списс.Добавить(СтрПолучитьСтроку(Стрр2,ии));
	КонецЦикла;
	
	Возврат Списс;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	ПН = Истина;
	АР = Истина;
	ВН = Истина;
	ВП = Истина;
	АП = Истина;
	АС = Истина;
	ПКВ = Истина;
	РН = Истина;
	АПЕР = Истина;
	ИН = Истина;
	АУ = Истина;
	АПУ = Истина;
	АРаз = Истина;
	
	ВидимостьПодразделения();
	ДоступностьПКВ();
	БезналичныеОплатыПриИзменении();
	ВидимостьСДДС();
	АППриИзменении(неопределено);
	АПУПриИзменении(неопределено);
	АСПриИзменении(неопределено);
	Поле12ПриИзменении(неопределено);
	Поле15ПриИзменении(неопределено);
	АПЕРПриИзменении(неопределено);
	ИНПриИзменении(неопределено);
	Поле19ПриИзменении(неопределено);
	АУПриИзменении(неопределено);
	ВидимостьСтатьиЗатратУслуги();
	Элементы.Статьи.Видимость = АС;
	ВидимостьПКО();
	ВидимостьРКО();

КонецПроцедуры
                                                 
&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ПН = Ложь;
	АР = Ложь;
	ВН = Ложь;
	ВП = Ложь;
	АП = Ложь;
	АС = Ложь;
	ПКВ = Ложь;
	РН = Ложь;
	АПЕР = Ложь;
	ИН = Ложь;
	АУ = Ложь;
	АПУ = Ложь;
	АРаз = Ложь;
	
	ВидимостьПодразделения();
	ДоступностьПКВ();
	БезналичныеОплатыПриИзменении();
	ВидимостьСДДС();
	АППриИзменении(неопределено);
	АПУПриИзменении(неопределено);
	АСПриИзменении(неопределено);
	Поле12ПриИзменении(неопределено);
	Поле15ПриИзменении(неопределено);
	АПЕРПриИзменении(неопределено);
	ИНПриИзменении(неопределено);
	Поле19ПриИзменении(неопределено);
	АУПриИзменении(неопределено);
	ВидимостьСтатьиЗатратУслуги();
	Элементы.Статьи.Видимость = АС;
	ВидимостьПКО();
	ВидимостьРКО();

	
КонецПроцедуры

&НаСервере
функция НомерНакладной(стр1,номер,префикс,префиксДата,коммент)
	
	Если АналитикаДокументов <> "По Документам" Тогда
		Возврат номер;
	КонецЕсли;
	
	Если не ДопустимыйНомер(номер,префикс,стр1.ТорговоеПредприятиеКод,коммент) Тогда 
		Возврат неопределено;
	КонецЕсли;	
	Если Объект.НеИспользоватьПрефикс тогда 
		Возврат ДобитьПробелы(СокрЛП(номер),11);
	Иначе
		Пр = СтрДлина(префикс);
		Возврат префикс + ДобитьПробелы(СокрЛП(номер),11-пр);
	КонецЕсли;
	
	
КонецФункции      

&НаСервере
Процедура ВыполнитьНажатиеНаСервере()
	
	СохранитьКонтрагентов();	
	СохранитьКатегории();
	СохранитьНоменклатуру();
	СохранитьСклады();
	СохранитьГруппировку();
	СохранитьТипыОплат();
	СохранитьФизЛица();
	СохранитьСтатьи();
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);
	СохранениеНастроек(ТекущаяНастройка);
	ЗапускБЫЛ = ПолучитьИзВременногоХранилища(АдресЗапуска);
	Ошибок = 0;     
	
	Если Проводить тогда
		Режим = РежимЗаписиДокумента.Проведение;
		Слово = "Проведен";
	Иначе
		режим = РежимЗаписиДокумента.Запись;
		Слово = "Записан";
	КонецЕсли;
	
	
	Если АП или АПЕР или АР Или РН или АУ или АПУ или АС Тогда
		Если не ЗначениеЗаполнено(Подразделение) или не ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			Сообщить("Перейдите на вкладку 'Настройки' и заполните необходимые реквизиты!!!", СтатусСообщения.ОченьВажное);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	ИспользоватьСДДС = Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Получить();	
	Если АР или АУ тогда 		
		Если ИспользоватьСДДС и НЕ ЗначениеЗаполнено(СтатьяДДС) тогда 
			   Сообщить("Перейдите на вкладку 'Настройки' и заполните реквизит 'Статья движения денежных средств'!!!", СтатусСообщения.ОченьВажное);
			   Возврат;
		КонецЕсли;  		
	КонецЕсли;
	
	Если ИН тогда 
		 Если не ЗначениеЗаполнено(СтатьиПрочихДоходовИРасходов) тогда 
			   Сообщить("Перейдите на вкладку 'Настройки' и заполните реквизит 'Статьи прочих доходов и расходов'!!!", СтатусСообщения.ОченьВажное);
			   Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если ПН или АПУ тогда 
		  Если не ЗначениеЗаполнено(СтатьяЗатратУслуги) тогда 
			   Сообщить("Перейдите на вкладку 'Настройки' и заполните реквизит 'Статья затрат услуги'!!!", СтатусСообщения.ОченьВажное);
			   Возврат;
		КонецЕсли;		
	КонецЕсли; 	
	
	Для каждого Стр из ТаблицаЕдиницыИзмерений цикл
		Если НЕ ЗначениеЗаполнено(Стр.ЕдиницаИзмерения1С) тогда
			Сообщить("Сопоставьте единицы измерения!", СтатусСообщения.ОченьВажное);
			Возврат;
		Иначе
		КонецЕсли;
	КонецЦикла;
	
	Если (Ошибок = 0) Тогда
		МассивНоменклатура	 = Новый Массив();
		МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
		Для каждого гг из Объект.Номенклатура цикл
			МассивНоменклатура.Добавить(гг.Номенклатура.Ссылка);
			Номмм = гг.Номенклатура.ПолучитьОбъект();
			Пока Номмм.Уровень() > 0 Цикл
				Номмм = Номмм.Родитель;
				МассивНоменклатура.Добавить(Номмм.Ссылка);
			КонецЦикла;
		КонецЦикла;
		
		Для каждого гг из Объект.Группировка цикл
			МассивНоменклатура.Добавить(гг.Номенклатура.Ссылка);
			МассивНоменклатура.Добавить(Неопределено);    
			Номмм = гг.Номенклатура.ПолучитьОбъект();
			Пока Номмм.Уровень() > 0 Цикл
				Номмм = Номмм.Родитель;
				МассивНоменклатура.Добавить(Номмм.Ссылка);
			КонецЦикла;
		КонецЦикла;
		
		ТестЗапрос = Новый Запрос();
		МассивКонтрагентов = Объект.Контрагенты.Выгрузить(, "Контрагент");
		ТестЗапрос.УстановитьПараметр("Контрагент",       МассивКонтрагентов);
		ТестЗапрос.Текст = "ВЫБРАТЬ
		                   |	СчетаУчетаРасчетовСКонтрагентами.Контрагент,
		                   |	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПоставщиком,
		                   |	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаАвансовВыданных
		                   |ИЗ
		                   |	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
		                   |ГДЕ
		                   |	СчетаУчетаРасчетовСКонтрагентами.Контрагент В(&Контрагент)";
		ТаблицаЗапросаК = ТестЗапрос.Выполнить().Выгрузить();
		
		ТестЗапрос = Новый Запрос();
		ТестЗапрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);
		ТестЗапрос.Текст = "
			|ВЫБРАТЬ
			|	СчетаУчетаНоменклатуры.Организация КАК Организация,
			|	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
			|	СчетаУчетаНоменклатуры.Склад КАК Склад,
			|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
			|	СчетаУчетаНоменклатуры.СчетУчета КАК СчетУчета,
			|	СчетаУчетаНоменклатуры.СчетУчетаПередачи КАК СчетУчетаПередачи,
			|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализации КАК СчетДоходовОтРеализации,
			|	СчетаУчетаНоменклатуры.СчетРасходовОтРеализации КАК СчетРасходовОтРеализации,
			|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретеннымЦенностям КАК СчетУчетаНДСПоПриобретеннымЦенностям,
			|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
			|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне КАК СчетУчетаНДСУплаченногоНаТаможне,
			|	СчетаУчетаНоменклатуры.Субконто1 КАК Субконто1,
			|	СчетаУчетаНоменклатуры.Субконто2 КАК Субконто2,
			|	СчетаУчетаНоменклатуры.Субконто3 КАК Субконто3
			|ИЗ
			|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
			|	
			|ГДЕ
			|	СчетаУчетаНоменклатуры.Номенклатура В (&Номенклатура)";
		ТаблицаЗапроса = ТестЗапрос.Выполнить().Выгрузить();
	Иначе	
		Возврат;
	КонецЕсли;
	
	// Начинаем создавать документы
	Если (Ошибок = 0) Тогда
		СписокДокументов = Новый ТаблицаЗначений;
		СписокДокументов.Колонки.Добавить("Док");
		СписокДокументов.Колонки.Добавить("Дата");
		СписокДокументов.Колонки.Добавить("Порядок");
		
		Если ПН и ЗначениеЗаполнено(АдресПН) Тогда  			
			СоздатьНакладные(Тз,Объект.ПНПрефикс,Объект.ДеньПрефикс,1);		
		КонецЕсли;
		
		Если АП и ЗначениеЗаполнено(АдресАП) тогда
			СоздатьАктПриготовления(тз3,Объект.АПриготовленияПрефикс,Объект.ДеньАПриготовленияПрефикс,1,ложь,"");			
		КонецЕсли;
		
		Если АПЕР и ЗначениеЗаполнено(АдресАпер) тогда
			СоздатьПереработки(тз5,Объект.АПерараоткиПрефикс,Объект.ДеньАПерараоткиПрефикс,1, ""); 			
		КонецЕсли;
		
		Если ВП и ЗначениеЗаполнено(АдресВП) тогда
			СоздатьПеремещения(тз2,Объект.ВППрефикс,Объект.ДеньПрефикс,1);
		КонецЕсли;
		
		Если ВН и ЗначениеЗаполнено(АдресВН) тогда
			СоздатьВозвратныеНакладные(тз9,Объект.ВНПрефикс,Объект.ДеньПрефикс,1);
		КонецЕсли;
		
		Если АР и ЗначениеЗаполнено(АдресАР) тогда			
			ОбработкаАктовРеализации();
		КонецЕсли;
		
		Если АС и ЗначениеЗаполнено(АдресАС) тогда
			ОбработкаАктовСписания();
			
		КонецЕсли;
		
		Если РН и ЗначениеЗаполнено(АдресРН) тогда			
			ОбработкаРасходыхНакладных();			
		КонецЕсли;
		
		Если ИН и ЗначениеЗаполнено(АдресИН) тогда
			СоздатьИнвентаризации(тз7,Объект.ИНВПрефикс,1);			
		КонецЕсли; 		
		
		Если АУ и ЗначениеЗаполнено(АдресАУ) тогда 
			тз10 = ПолучитьИзВременногоХранилища(АдресАУ);
			СоздатьАУ(тз10, Объект.АУ_Префикс, Объект.ДеньПрефикс, 1);			
		КонецЕсли;
		
		Если АПУ и ЗначениеЗаполнено(АдресАПУ) Тогда 
			СоздатьАПУ(Тз11,Объект.АПУ_Префикс,Объект.ДеньПрефикс,1);		
		КонецЕсли;
		
		Если АРаз и ЗначениеЗаполнено(АдресАРаз) тогда 
			СоздатьАктРазбора(Тз12,Объект.ДеньАРаз_Префикс,Объект.ДеньАРаз_Префикс,1,ложь,"");	
		КонецЕсли;
		
		Если АР и БезналичныеОплаты = "ИзПриемаКассовойВыручки" и ЗначениеЗаполнено(АдресАРиБезнал) тогда
			Тз4 = ПолучитьИзВременногоХранилища(АдресАРиБезнал);
			Тз1 = ПолучитьИзВременногоХранилища(АдресАР);
			Если НЕ ЗначениеЗаполнено(АдресАУ) тогда
				Тз10 = Неопределено;
			Иначе
				Тз10 = ПолучитьИзВременногоХранилища(АдресАУ);
			КонецЕсли;
			СоздатьПКВ(тз4,Объект.АР_ООРППрефикс,1,тз1,ТЗ10);
			АдресАРиБезнал = ПоместитьВоВременноеХранилище(Тз4, УИДФормы);
			АдресАР = ПоместитьВоВременноеХранилище(Тз1, УИДФормы);
		КонецЕсли;
		
		
	КонецЕсли;
	
	ЗапускБЫЛ = Истина;
	
	Если Режим = РежимЗаписиДокумента.Проведение Тогда
		
		СписокДокументов.Сортировать("Дата,Порядок");
		
		Для каждого Докка из СписокДокументов Цикл
			Попытка 
				Если Докка.Док.Метаданные().Имя = "ИнвентаризацияТоваровНаСкладе" Тогда
					//Док = Докка.Док.ПолучитьОбъект();
					//Для Каждого Стр2 из Док.Товары Цикл
					//	счетУчета = Стр2.СчетУчета;
					//	КолСубконто = ПланыСчетов.Хозрасчетный.НайтиПоКоду(счетУчета.Код).ВидыСубконто.Количество();
					//	
					//	Если КолСубконто = 1 Тогда
					//		Отбор = Новый Структура ("Субконто1,Организация,Счет",Стр2.Номенклатура,Док.Организация,счетУчета);
					//	ИначеЕСли КолСубконто = 2 Тогда
					//		Отбор = Новый Структура ("Субконто1,Субконто2,Организация,Счет",Стр2.Номенклатура,Док.Склад,Док.Организация,счетУчета);
					//	Иначе
					//		Отбор = Новый Структура ("Субконто1,Субконто3,Организация,Счет",Стр2.Номенклатура,Док.Склад,Док.Организация,счетУчета);
					//	КонецЕСли;	
					//	Тостатки = РегистрыБухгалтерии.Хозрасчетный.Остатки(Док.Дата,,Отбор,,"Сумма,Количество");
					//	Если Тостатки.Количество() > 0 Тогда
					//		Стр2.КоличествоУчет = Тостатки[0].КоличествоОстатокДТ;
					//		Стр2.СуммаУчет = Тостатки[0].СуммаОстатокДТ;
					//	КонецЕсли;	
					//КонецЦикла;
					//Док.Записать(РежимЗаписиДокумента.Запись); 
				Иначе
					Если не ЗначениеЗаполнено(Докка.Док) Тогда
						Сообщить("Не найден документ от " + Докка.Дата, СтатусСообщения.ОченьВажное);		
						Продолжить;
					КонецЕсли;
					дд = Докка.Док.ПолучитьОбъект();
					Если дд = неопределено Тогда
						Сообщить("Не найден документ " + Докка.Док.Номер, СтатусСообщения.ОченьВажное);		
						Продолжить;
					КонецЕсли;
					дд.Записать(Режим); 
					Сообщить("" +  Докка.Док + " проведен!");
				КонецЕсли;	
			Исключение
				Сообщить("" + Докка.Док + " не проведен " +  ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			КонецПопытки;	
		КонецЦикла;	
	КонецЕсли;	
	
	АдресЗапуска = ПоместитьВоВременноеХранилище(ЗапускБЫЛ, УИДФормы);
КонецПроцедуры                                                    

&НаКлиенте
Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталогЭкспорта = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталогЭкспорта.Заголовок = "Открытие каталога для передачи файлов";
	ДиалогВыбораКаталогЭкспорта.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораКаталогЭкспорта.Каталог = Каталог1с;
	
	Если Не ДиалогВыбораКаталогЭкспорта.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Каталог1с = ДиалогВыбораКаталогЭкспорта.Каталог;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогЭкспортаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Каталог1с);
	
КонецПроцедуры

&НаСервере
Функция СоздатьКонтрагента(код, Наименование, ИНН)
	
	Контр = Справочники.Контрагенты.СоздатьЭлемент();
	Элемм = Справочники.Контрагенты.НайтиПоКоду(код, Истина);
	
	Если не ЗначениеЗаполнено(Элемм) тогда
		Контр.Код = код;
	КонецЕсли;
	
	Контр.Наименование = Наименование;
	Контр.НаименованиеПолное = Наименование;
	Контр.ИНН = ИНН;
	Если СтрДлина(Строка(ИНН)) = 10 тогда
		Контр.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе
		Контр.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;	
	
	Попытка
		Контр.Записать();
		//СоздатьДоговор(Контр, БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"), 
		//Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "Основной договор", Ложь);
		Возврат Контр;
	Исключение
		Контр.УстановитьНовыйКод();
		Попытка
			контр.Записать();
			//СоздатьДоговор(Контр, БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"), 
			//Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "Основной договор", Ложь);
			Возврат Контр;
		исключение
			Сообщить("Контрагента создать не удалось:" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			
			Возврат Неопределено;
		КонецПопытки;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьКодАйко(ККодИИКО)
	
	Возврат ТруКод(ККодИИКО);
	
КонецФункции

&НаСервере
Процедура СохранитьДокумент1С(Док, наименование, Порядок, номернаклиико)
	
	Попытка 
		Док.Записать(РежимЗаписиДокумента.Запись); 
		Сообщить("Записано " +  Наименование + " № " + Док.Номер + " от " + Док.Дата);
		Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док.Ссылка;
		СтрокаДоков = СписокДокументов.Добавить();
		СтрокаДоков.Док = Док.Ссылка;
		СтрокаДоков.Дата = Док.Дата;
		СтрокаДоков.Порядок = Порядок;
	Исключение
		Сообщить("Не удалось записать " + Наименование + " № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура КонтрагентыСоздать(Команда)
	
	ТекДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодНаименованияАйко = ТекДанные.КНаименованиеИИКО;
	код = ПолучитьКодАйко(ТекДанные.ККодИИКО);
	Ответ = Вопрос("Создать контрагента с названием: " + КодНаименованияАйко  +  " и кодом: " + код + "?", РежимДиалогаВопрос.ДаНет); 
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	
	Парам = Новый Структура();
	Парам.Вставить("ККодИИКО", ТекДанные.ККодИИКО);
	Парам.Вставить("КНаименованиеИИКО", ТекДанные.КНаименованиеИИКО);
	Парам.Вставить("КИННИИКО", ТекДанные.КИННИИКО);
	Парам.Вставить("Контрагент", ТекДанные.Контрагент);
	
	Строка = СоздатьКонтрагентаНаСервере(Парам);	

	Элементы.Контрагенты.ТекущиеДанные.Контрагент = Строка.Контрагент;
	Элементы.Контрагенты.ТекущиеДанные.Код1С = Строка.Код1С;
	Элементы.Контрагенты.ТекущиеДанные.ИНН1С = СТрока.ИНН;
КонецПроцедуры


&НаСервере
Функция СоздатьКонтрагентаНаСервере(Парам)
	
	Код = ПолучитьКодАйко(Парам.ККодИИКО); 
	Контр = СоздатьКонтрагента(код, Парам.КНаименованиеИИКО, ИсправленныйЮЛИНН(Парам.КИННИИКО));
	
	Если Не Контр = неопределено Тогда
		Парам.Контрагент = Контр.Ссылка;
		Если Открывать = 1 тогда
			Контр.ПолучитьФорму().Открыть();
		КонецЕсли;
	КонецЕсли;
	
	Строка = Справочники.Контрагенты.НайтиПоНаименованию(Парам.КНаименованиеИИКО);
	
	Данные = Новый Структура();
	Данные.Вставить("Код1С", Строка.Код);
	Данные.Вставить("Контрагент", Строка.Ссылка);
	Данные.Вставить("ИНН", Строка.ИНН);
	
	Возврат Данные;
КонецФункции

&НаКлиенте
Процедура КонтрагентыСоздатьВсех(Команда)
	
	Если Вопрос("Создать всех контрагентов?",РежимДиалогаВопрос.ДаНет,0) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьВсехКонтрагентовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВсехКонтрагентовНаСервере()
	
	Для Каждого Стр из Объект.Контрагенты Цикл
		Если не ЗначениеЗаполнено(Стр.Контрагент) тогда
			Контр = СоздатьКонтрагента(ТруКод(Стр.ККодИИКО), Стр.КНаименованиеИИКО, 
			ИсправленныйЮЛИНН(Стр.КИННИИКО));
			Если не Контр = неопределено Тогда
				Стр.Контрагент = Контр.Ссылка;
				Стр.ИНН1С = ИсправленныйЮЛИНН(Контр.ИНН);
				Стр.Наименование1С = Контр.Наименование;
				Стр.Код1С = Контр.Код;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКонтрагентовСервер(Контрагент)
	
	Для Каждого Стр из Объект.Контрагенты Цикл
		Если не ЗначениеЗаполнено(Стр.Контрагент) тогда
			Контр = СоздатьКонтрагента(ТруКод(Стр.ККодИИКО), Стр.КНаименованиеИИКО, ИсправленныйЮЛИНН(Стр.КИННИИКО));
			Если не Контр = неопределено Тогда
				Стр.Контрагент = Контр.Ссылка;
				Стр.ИНН1С = ИсправленныйЮЛИНН(Контр.ИНН);
				Стр.Наименование1С = Контр.Наименование;
				Стр.Код1С = Контр.Код;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция НайтиОгранизациюПоИНН(ИНН, УчитыватьНастройку)
	
	Если ОрганизацияИзДокумента = 1 Тогда
		Возврат НайтиОгранизациюПоИНН2(ИНН);
	Иначе
		Возврат ОрганизацияДокумента.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НайтиОгранизациюПоИНН2(ИНН)
	
	Если Укр = 0 Тогда
		Возврат Справочники.Организации.НайтиПоРеквизиту("ИНН", ИНН); 		
	Иначе
		ТестЗапрос = Новый Запрос();
		ТестЗапрос.Текст = "ВЫБРАТЬ Организация ИЗ РегистрСведений.КодыОрганизации ГДЕ ИНН = """ + ИНН + """";
		КодыОрг = ТестЗапрос.Выполнить().Выгрузить();
		Если КодыОрг.Количество() > 0 Тогда
			Возврат КодыОрг.Получить(0).Организация;
		КонецЕсли;	
	КонецЕсли;
	
	Сообщить("Не найдена организация с ИНН: " + ИНН + " документы будут незаполнены!",СтатусСообщения.Внимание);
	Возврат неопределено;
	
КонецФункции	

&НаСервере
Функция НайтиСчетаДляНоменклатуры(ном,ТаблицаЗапроса,Склад)
	
	Строкк =  ТаблицаЗапроса.НайтиСтроки(Новый Структура("Номенклатура,Склад",ном,Склад));
	
	Если Строкк.Количество()>0 тогда	
		Возврат Строкк[0];
	Иначе
		Строкк =  ТаблицаЗапроса.Найти(ном,"Номенклатура");
		Если Строкк <> Неопределено тогда
			 Возврат Строкк;
		КОнецЕсли;		
	КонецЕсли;
	
	Номмм = ном.ПолучитьОбъект();
	
	Пока Номмм.Уровень() > 0 Цикл
		Номмм = Номмм.Родитель;
		Строкк =  ТаблицаЗапроса.НайтиСтроки(Новый Структура("Номенклатура,Склад",Номмм,Склад));
		Если Строкк.Количество()>0 тогда	
			Возврат Строкк[0];
		Иначе
			Строкк =  ТаблицаЗапроса.Найти(Номмм,"Номенклатура");
			Если Строкк <> Неопределено тогда 
				Возврат Строкк;
			КОнецЕсли; 			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого н из ТаблицаЗапроса цикл   
		Если не ЗначениеЗаполнено(н.Номенклатура) Тогда
			Возврат н;
		КонецЕсли;
	КонецЦикла;
	
	Возврат неопределено;
	
КонецФункции


&НаКлиенте
Процедура КонтрагентыЗаполнить(Команда)
	
	Если Вопрос("Заполнить соответствие по ИНН/названию?",РежимДиалогаВопрос.ДаНет,0) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентыЗаполнитьСоответствия();
	
		
	// делаем доступными книпки создать и создать всех
	Элементы.Кнопка6.Доступность = Истина;
	Элементы.Кнопка7.Доступность = Истина;

КонецПроцедуры

&НаСервере
Процедура КонтрагентыЗаполнитьСоответствия()
	
	Для Каждого Стр из Объект.Контрагенты Цикл
		Элемм = Справочники.Контрагенты.ПустаяСсылка();
		Если не ЗначениеЗаполнено(Стр.Контрагент) тогда 
			Если ЗначениеЗаполнено(Стр.КИННИИКО) тогда
				Элемм = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИсправленныйЮЛИНН(Стр.КИННИИКО));
			КонецЕСли;
			Если Элемм.ЭтоГруппа тогда
				Элемм = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(Элемм) тогда
				Элемм = Справочники.Контрагенты.НайтиПоНаименованию(Стр.КНаименованиеИИКО);
				Если Элемм.ЭтоГруппа тогда
					Элемм = Справочники.Контрагенты.ПустаяСсылка();
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(Элемм) тогда
					Элемм = Справочники.Контрагенты.НайтиПоКоду(ТруКод(Стр.ККодИИКО), Истина);
					Если Элемм.ЭтоГруппа тогда
						Элемм = Справочники.Контрагенты.ПустаяСсылка();
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Элемм) тогда
				Стр.Контрагент = Элемм.Ссылка;
				Стр.ИНН1С = ИсправленныйЮЛИНН(Элемм.ИНН);
				Стр.Наименование1С = Элемм.Наименование;
				Стр.Код1С = Элемм.Код;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыОчистить(Команда)
	Если Вопрос("Очистить таблицу соответствий?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	
	КонтрагентыОчиститьНаСервере()
КонецПроцедуры

&НаСервере
Процедура КонтрагентыОчиститьНаСервере()
	
	Для Каждого Стр из Объект.Контрагенты Цикл
		Стр.Контрагент = "";
		Стр.Наименование1С="";
		Стр.Код1С="";
		Стр.ИНН1С="";
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураСоздать(Команда)
	
	ТекДанные = Элементы.Номенклатура.ТекущиеДанные;
	
	Если ТекДанные  = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Код = ТруКодН(ТекДанные.НКодИИКО);
	
	Ответ = Вопрос("Создать элемент номенклатуры с названием: " + ТекДанные.ННаименованиеИИКО + 
	" и кодом: " + Код + "?", РежимДиалогаВопрос.ДаНет); 
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Название = ТекДанные.ННаименованиеИИКО;
	Ном = СоздатьНоменклатуру(ТекДанные.НКодИИКО, Название);
	
	
	
	Если Ном <> Неопределено Тогда
		
		Форма = ПолучитьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", Ном));
		Форма.Открыть();

		Номенклатура = ПолучитьНоменклатуру(Ном);
		ТекДанные.Код1С = Номенклатура.Код1С;
		ТекДанные.Номенклатура = Ном;
	
КонецЕсли;	
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьНоменклатуру (Ном)
	
	Номенклатура = Новый Структура;
	Номенклатура.Вставить("Код1С", Ном.Код);
	Номенклатура.Вставить("Наименование1С", Ном.Наименование);
	
	
Возврат Номенклатура;	
	
КонецФункции


&НаСервере
Функция ПолучитьРеквизитСправочника(Ном)
	
	
	
	
КонецФункции

&НаКлиенте
Процедура НоменклатураСоздатьВсе(Команда)
	
	Если Вопрос("Создать все номенклатурные позиции?",РежимДиалогаВопрос.ДаНет,0) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	
	СоздатьВсюНоменклатуруНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВсюНоменклатуруНаСервере()
	
	Для Каждого Стр из Объект.Номенклатура Цикл
		Если не ЗначениеЗаполнено(Стр.Номенклатура) тогда
			Ном = СоздатьНоменклатуру(Стр.НКодИИКО, Стр.ННаименованиеИИКО);
			Если Ном <>  Неопределено Тогда
				Стр.Номенклатура = Ном;
				Стр.Код1С = Ном.Код;
				Стр.Наименование1С = Ном.Наименование;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьНоменклатура(Команда)
	
	Если Вопрос("Заполнить соответствия по названию/коду?",РежимДиалогаВопрос.ДаНет,0) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	
	ЗаполнитьСоответствия();
	
	Элементы.НоменклатураСоздать.Доступность = Истина;
	Элементы.НоменклатураСоздатьВсе.Доступность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствия()
	
	Для Каждого Стр из Объект.Номенклатура Цикл
		Элемм = Справочники.Номенклатура.ПустаяСсылка();
		Если не ЗначениеЗаполнено(Стр.Номенклатура) тогда
			Элемм = Справочники.Номенклатура.НайтиПоНаименованию(Стр.ННаименованиеИИКО,Истина);
			
			Если Элемм.ЭтоГруппа тогда
				Элемм = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Элемм.Наименование) тогда 
				Если Элемм = Справочники.Номенклатура.НайтиПоКоду(ТруКодН(Стр.НКодИИКО), Истина) тогда 
					Стр.Номенклатура = Элемм.Ссылка;
					Стр.Наименование1С = Элемм.Наименование;
					Стр.Код1С = Элемм.Код;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемм.Код) тогда 
					Если Элемм = Справочники.Номенклатура.НайтиПоНаименованию(Стр.ННаименованиеИИКО,Истина) тогда 
						Стр.Номенклатура = Элемм.Ссылка;
						Стр.Наименование1С = Элемм.Наименование;
						Стр.Код1С = Элемм.Код;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНоменклатура(Команда)
	
	Если Вопрос("Очистить таблицу соответствий?",РежимДиалогаВопрос.ДаНет,0) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	Для Каждого Стр из Объект.Номенклатура Цикл
		Стр.Номенклатура = "";
		Стр.Наименование1С = "";
		Стр.Код1С = "";
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьПодразделения()
	
	Элементы.Подразделение.Видимость = (АП или АР или АПЕР или АС или РН или АУ или АПУ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПКВ()
	
	Элементы.БезналичныеОплаты.Видимость = АР;
	БезналичныеОплатыПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура АППриИзменении(Элемент)
	
	ВидимостьПодразделения();
	ВидимостьСтатьиЗатрат();
КонецПроцедуры

&НаКлиенте
Процедура АПЕРПриИзменении(Элемент)
	
	ВидимостьПодразделения();
	ВидимостьСтатьиЗатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура АСПриИзменении(Элемент)
	
	ВидимостьПодразделения();
	ВидимостьСтатьиЗатрат();	
	Элементы.Статьи.Видимость = АС;
	
КонецПроцедуры

&НаКлиенте
Процедура ИНПриИзменении(Элемент)
	
	ВидимостьПодразделения();
	
	Если ИН тогда 
			Элементы.Поле2.Видимость = Истина;
		Иначе
			Элементы.Поле2.Видимость = Ложь;
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОрганизацияИзДокумента = Ложь;	
	Элементы.ГруппаВидыОплаты.Видимость = Ложь;
	Элементы.ГруппаГруппировка.Видимость = Ложь;
	Элементы.ГруппаВидыОплатыСчета.Видимость = Ложь;
	Элементы.ГруппаФизЛица.Видимость = Ложь;
	Элементы.ГруппаНоменклатура.Видимость = Ложь;	
	Элементы.Выполнить.Доступность = Ложь;
	НачПериода = ТекущаяДата();
	КонПериода = ТекущаяДата();
	ОрганизацияДокумента = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ИнициализироватьИменаКолонок();
	Объект.Контрагенты.Очистить();
	Объект.Номенклатура.Очистить();
	Объект.Склады.Очистить();
	Объект.Докум.Очистить();
	Открывать = 1;
	Элементы.Выполнить.Доступность = Ложь;
	НаимКонф = Метаданные.Синоним; 	
	Элементы.СтатьяЗатрат.Видимость = Ложь;
	Элементы.БезналичныеОплаты.Видимость = Ложь;
	
	Если (АП или АР или АПЕР или АС или РН) тогда 
		Элементы.Подразделение.Видимость = Истина
	Иначе
		Элементы.Подразделение.Видимость = Ложь
	КонецЕсли;
	
	Если АР или АУ тогда 
		Элементы.СтатьяДДС.Видимость = Истина		
	Иначе 
		Элементы.СтатьяДДС.Видимость = Ложь;
	КонецЕсли;
	
	Если Найти(НаимКонф,"Бухгалтерия для Украины") > 0 Тогда
		Укр = 1;
		Элементы.СтатьяЗатрат.Видимость = Истина;
	Иначе 
		Элементы.СтатьяЗатрат.Видимость = Ложь;
		Укр = 0;
	КонецЕСли;
	
	ОсновнаяНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(?(Укр = 0,"Основная номенклатурная группа", "Основна номенклатурна група"));
	
	Если не ЗначениеЗаполнено(ОсновнаяНоменклатурнаяГруппа) тогда
		ОсновнаяНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду(?(Укр = 1,"00000001","000000001"));
		Если не ЗначениеЗаполнено(ОсновнаяНоменклатурнаяГруппа) тогда
			Сообщить("Не найдена основная номенклатурная группа!!!", СтатусСообщения.Важное);
		КонецЕсли;	
	КонецЕсли;
	
	Юрлицо = "";
	
	Если не ЗначениеЗаполнено(ОрганизацияДокумента) Тогда
		ОрганизацияДокумента = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация")
	КонецЕсли;
	
	Элементы.ОрганизацияДокумента.Видимость = ОрганизацияИзДокумента = 0;
 	УИДФормы = ЭтаФорма.УникальныйИдентификатор;
	СТруктураНастроек = Новый Структура;
	Настройка = ЗагрузитьНастройки();
	ТекущаяНастройка = Настройка.ВерсияОбъекта.Получить();
//	СТрокаНастроек = XMLСтрока(ТекущаяНастройка);
	//ПрочитатьXML(
	
	Если ТекущаяНастройка <> Неопределено Тогда                
		Попытка
			ЕдиницаИзмренияДефолтная=ТекущаяНастройка.СохраненнаяНастройка.ОбщиеНастройки.ЕдиницаИзмренияДефолтная;
			ТаблицаЕдиницыИзмерений.Очистить();
			для каждого еи из ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений цикл
				стр = ТаблицаЕдиницыИзмерений.Добавить();
				стр.ЕдиницаИзмеренияАйко = еи.НазваниеАйко;
				стр.ЕдиницаИзмерения1С = еи.Значение;
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при открытии формы: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);
	
КонецПроцедуры

&НаСервере                 
Функция Модуль(Числ)
	
	Если Числ < 0 Тогда
		Возврат -Числ;
	Иначе
		Возврат Числ;
	КонецЕсли;
	
КонецФункции	                  

&НаСервере
Функция УдалитьПробелы(Стрр) 
	
	Если Значениезаполнено(Стрр) тогда
		Возврат Число(СокрЛП(СтрЗаменить(Стрр,Символы.НПП,"")));
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УдалитьПроб(Стрр)
	
	Возврат СтрЗаменить(Стрр,Символы.НПП,"");
	
КонецФункции

&НаСервере
Функция ПолучитьСтавкуНДС(СтавкаЧисло,Сумма,СуммаНДС)
	
	Если Укр = 0 Тогда
		Ставка = Перечисления.СтавкиНДС.БезНДС;
		Если СтавкаЧисло = 18 Тогда
			Ставка = Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;
		
		Если СтавкаЧисло = 10 Тогда
			Ставка =  Перечисления.СтавкиНДС.НДС10;
		КонецЕсли;
		
	Иначе
		Ставка =  Перечисления.СтавкиНДС.НДС20;
	КонецЕсли;
	
	Возврат Ставка;
	
КонецФункции

&НаСервере
Функция ПолучитьСтавкуНДС2(СтавкаСтрока)
	
	СтавкаЧисло = Число(СокрЛП(СтавкаСтрока));
	
	Если Укр = 0 Тогда
		Если СтавкаЧисло = 18 Тогда
			Возврат Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;	
		Если СтавкаЧисло = 10 Тогда
			Возврат Перечисления.СтавкиНДС.НДС10;
		КонецЕсли;	
		Возврат Перечисления.СтавкиНДС.БезНДС;
	Иначе
		Если СтавкаЧисло = 0 Тогда
			Возврат Перечисления.СтавкиНДС.НДС0;
		Иначе
			Возврат Перечисления.СтавкиНДС.БезНДС;		
		КонецЕсли;			
	КонецЕсли
	
КонецФункции

&НаСервере
Процедура ИнвертироватьВыборНажатие(Элемент)
	
	// ALEXV: Инвертируем выбор флажков
	Для Каждого Стр из Объект.Докум Цикл
		Стр.Выбор = не Стр.Выбор;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
функция ТруКодн(Стр)
	
	Если Укр = 1 тогда
		Возврат СокрЛП(Стр);
	Иначе
		Возврат ДобитьПробелы(СокрЛП(Стр),11);
	КонецЕСли;	
	
КонецФункции

&НаСервере
Функция ДопустимыйНомер(Стр,префикс,кодТП,коммент)
	
	
	пр = СтрДлина(префикс);
	
	Если СтрДлина(СокрЛП(Стр)) + пр > 11 тогда 
		Сообщить("Номер документа " + коммент + ": " + Стр + " превышает допустимый лимит в " + (11-пр) + " символов. Документ не записан.", СтатусСообщения.ОченьВажное);
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьНомерДокумента(номер, дата, префикс, коммент, кодТП,ВидДокумента)
	дата = УдалитьПроб(СокрЛП(дата));
	Если ВидДокумента = "Акт Списания" или ВидДокумента = "Акт Реализации" или (АР и ВидДокумента = "Прием кассовой выручки")  тогда  
		Если АналитикаДокументов = "День" Тогда
			Год = Сред(дата,7,4);
			Месяц = Сред(дата,4,2);
			День = Лев(дата,2);
			дл = СтрДлина(префикс); 
			Если дл > 10 Тогда
				Сообщить("Номер документа " + коммент + ": " + номер + " превышает допустимый лимит в 11 символов. Документ не записан.", СтатусСообщения.ОченьВажное);
				Возврат Ложь;
			КонецЕсли;
			ДатаДокумМесяц = Дата(Год,Месяц,День,23,0,0);
			Возврат ДобитьПробелы(Год + "." + Месяц + "." + День,11-дл);
		ИначеЕсли АналитикаДокументов = "Месяц" Тогда
			ДатаДокумМесяц = КонецМесяца(дата);
			Год = Сред(ДатаДокумМесяц,7,4);
			Месяц = Сред(ДатаДокумМесяц,4,2);
			дл = СтрДлина(префикс);
			Если НомерПлюсКодТП тогда 
				дл = СтрДлина(префикс+кодТП); 
			КонецЕсли;
			Если дл > 7 Тогда
				Сообщить("Номер документа " + коммент + ": " + номер + " превышает допустимый лимит в 11 символов. Документ не записан.", СтатусСообщения.ОченьВажное);
				Возврат Ложь;
			КонецЕсли;
			Если НомерПлюсКодТП тогда 
				Возврат  ДобитьПробелы(кодТП + Год + "/" + Месяц,11-дл);	
			Иначе			
				Возврат  ДобитьПробелы(Год + "/" + Месяц,11-дл);
			КонецЕсли;
		КонецЕсли;
	КОнецЕсли;
	
	ДатаДокумМесяц = дата;
	Возврат номер;
	
КонецФункции	

&НаСервере
Функция СоздатьДоговор(Контрагент, Организация, ВидДоговора, НазваниеДоговора, получить)
	
	Выборка = Справочники.ДоговорыКонтрагентов.Выбрать(,Контрагент,,);
		
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидДоговора = ВидДоговора и Выборка.Организация = Организация Тогда
			Возврат Выборка.ПолучитьОбъект().Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Дог = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	Дог.Владелец = Контрагент.Ссылка;
	Дог.Наименование = НазваниеДоговора;//"Основной договор покупателя";
	Дог.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	Дог.Организация = Организация;
	
	Если НЕ ЗначениеЗаполнено(Дог.ВалютаВзаиморасчетов) Тогда
		Дог.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если УКР = 1 Тогда
		Дог.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	КонецЕсли;
	
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем тогда   
		Дог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	Иначе
		Дог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	КонецЕсли;

	Дог.УстановитьНовыйКод(Дог.Организация.Префикс);
	
	Попытка
		Сообщить("Создание: " + НазваниеДоговора + " для контрагента: " + Контрагент.НаименованиеПолное + 
		", организация: " + Организация + ", тип: " + ВидДоговора);
		Дог.Записать();
		Если Контрагент.ПолучитьОбъект().Метаданные().Реквизиты.Найти("ОсновнойДоговорКонтрагента") <> Неопределено тогда  
			Если не ЗначениеЗаполнено(Контрагент.ОсновнойДоговорКонтрагента) тогда
				Если получить Тогда
					Контр1 = Контрагент.ПолучитьОбъект();
				Иначе
					Контр1 =  Контрагент;
				КонецЕсли;
				Контр1.ОсновнойДоговорКонтрагента = Дог.Ссылка;
				КОнтр1.ГоловнойКонтрагент = Контрагент.Ссылка;
				Контр1.Записать();
			КонецЕСли;
		КОнецЕсли;
	Исключение
		Сообщить("Договор создать не удалось:" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
	
	Возврат Дог.Ссылка;
	
КонецФункции

//&НаСервере 
//Функция НайтиДоговор(Организация, Контрагент, ВидДоговора, НазваниеДоговора)
//	Дог = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Организация", Организация, , Контрагент);
//	
//	Если ЗначениеЗаполнено(Дог) Тогда
//		Если Дог.ВидДоговора <>  ВидДоговора Тогда
//			Дог = СоздатьДоговор(Контрагент, Организация, ВидДоговора, НазваниеДоговора, Истина);
//		КонецЕсли;
//	Иначе
//		Дог = СоздатьДоговор(Контрагент, Организация, ВидДоговора, НазваниеДоговора, Истина);
//	КонецЕсли;
//	
//	Возврат Дог;
//	
//КонецФункции

&НаСервере 
Функция НайтиДоговор(Организация, Контрагент, ВидДоговора, НазваниеДоговора)
    Дог = Справочники.ДоговорыКонтрагентов.Выбрать(, Контрагент, Новый Структура("Организация", Организация));
	
	Пока Дог.Следующий() Цикл 
        Если Не Дог.ПометкаУдаления И Дог.ВидДоговора = ВидДоговора Тогда 
            Возврат Дог.Ссылка;
        КонецЕсли;
    КонецЦикла;  
	
	Дог = СоздатьДоговор(Контрагент, Организация, ВидДоговора, НазваниеДоговора, Истина);
    
    Возврат Дог;  
КонецФункции

&НаСервере
Функция СоздатьНоменклатуру(Код, Наименование, Категория = Неопределено, СтавкаНДСстр = Неопределено)
	Перем ЕдиницаИзмеренияНазвание;
	
	ВсяНомеклатураАйко = ПолучитьИзВременногоХранилища(АдресНомАйко);
	
	ЕдиницаИзмеренияАйко = Неопределено;
	СтавкаНДС = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(,СтавкаНДС);
	
	Если Код <>  Неопределено Тогда
		номен = ВсяНомеклатураАйко.Найти(Код + "-" + СтавкаНДСстр,"Ключ");
		Если номен = Неопределено Тогда
			номен = ВсяНомеклатураАйко.Найти(Код,"НКодИИКО");
			АдресНомАйко = ПоместитьВоВременноеХранилище(ВсяНомеклатураАйко, УИДФормы);
			Если номен = Неопределено Тогда                                                        
				Сообщить("Ошибка нахождения номенклатуры с кодом " + Код, СтатусСообщения.ОченьВажное);
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			АдресНомАйко = ПоместитьВоВременноеХранилище(ВсяНомеклатураАйко, УИДФормы);
		КонецЕсли;
		
		Если Наименование = Неопределено Тогда
			Наименование = номен.ННаименованиеИИКО;
		КонецЕсли;
		Если Категория = Неопределено Тогда
			Категория = номен.ГруппаУчетаНазвание;
		КонецЕсли;	
		СтавкаНДС = ПолучитьСтавкуНДС2(номен.СтавкаНДС);
		ЕдиницаИзмеренияАйко = номен.ЕдиницаИзмерения;
	Иначе
		Если СтавкаНДСстр <>  Неопределено Тогда
			СтавкаНДС = ПолучитьСтавкуНДС2(СтавкаНДСстр);
		КонецЕсли;		
	КонецЕсли;	
	
	Если Категория = Неопределено Тогда
		Сообщить("Неизвестная категория у номенклатуры с кодом " + Код, СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;	
	
	// Поиск по названию!
	катег = Объект.БухгалтерскаяКатегория.НайтиСтроки(Новый Структура("КатегорияАйко", Категория));
	Если (катег.количество() = 0)  или не (ЗначениеЗаполнено(катег[0].Группа1С)) Тогда
		Сообщить("Незаполнена группа для категории " + Категория, СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;		
	
	Ном = Справочники.Номенклатура.СоздатьЭлемент();
	Если Код <>  Неопределено Тогда
		Элемм = Справочники.Номенклатура.НайтиПоКоду(ТруКодН(Код), Истина);
		Если не ЗначениеЗаполнено(Элемм) тогда
			Ном.Код = ТруКодН(Код);
		КонецЕсли;
	КонецЕсли;	
	
	Ном.Наименование = Наименование;
	Ном.СтавкаНДС = СтавкаНДС;
	Ном.НаименованиеПолное = Наименование;
	Ном.Родитель = катег[0].Группа1С.Ссылка;
	Ном.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Основная номенклатурная группа");
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);
	ЕдиницаИзмеренияНайдена=ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Найти(ЕдиницаИзмеренияАйко, "НазваниеАйко");
	//ВидНом = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар",Истина);
	//ПустойВид = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	//Если ВидНом <> ПустойВид и ВидНом <> Неопределено тогда 
	//	Ном.ВидНоменклатуры = ВидНом;
	//Иначе
		//НовыйВидНоменклатуры = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		//НовыйВидНоменклатуры.Наименование = "Товар";
		//НовыйВидНоменклатуры.Услуга = Ложь;
		//НовыйВидНоменклатуры.Записать();
		//Ном.ВидНоменклатуры = НовыйВидНоменклатуры.Ссылка;
	//КонецЕсли;
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияНайдена) Тогда
		Ном.ЕдиницаИзмерения=ЕдиницаИзмеренияНайдена[1].Ссылка;
	Иначе
		Ном.ЕдиницаИзмерения=ТекущаяНастройка.СохраненнаяНастройка.ОбщиеНастройки.ЕдиницаИзмренияДефолтная;
		Сообщить("Для номенклатуры " + Ном.Наименование + " единица измерения задана из настроек!!");
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Ном.ЕдиницаИзмерения) тогда
		Сообщить("Не задана единица измерения по умолчанию! Зайдите в настройки и укажите еденицу измерения по умолчанию.", СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;	
	
	Если катег[0].Группа1С.Наименование = "Услуги" или катег[0].Группа1С.Код = "00000000009" Тогда
		Ном.Услуга = Истина;
		Ном.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуги");
	КонецЕсли;
	
	Попытка
		Ном.Записать();
	Исключение
		Ном.УстановитьНовыйКод();
		Попытка
			Ном.Записать();
		Исключение
			Сообщить("Номенклатуру создать не удалось:" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Возврат Неопределено;	
		КонецПопытки;
	КонецПопытки;
	
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);
	Возврат Ном.Ссылка;
	
КонецФункции

&НаСервере
Процедура ЗаписатьСтроку(invoice, invoiceItem)
	
	Если ЗначениеЗаполнено(invoiceItem.Article) = Истина тогда
		Если Число(invoiceItem.Amount_DecimalAsString) <>  0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(invoiceItem.JuristicPersonName) <>  СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			
			НоваяСтрока = Тз.Добавить();
			НоваяСтрока.Дата = invoice.Date;
			НоваяСтрока.НомерДок = invoice.Number;
			НоваяСтрока.Входномер = invoice.IncomingNumber;
			НоваяСтрока.Входдата = invoice.IncomingDate_DateTimeAsString;
			НоваяСтрока.КИННИИКО = invoice.SupplierINN;
			НоваяСтрока.ККодИИКО = invoice.SupplierCode;
			НоваяСтрока.КНаименованиеИИКО = invoice.SupplierName;
			НоваяСтрока.СчетФактура = invoice.invoice;
			// ALEXV: Добавляем код и название сотрудника
			НоваяСтрока.СотрудникКод = invoice.StaffCode;
			НоваяСтрока.СотрудникНаименование = invoice.StaffName;			
			НоваяСтрока.НКодИИКО = invoiceItem.Article;    
			НоваяСтрока.ННаименованиеИИКО = invoiceItem.Nomenclature;    
			НоваяСтрока.ГруппаучетаНазвание = invoiceItem.AccountingCategory; 
			НоваяСтрока.ГруппаучетаКод = invoiceItem.AccountingCategoryCode;   
			НоваяСтрока.СкладКод = invoiceItem.StoreCode;    
			НоваяСтрока.СкладНаименование = invoiceItem.StoreName;    
			НоваяСтрока.Колво = invoiceItem.Amount_DecimalAsString;    
			НоваяСтрока.ЦенасНДС = invoiceItem.PriceWithNds_DecimalAsString;    
			НоваяСтрока.СуммасНДС = invoiceItem.SumWithNds_DecimalAsString;    
			НоваяСтрока.СуммаНДС = invoiceItem.Nds_DecimalAsString;    
			НоваяСтрока.СтавкаНДС = invoiceItem.NdsPercent_DecimalAsString; 
			НоваяСтрока.ЮЛИНН = invoiceItem.JuristicPersonINN;
			НоваяСтрока.ЮЛнаименование = invoiceItem.JuristicPersonName;
			// ALEXV: Добавляем код и название подразделения
			НоваяСтрока.Торговоепредприятиекод = invoiceItem.DepartmentCode;
			НоваяСтрока.Торговоепредприятиенаименование = invoiceItem.DepartmentName;
			НоваяСтрока.Единицаизмеренияназвание = invoiceItem.MeasureUnitName;
			
			НоваяСтрока.КонцепцияКод = invoice.ConceptionCode;
			НоваяСтрока.КонцепцияНазвание = invoice.ConceptionName;
			Попытка
				НоваяСтрока.Комментарий = invoice.Comment;
				НоваяСтрока.НомерГТД = invoiceItem.CustomsDeclarationNumber;
			Исключение
				
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры " + invoiceItem.Nomenclature + " не задан код!!!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьрСтроку(document, documentItem)
	
	Если ЗначениеЗаполнено(documentItem.Article) = Истина тогда
		Если Число(documentItem.Amount_DecimalAsString) <>  0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(documentItem.JuristicPersonName) <>  СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз8.Добавить();
			НоваяСтрока.Дата =  document.Date;
			НоваяСтрока.НомерДок =  document.Number;
			НоваяСтрока.СкладКод =  documentItem.StoreCode;    
			НоваяСтрока.СкладНаименование =  documentItem.StoreName;   
			НоваяСтрока.НКодИИКО =  documentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО =  documentItem.Nomenclature;    
			НоваяСтрока.Группаучетаназвание =  documentItem.AccountingCategory;
			НоваяСтрока.ГруппаучетаКод =  documentItem.AccountingCategoryCode;
			НоваяСтрока.Количество =  documentItem.Amount_DecimalAsString;    
			НоваяСтрока.ЦенапродажисНДС =  documentItem.PriceWithNds_DecimalAsString;    
			НоваяСтрока.СуммапродажисНДС =  documentItem.SumWithNds_DecimalAsString;    
			НоваяСтрока.СуммаНДСспродаж =  documentItem.Nds_DecimalAsString;    
			НоваяСтрока.СтавкаНДСспродаж =  documentItem.NdsPercent_DecimalAsString;
			НоваяСтрока.СебестоимостьзаедбезНДС =  documentItem.CostPriceByUnit_DecimalAsString;    
			НоваяСтрока.СебестоимостьбезНДС =  documentItem.CostPrice_DecimalAsString;    
			НоваяСтрока.СтавкаНДС =  documentItem.NdsProductPercent_DecimalAsString;    
			НоваяСтрока.Торговоепредприятиекод =  documentItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование =  documentItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН =  documentItem.JuristicPersonINN;
			НоваяСтрока.ЮЛнаименование =  documentItem.JuristicPersonName;
			НоваяСтрока.Операция =  documentItem.Operation;
			НоваяСтрока.Операцияназвание =  documentItem.OperationName;
			НоваяСтрока.Типсписания =  documentItem.WriteoffType;
			НоваяСтрока.Типсписанияназвание =  documentItem.WriteoffTypeName;
			НоваяСтрока.Единицаизмеренияназвание = documentItem.MeasureUnitName;
			НоваяСтрока.Движениеденежныхсредствкод =  document.RevenueAccountCode;
			НоваяСтрока.Движениеденежныхсредств =  document.RevenueAccountName;
			НоваяСтрока.Статьярасходовкод =  document.WriteoffAccountCode;
			НоваяСтрока.Статьярасходов =  document.WriteoffAccountName;
			НоваяСтрока.КИННИИКО =  document.CustomerINN;
			НоваяСтрока.ККодИИКО =  document.CustomerCode;
			НоваяСтрока.КНаименованиеИИКО =  document.CustomerName;
			НоваяСтрока.КонцепцияКод = document.ConceptionCode;
			НоваяСтрока.КонцепцияНазвание = document.ConceptionName;
			Попытка
				НоваяСтрока.Комментарий = document.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры " + documentItem.Nomenclature + " не задан код!!!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСТрокуПеремещения(Document, DocumentItem)
	
	Если ЗначениеЗаполнено(DocumentItem.Article) = Истина тогда
		Если Число(DocumentItem.Amount_DecimalAsString) <>  0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(DocumentItem.JuristicPersonOutcomeName) <>  СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз2.Добавить();
			НоваяСтрока.Дата =  Document.Date;
			НоваяСтрока.НомерДок =  Document.Number;
			НоваяСтрока.Торговоепредприятиеотправителькод =  DocumentItem.DepartmentOutcomeCode;
			НоваяСтрока.Торговоепредприятиеотправительнаименование =  DocumentItem.DepartmentOutcomeName;
			НоваяСтрока.ЮЛотправительИНН =  DocumentItem.JuristicPersonOutcomeINN;
			НоваяСтрока.ЮЛотправительнаименование =  DocumentItem.JuristicPersonOutcomeName;
			НоваяСтрока.Складотправителькод =  DocumentItem.StoreOutcomeCode;
			НоваяСтрока.Складотправительнаименование =  DocumentItem.StoreOutcomeName;
			НоваяСтрока.Торговоепредприятиеполучателькод =  DocumentItem.DepartmentIncomeCode;    
			НоваяСтрока.Торговоепредприятиеполучательнаименование =  DocumentItem.DepartmentIncomeName;   
			НоваяСтрока.ЮЛполучательИНН =  DocumentItem.JuristicPersonIncomeINN;    
			НоваяСтрока.ЮЛполучательнаименование =  DocumentItem.JuristicPersonIncomeName;    
			НоваяСтрока.Складполучателькод =  DocumentItem.StoreIncomeCode;    
			НоваяСтрока.Складполучательнаименование =  DocumentItem.StoreIncomeName;    
			НоваяСтрока.НКодИИКО =  DocumentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО =  DocumentItem.Nomenclature;    
			НоваяСтрока.Группаучетаназвание =  DocumentItem.AccountingCategory; 
			НоваяСтрока.ГруппаучетаКод =  DocumentItem.AccountingCategoryCode;
			НоваяСтрока.Количество =  DocumentItem.Amount_DecimalAsString; 
			НоваяСтрока.СебестоимостьзаедбезНДС =  DocumentItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС =  DocumentItem.CostPrice_DecimalAsString; 
			НоваяСтрока.СтавкаНДС =  DocumentItem.NdsProductPercent_DecimalAsString; 
			НоваяСтрока.Единицаизмеренияназвание = DocumentItem.MeasureUnitName;
			НоваяСтрока.КонцепцияКод = Document.ConceptionCode;
			НоваяСтрока.КонцепцияНазвание = Document.ConceptionName;

			Попытка
				НоваяСтрока.Комментарий = Document.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры " + DocumentItem.Nomenclature + " не задан код!!!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСТрокуПриготовления(Document, DocumentItem,знак)
	
	Если ЗначениеЗаполнено(DocumentItem.Article) = Истина тогда
		Если Число(DocumentItem.Amount_DecimalAsString) <>  0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(DocumentItem.JuristicPersonName) <>  СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз3.Добавить();
			НоваяСтрока.Дата =  Document.Date;
			НоваяСтрока.НомерДок =  Document.Number;
			Если Знак = 0 Тогда
				НоваяСтрока.Складсписаниякод =  DocumentItem.StoreCode;
				НоваяСтрока.Складсписаниянаименование =  DocumentItem.StoreName;				
			Иначе
				НоваяСтрока.Складприходакод =  DocumentItem.StoreCode;
				НоваяСтрока.Складприходанаименование =  DocumentItem.StoreName;				
			КонецЕсли;
			НоваяСтрока.Знакоперации = DocumentItem.Operation;    
			НоваяСтрока.Знакоперацииназвание =  DocumentItem.OperationName;   
			НоваяСтрока.НКодИИКО =  DocumentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО =  DocumentItem.Nomenclature;    
			НоваяСтрока.Группаучетаназвание =  DocumentItem.AccountingCategory; 
			НоваяСтрока.ГруппаучетаКод =  DocumentItem.AccountingCategoryCode;
			НоваяСтрока.Количество =  DocumentItem.Amount_DecimalAsString; 
			НоваяСтрока.СебестоимостьзаедбезНДС =  DocumentItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС =  DocumentItem.CostPrice_DecimalAsString; 
			НоваяСтрока.СтавкаНДС =  DocumentItem.NdsProductPercent_DecimalAsString; 
			НоваяСтрока.Торговоепредприятиекод =  DocumentItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование =  DocumentItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН =  DocumentItem.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование =  DocumentItem.JuristicPersonName; 
			НоваяСтрока.Единицаизмеренияназвание = DocumentItem.MeasureUnitName;
			НоваяСтрока.КонцепцияКод = Document.ConceptionCode;
			НоваяСтрока.КонцепцияНазвание = Document.ConceptionName;
			Попытка
				НоваяСтрока.Комментарий = Document.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры " + DocumentItem.Nomenclature + " не задан код!!!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСТрокуПереработки(Document, DocumentItem,знак)
	
	Если ЗначениеЗаполнено(DocumentItem.Article) = Истина тогда
		Если Число(DocumentItem.Amount_DecimalAsString) <>  0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(DocumentItem.JuristicPersonName) <>  СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз5.Добавить();
			НоваяСтрока.Дата =  Document.Date;
			НоваяСтрока.НомерДок =  Document.Number;
			Если Знак = 0 Тогда
				НоваяСтрока.Складсписаниякод =  DocumentItem.StoreCode;
				НоваяСтрока.Складсписаниянаименование =  DocumentItem.StoreName; 				
			Иначе
				НоваяСтрока.Складприходакод =  DocumentItem.StoreCode;
				НоваяСтрока.Складприходанаименование =  DocumentItem.StoreName;				
			КонецЕсли;
			НоваяСтрока.Знакоперации = DocumentItem.Operation;    
			НоваяСтрока.Знакоперацииназвание =  DocumentItem.OperationName;   
			НоваяСтрока.НКодИИКО =  DocumentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО =  DocumentItem.Nomenclature;    
			НоваяСтрока.Группаучетаназвание =  DocumentItem.AccountingCategory; 
			НоваяСтрока.ГруппаучетаКод =  DocumentItem.AccountingCategoryCode;
			НоваяСтрока.Количество =  DocumentItem.Amount_DecimalAsString; 
			НоваяСтрока.СебестоимостьзаедбезНДС =  DocumentItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС =  DocumentItem.CostPrice_DecimalAsString; 
			НоваяСтрока.СтавкаНДС =  DocumentItem.NdsProductPercent_DecimalAsString; 
			НоваяСтрока.Торговоепредприятиекод =  DocumentItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование =  DocumentItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН =  DocumentItem.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование =  DocumentItem.JuristicPersonName; 
			НоваяСтрока.Единицаизмеренияназвание = DocumentItem.MeasureUnitName;
			НоваяСтрока.КонцепцияКод = Document.ConceptionCode;
			НоваяСтрока.КонцепцияНазвание = Document.ConceptionName;
			Попытка
				НоваяСтрока.Комментарий = Document.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры " + DocumentItem.Nomenclature + " не задан код!!!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуПродаж(oSale, oSaleItem)
	
	Если ЗначениеЗаполнено(oSaleItem.Article) тогда
		Если Число(oSaleItem.Amount_DecimalAsString) <>  0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(oSaleItem.JuristicPersonName) <>  СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз1.Добавить();
			НоваяСтрока.Дата = oSale.Date;
			НоваяСтрока.НомерДок = oSale.Number;
			Если oSale.CashRegNumber <> "" тогда 
				НоваяСтрока.НомерКассы = oSale.CashRegNumber;
				НоваяСтрока.НомерСмены = oSale.SessionNumber;
			Иначе
				НоваяСтрока.НомерКассы = "";
				НоваяСтрока.НомерСмены = "";
			КОнецЕсли;
			НоваяСтрока.Движениеденежныхсредствкод = oSale.RevenueAccountCode;
			НоваяСтрока.Движениеденежныхсредств = oSale.RevenueAccountName;
			НоваяСтрока.СкладКод = oSaleItem.StoreCode;    
			НоваяСтрока.СкладНаименование = oSaleItem.StoreName;    
			НоваяСтрока.Операция = "" + oSaleItem.Operation;
			НоваяСтрока.Операцияназвание =  oSaleItem.OperationName;
			НоваяСтрока.НКодИИКО = oSaleItem.Article;    
			НоваяСтрока.ННаименованиеИИКО = oSaleItem.Nomenclature;  
			НоваяСтрока.Группаучетаназвание = oSaleItem.AccountingCategory;
			НоваяСтрока.ГруппаучетаКод = oSaleItem.AccountingCategoryCode;
			НоваяСтрока.Количество = oSaleItem.Amount_DecimalAsString;
			НоваяСтрока.ЦенапродажисНДС = oSaleItem.PriceWithNds_DecimalAsString;
			НоваяСтрока.СуммапродажисНДС = oSaleItem.SumWithNds_DecimalAsString;
			НоваяСтрока.СуммаНДСспродаж = oSaleItem.Nds_DecimalAsString;
			НоваяСтрока.СтавкаНДСспродаж = oSaleItem.NdsPercent_DecimalAsString; 
			//НоваяСтрока.СтавкаНДС =  oSaleItem.NdsPercent_DecimalAsString; 
			НоваяСтрока.СебестоимостьзаедбезНДС = oSaleItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС = oSaleItem.CostPrice_DecimalAsString; 
			НоваяСтрока.Торговоепредприятиекод = oSaleItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование = oSaleItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН = oSaleItem.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование = oSaleItem.JuristicPersonName; 
			НоваяСтрока.ТипСписания = oSaleItem.WriteoffType; 
			НоваяСтрока.ТипСписанияНазвание = oSaleItem.WriteoffTypeName; 
			НоваяСтрока.Единицаизмеренияназвание = oSaleItem.MeasureUnitName;
			НоваяСтрока.КонцепцияКод = oSale.ConceptionCode;
			НоваяСтрока.КонцепцияНазвание = oSale.ConceptionName;
			Если ВерсияАйко >=  2 Тогда
				НоваяСтрока.ПроданноеБлюдоКод = oSaleItem.SoldWithDishCode; 
				НоваяСтрока.ПроданноеБлюдоНазвание = oSaleItem.SoldWithDishName;  
			КонецЕсли;
			Попытка
				НоваяСтрока.Комментарий = oSale.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуСписаний(oSale, oWriteoffItem)
	
	Если ЗначениеЗаполнено(oWriteoffItem.Article) тогда
		Если Число(oWriteoffItem.Amount_DecimalAsString) <>  0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(oWriteoffItem.JuristicPersonName) <>  СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз1.Добавить();
			НоваяСтрока.Дата =  oSale.Date;
			НоваяСтрока.НомерДок =  oSale.Number;
			Если oSale.CashRegNumber <> "" тогда 
				НоваяСтрока.НомерКассы = oSale.CashRegNumber;
				НоваяСтрока.НомерСмены = oSale.SessionNumber;
			Иначе
				НоваяСтрока.НомерКассы = "";
				НоваяСтрока.НомерСмены = "";
			КОнецЕсли;
			НоваяСтрока.Движениеденежныхсредствкод =  oSale.RevenueAccountCode;
			НоваяСтрока.Движениеденежныхсредств =  oSale.RevenueAccountName;
			НоваяСтрока.СкладКод =  oWriteoffItem.StoreCode;    
			НоваяСтрока.СкладНаименование =  oWriteoffItem.StoreName;    
			НоваяСтрока.Операция =  oWriteoffItem.Operation;
			НоваяСтрока.Операцияназвание =  oWriteoffItem.OperationName;
			НоваяСтрока.НКодИИКО =  oWriteoffItem.Article;    
			НоваяСтрока.ННаименованиеИИКО =  oWriteoffItem.Nomenclature;  
			НоваяСтрока.Группаучетаназвание =  oWriteoffItem.AccountingCategory;
			НоваяСтрока.ГруппаучетаКод =  oWriteoffItem.AccountingCategoryCode;
			НоваяСтрока.Количество =  oWriteoffItem.Amount_DecimalAsString;
			НоваяСтрока.СтавкаНДСспродаж =  oWriteoffItem.NdsNomenclaturePercent_DecimalAsString; 
			//НоваяСтрока.СтавкаНДС =  oWriteoffItem.NdsNomenclaturePercent_DecimalAsString; 
			НоваяСтрока.СебестоимостьзаедбезНДС =  oWriteoffItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС =  oWriteoffItem.CostPrice_DecimalAsString; 
			НоваяСтрока.Торговоепредприятиекод =  oWriteoffItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование =  oWriteoffItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН =  oWriteoffItem.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование =  oWriteoffItem.JuristicPersonName; 
			НоваяСтрока.Единицаизмеренияназвание = oWriteoffItem.MeasureUnitName;
			НоваяСтрока.КонцепцияКод = oSale.ConceptionCode;
			НоваяСтрока.КонцепцияНазвание = oSale.ConceptionName;

			Попытка
				НоваяСтрока.Комментарий = oSale.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуСписания(oDocument, oDocumentItem)
	
	Если ЗначениеЗаполнено(oDocumentItem.Article) тогда
		Если Число(oDocumentItem.Amount_DecimalAsString) <>  0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(oDocumentItem.JuristicPersonName) <>  СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз6.Добавить();
			НоваяСтрока.Дата =  oDocument.Date;
			НоваяСтрока.НомерДок =  oDocument.Number;
			НоваяСтрока.СкладКод =  oDocumentItem.StoreCode;    
			НоваяСтрока.СкладНаименование =  oDocumentItem.StoreName;    
			НоваяСтрока.НКодИИКО =  oDocumentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО =  oDocumentItem.Nomenclature;  
			НоваяСтрока.Группаучетаназвание =  oDocumentItem.AccountingCategory;
			НоваяСтрока.ГруппаучетаКод =  oDocumentItem.AccountingCategoryCode;
			НоваяСтрока.Количество =  oDocumentItem.Amount_DecimalAsString;
			НоваяСтрока.СебестоимостьзаедбезНДС =  oDocumentItem.CostPriceByUnit_DecimalAsString; 
			НоваяСтрока.СебестоимостьбезНДС =  oDocumentItem.CostPrice_DecimalAsString; 
			НоваяСтрока.СтавкаНДС =  oDocumentItem.NdsProductPercent_DecimalAsString; 
			НоваяСтрока.Торговоепредприятиекод =  oDocumentItem.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование =  oDocumentItem.DepartmentName; 
			НоваяСтрока.ЮЛИНН =  oDocumentItem.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование =  oDocumentItem.JuristicPersonName; 
			НоваяСтрока.СтатьяРасходов =  oDocument.WriteoffAccountName;
			НоваяСтрока.ТипСписания =  oDocumentItem.WriteoffType;
			НоваяСтрока.ТипСписанияНазвание =  oDocumentItem.WriteoffTypeName;
			НоваяСтрока.Операция =  oDocumentItem.Operation;
			НоваяСтрока.Операцияназвание =  oDocumentItem.OperationName;
			НоваяСтрока.Единицаизмеренияназвание = oDocumentItem.MeasureUnitName;
			НоваяСтрока.КонцепцияКод = oDocument.ConceptionCode;
			НоваяСтрока.КонцепцияНазвание = oDocument.ConceptionName;
			Попытка
				НоваяСтрока.Комментарий = oDocument.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуИнвентаризации(oDocument, oDocumentItem)
	
	Если ЗначениеЗаполнено(oDocumentItem.Article) тогда
		//Если Число(oDocumentItem.Amount_DecimalAsString) <>  0 Тогда
		Если ЗначениеЗаполнено(ЮрЛицо) тогда
			Если СокрЛП(oDocumentItem.JuristicPersonName) <>  СокрЛП(ЮрЛИЦо) Тогда
				Возврат;
			КонецЕСли;	
		КонецЕСли;	
		НоваяСтрока = Тз7.Добавить();
		НоваяСтрока.Дата =  oDocument.Date;
		НоваяСтрока.НомерДок =  oDocument.Number;
		НоваяСтрока.Складкод =  oDocumentItem.StoreCode;    
		НоваяСтрока.СкладНаименование =  oDocumentItem.StoreName;    
		НоваяСтрока.НКодИИКО =  oDocumentItem.Article;    
		НоваяСтрока.ННаименованиеИИКО =  oDocumentItem.Nomenclature;  
		НоваяСтрока.Группаучетаназвание =  oDocumentItem.AccountingCategory;
		НоваяСтрока.ГруппаучетаКод =  oDocumentItem.AccountingCategoryCode;
		НоваяСтрока.Количество =  oDocumentItem.Amount_DecimalAsString;
		НоваяСтрока.СебестоимостьзаедбезНДС =  oDocumentItem.CostPriceByUnit_DecimalAsString; 
		НоваяСтрока.СебестоимостьбезНДС =  oDocumentItem.CostPrice_DecimalAsString; 
		НоваяСтрока.СтавкаНДС =  oDocumentItem.NdsProductPercent_DecimalAsString; 
		НоваяСтрока.Торговоепредприятиекод =  oDocumentItem.DepartmentCode; 
		НоваяСтрока.Торговоепредприятиенаименование =  oDocumentItem.DepartmentName; 
		НоваяСтрока.ЮЛИНН =  oDocumentItem.JuristicPersonINN; 
		НоваяСтрока.ЮЛнаименование =  oDocumentItem.JuristicPersonName; 
		НоваяСтрока.Счетнедостачикод =  oDocument.AccountShortageCode;
		НоваяСтрока.Счетнедостачинаименование =  oDocument.AccountShortageName;
		НоваяСтрока.Счетизлишковкод =  oDocument.AccountSurplusCode;
		НоваяСтрока.Счетизлишковнаименование =  oDocument.AccountSurplusName;
		НоваяСтрока.Типноменклатурыкод =  oDocumentItem.NomenclatureType;
		НоваяСтрока.Типноменклатурыназвание =  oDocumentItem.NomenclatureTypeName;
		НоваяСтрока.ИзлишкиНедостачаКоличество = oDocumentItem.DiffAmount;
		НоваяСтрока.ИзлишкиНедостачаСумма = oDocumentItem.DiffCost;
		НоваяСтрока.Единицаизмеренияназвание = oDocumentItem.MeasureUnitName;
		Попытка
			НоваяСтрока.Комментарий = oDocument.Comment;
		Исключение 
		КонецПопытки;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьСтрокуПКВ(oDocument, oDocumentItem)
	
	Если Число(oDocumentItem.Sum_DecimalAsString) <>  0 Тогда
		Если ЗначениеЗаполнено(ЮрЛицо) тогда
			Если СокрЛП(oDocumentItem.JuristicPersonName) <>  СокрЛП(ЮрЛИЦо) Тогда
				Возврат;
			КонецЕСли;	
		КонецЕСли;	
		НоваяСтрока = Тз4.Добавить();
		НоваяСтрока.Дата =  oDocument.Date;
		НоваяСтрока.НомерДок =  oDocument.Number;
		НоваяСтрока.Торговоепредприятиекод =  oDocumentItem.DepartmentCode; 
		НоваяСтрока.Торговоепредприятиенаименование =  oDocumentItem.DepartmentName; 
		НоваяСтрока.ЮЛИНН =  oDocumentItem.JuristicPersonINN; 
		НоваяСтрока.ЮЛнаименование =  oDocumentItem.JuristicPersonName; 
		НоваяСтрока.Сумма =  oDocumentItem.Sum_DecimalAsString;
		НоваяСтрока.Видоплатыкод =  oDocumentItem.PaymentTypeId;
		НоваяСтрока.Видоплатынаименование =  oDocumentItem.PaymentTypeName;
		НоваяСтрока.Номеркарты =  oDocumentItem.Card;
		НоваяСтрока.Номеркассы =  oDocument.CashRegisterNumber;
		НоваяСтрока.РегномерККМ =  oDocument.CashRegisterSerial;
		НоваяСтрока.Номерсмены =  oDocument.SessionNumber;
		НоваяСтрока.ПокупательИНН =  oDocumentItem.CardHolderCompanyINN;
		НоваяСтрока.Покупательнаименование =  oDocumentItem.CardHolderCompanyName;
		НоваяСтрока.Фамилия =  oDocumentItem.CardHolderLastName;
		НоваяСтрока.Имя =  oDocumentItem.CardHolderFirstName;
		НоваяСтрока.Отчество =  oDocumentItem.CardHolderMiddleName;
		НоваяСтрока.Датарождения =  oDocumentItem.CardHolderBirthday_DateTimeAsString;
		НоваяСтрока.КонцепцияКод = oDocument.ConceptionCode;
		НоваяСтрока.КонцепцияНазвание = oDocument.ConceptionName;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуВН(oDocument, oDocumentItem)
	
	Если Число(oDocumentItem.Amount_DecimalAsString) <>  0 Тогда
		Если ЗначениеЗаполнено(ЮрЛицо) тогда
			Если СокрЛП(oDocumentItem.JuristicPersonName) <>  СокрЛП(ЮрЛИЦо) Тогда
				Возврат;
			КонецЕСли;	
		КонецЕСли;	
		
		НоваяСтрока = Тз9.Добавить();
		НоваяСтрока.Дата =  oDocument.Date;
		НоваяСтрока.НомерДок =  oDocument.Number;
		НоваяСтрока.Складкод =  oDocumentItem.StoreCode; 
		НоваяСтрока.Складнаименование =  oDocumentItem.StoreName; 
		НоваяСтрока.НКодИИКО =  oDocumentItem.Article; 
		НоваяСтрока.ННаименованиеИИКО =  oDocumentItem.Nomenclature; 
		НоваяСтрока.Группаучетаназвание =  oDocumentItem.AccountingCategory;
		НоваяСтрока.ГруппаучетаКод =  oDocumentItem.AccountingCategoryCode;
		НоваяСтрока.Количество =  oDocumentItem.Amount_DecimalAsString;
		НоваяСтрока.ЦенапродажисНДС =  oDocumentItem.PriceWithNds_DecimalAsString;
		НоваяСтрока.СуммапродажисНДС =  oDocumentItem.SumWithNds_DecimalAsString;
		НоваяСтрока.СуммаНДСспродаж =  oDocumentItem.Nds_DecimalAsString;
		НоваяСтрока.СтавкаНДСспродаж =  oDocumentItem.NdsPercent_DecimalAsString;
		НоваяСтрока.СебестоимостьзаедбезНДС =  oDocumentItem.CostPriceByUnit_DecimalAsString;
		НоваяСтрока.СебестоимостьбезНДС =  oDocumentItem.CostPrice_DecimalAsString;
		НоваяСтрока.СтавкаНДС =  oDocumentItem.NdsProductPercent_DecimalAsString;
		НоваяСтрока.Торговоепредприятиекод =  oDocumentItem.DepartmentCode;
		НоваяСтрока.Торговоепредприятиенаименование =  oDocumentItem.DepartmentName;
		НоваяСтрока.ЮЛИНН =  oDocumentItem.JuristicPersonINN;
		НоваяСтрока.ЮЛнаименование =  oDocumentItem.JuristicPersonName;
		НоваяСтрока.КИННИИКО =  oDocument.CustomerINN;
		НоваяСтрока.ККодИИКО =  oDocument.CustomerCode;
		НоваяСтрока.КНаименованиеИИКО =  oDocument.CustomerName;
		НоваяСтрока.Приходнаянакладнаядата =  oDocument.IncomingInvoiceDate_DateTimeAsString;
		НоваяСтрока.Приходнаянакладнаяномер =  oDocument.IncomingInvoiceNumber;
		НоваяСтрока.Счетфактура =  oDocument.Invoice;
		НоваяСтрока.Типноменклатурыкод =  oDocumentItem.NomenclatureType;
		НоваяСтрока.Типноменклатурыназвание =  oDocumentItem.NomenclatureTypeName;
		НоваяСтрока.Единицаизмеренияназвание = oDocumentItem.MeasureUnitName;
		НоваяСтрока.КонцепцияКод = oDocument.ConceptionCode;
		НоваяСтрока.КонцепцияНазвание = oDocument.ConceptionName;
		Попытка
			НоваяСтрока.Комментарий = oDocument.Comment;
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНакладную(Invoice)
	
	Попытка
		oInvoiceItem = Invoice.GetFirstInvoiceItem();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТроку(Invoice,oInvoiceItem);   
			oInvoiceItem = invoice.GetNextInvoiceItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьРНакладную(Document)
	
	Попытка
		oDocumentItem = document.GetFirstOutgoingInvoiceItem();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьрсТроку(document,oDocumentItem);   
			oDocumentItem = document.GetNextOutgoingInvoiceItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьПеремещение(oDocument)
	
	Попытка
		oDocumentItem = oDocument.GetFirstInternalTransferItem();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПеремещения(oDocument,oDocumentItem);   
			oDocumentItem = oDocument.GetNextInternalTransferItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьПриготовление(oDocument)
	
	Попытка
		oDocumentItem = odocument.GetFirstIncomeItems();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПриготовления(oDocument,oDocumentItem,1);   
			oDocumentItem = oDocument.GetNextIncomeItems();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		oDocumentItem = odocument.GetFirstOutcomeItems();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПриготовления(oDocument,oDocumentItem,0);   
			oDocumentItem = oDocument.GetNextOutcomeItems();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьПереработку(oDocument)
	
	Попытка
		oDocumentItem = odocument.GetFirstIncomeItems();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПереработки(oDocument,oDocumentItem,1);   
			oDocumentItem = oDocument.GetNextIncomeItems();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		oDocumentItem = odocument.GetFirstOutcomeItems();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПереработки(oDocument,oDocumentItem,0);   
			oDocumentItem = oDocument.GetNextOutcomeItems();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьПродажу(oSale)
	
	Попытка
		oSaleItem = oSale.GetFirstSaleItem();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПродаж(oSale,oSaleItem);   
			oSaleItem = oSale.GetNextSaleItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	Попытка
		oWriteoffItem = oSale.GetFirstWriteoffItem();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	Пока Истина Цикл
		Попытка
			ЗаписатьСтрокуСписаний(oSale,oWriteoffItem);   
			oWriteoffItem = oSale.GetNextWriteoffItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьСписание(oDocument)
	
	Попытка
		oDocumentItem = oDocument.GetFirstWriteoffDocItem();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуСписания(oDocument,oDocumentItem);   
			oDocumentItem = oDocument.GetNextWriteoffDocItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьИнвентаризацию(oDocument)
	
	Попытка
		oDocumentItem = oDocument.GetFirstInventoryItem();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуИнвентаризации(oDocument,oDocumentItem);   
			oDocumentItem = oDocument.GetNextInventoryItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьПКВ(oDocument)
	
	Попытка
		oDocumentItem = oDocument.GetFirstProfitTakingItem();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуПКВ(oDocument,oDocumentItem);   
			oDocumentItem = oDocument.GetNextProfitTakingItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗаписатьВН(oDocument)
	
	Попытка
		oDocumentItem = oDocument.GetFirstReturnedInvoiceItem();
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуВН(oDocument,oDocumentItem);   
			oDocumentItem = oDocument.GetNextReturnedInvoiceItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументы(тззз,ВидДокумента,ДатаПрефикс)
	
	Если ДатаПрефикс <>  неопределено и АналитикаДокументов <>  "По Документам" Тогда
		Для каждого Стр из Тззз цикл
			Если ВидДокумента = "Внутреннее Перемещение" тогда 
				Стр.НомерДок = ПолучитьНомерДокумента(Стр.НомерДок, Стр.Дата, ДатаПрефикс, ВидДокумента,Стр.ТорговоеПредприятиеОтправительКод,ВидДокумента);
			Иначе
				Стр.НомерДок = ПолучитьНомерДокумента(Стр.НомерДок, Стр.Дата, ДатаПрефикс, ВидДокумента,Стр.Торговоепредприятиекод,ВидДокумента);
			КОнецЕсли;
			Стр.Дата = НачалоДня(ДатаДокумМесяц);
		КонецЦикла;
	КонецЕсли;
	
	СуммаЭтоСуммаСНДС = Ложь;
	СуммаЭтоСуммапродажисНДС = Ложь;
	СуммаЭтоСумма = Ложь;
	
	Если (ВидДокумента = "Приходная Накладная") или (ВидДокумента = "Акт приёма услуг") тогда
		СуммаЭтоСуммаСНДС = Истина;
	ИначеЕсли (ВидДокумента = "Акт Реализации")или(ВидДокумента = "Расходная Накладная")или(ВидДокумента = "Возвратная Накладная") или (ВидДокумента = "Акт оказания услуг") тогда
		СуммаЭтоСуммапродажисНДС = Истина;
	ИначеЕсли (ВидДокумента = "Прием кассовой выручки") тогда
		СуммаЭтоСумма = Истина;
	КонецЕсли;
	
	ИгнорироватьСумму = Ложь;
	
	Если (ВидДокумента = "Акт Приготовления")или(ВидДокумента = "Акт Переработки") Тогда
		ИгнорироватьСумму = Истина;	
	КонецЕсли;
	
	ИгнорироватьСумму2 = Ложь;
	
	Если (ВидДокумента = "Акт Списания") Тогда
		ИгнорироватьСумму2 = Истина;	
	КонецЕсли;
	
	таб = тззз.Скопировать();
	таб.Колонки.Добавить("СуммаДок");
	
	Для Каждого Стр из таб цикл
		Если СуммаЭтоСуммаСНДС тогда
			Стр.СуммаДок = Стр.СуммасНДС;
		ИначеЕсли СуммаЭтоСуммапродажисНДС тогда
			Стр.СуммаДок = Стр.СуммапродажисНДС;
		ИначеЕсли СуммаЭтоСумма тогда
			Стр.СуммаДок = Стр.Сумма;
		Иначе
			Стр.СуммаДок = Стр.СебестоимостьбезНДС;
		КонецЕсли;
		Если ИгнорироватьСумму и Число(СокрЛП(Стр.Знакоперации)) = 2 Тогда
			Стр.СуммаДок = 0;
		ИначеЕсли ИгнорироватьСумму2 и Число(СокрЛП(Стр.операция)) = 2 Тогда
			Стр.СуммаДок = 0;
		КонецЕсли;
	КонецЦикла;	
	
	ИмеетКонтрагента = (ВидДокумента = "Приходная Накладная") или (ВидДокумента = "Акт приёма услуг") 
	или(ВидДокумента = "Расходная Накладная")или(ВидДокумента = "Возвратная Накладная") 
	или (ВидДокумента = "Акт оказания услуг"); 
	
	
	Если ИмеетКонтрагента тогда
		строкаСвертки = "Дата,НомерДок,КНаименованиеИИКО,ЮЛнаименование,ККодИИКО";
	ИначеЕсли (ВидДокумента = "Внутреннее Перемещение") Тогда
		строкаСвертки = "Дата,НомерДок,ЮЛотправительнаименование";
	Иначе
		строкаСвертки = "Дата,НомерДок,ЮЛнаименование";
	КонецЕсли;
	
	Если (ВидДокумента = "Внутреннее Перемещение") Тогда 
		таб.свернуть(строкаСвертки + ",СкладОтправительКод","СуммаДок");
		таб.Колонки.Добавить("СкладКод");
		
		Для каждого дд из таб Цикл
			дд.СкладКод = дд.СкладОтправительКод;
		КонецЦикла;
		
		таб.Колонки.Удалить("СкладОтправительКод");
	ИначеЕсли (ВидДокумента = "Акт Приготовления")или(ВидДокумента = "Акт Переработки") Тогда 
		таб.свернуть(строкаСвертки + ",СкладСписанияКод,СкладПриходаКод","СуммаДок"); 
		таб.Колонки.Добавить("СкладКод");
		таб2 = таб.Скопировать();
		таб2.свернуть(строкаСвертки,"СуммаДок");
		таб2.Колонки.Добавить("СкладКод");
		ПараметрыОтбора = Новый Структура;
		
		Для каждого дд из таб2 Цикл
			Склады1 = "";
			ПараметрыОтбора.Вставить("НомерДок", дд.НомерДок);
			Для каждого Стр из таб.НайтиСтроки(ПараметрыОтбора) Цикл
				Склады1 = Склады1 + Стр.СкладСписанияКод + ";" + Стр.СкладПриходаКод + ";";
			КонецЦикла;
			дд.СкладКод = Склады1;
		КонецЦикла;
		
		таб = таб2.Скопировать();
	КонецЕсли;
	
	Если ВидДокумента = "Прием кассовой выручки" Тогда 
		таб.свернуть(строкаСвертки,"СуммаДок");
	ИначеЕсли ВидДокумента = "Акт оказания услуг" или ВидДокумента = "Акт приёма услуг" тогда 
		 таб.свернуть(строкаСвертки,"СуммаДок");
	Иначе	
		таб.свернуть(строкаСвертки + ",СкладКод","СуммаДок");
	КонецЕсли;	
	
	Если АналитикаДокументов <>  "По Документам" и ВидДокумента <>  "Прием кассовой выручки" и ВидДокумента <>  "Акт приёма услуг" и ВидДокумента <>  "Акт оказания услуг"  Тогда
		//таб2 = Новый ТаблицаЗначений;
		таб2 = таб.Скопировать();
		таб.свернуть(строкаСвертки,"СуммаДок");
		таб.Колонки.Добавить("СкладКод");
		
		ПараметрыОтбора = Новый Структура;
		Для каждого дд из таб Цикл
			Склады1 = "";
			ПараметрыОтбора.Вставить("НомерДок", дд.НомерДок);
			Для каждого Стр из таб2.НайтиСтроки(ПараметрыОтбора) Цикл
				Склады1 = Склады1 + Стр.СкладКод + ";";
			КонецЦикла;
			дд.СкладКод = Склады1;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр из таб Цикл
		Стрр = Объект.докум.Добавить();				
		Стрр.ВидДок = ВидДокумента;
		стрр.Выбор = Истина;
		стрр.Дата = НачалоДня(ПолучитьДату(Стр.Дата));
		Стрр.НомерДок = Стр.НомерДок;
		Стрр.СуммаДок = Стр.СуммаДок;		
		// ALEXV: Добавляем колонку с наименованием контрагента
		
		Если ИмеетКонтрагента тогда
			Попытка
				Стрр.Контрагент = Стр.КНаименованиеИИКО;
				Стрр.КонтрагентКодАйко = Стр.ККодИИКО;
			Исключение
				Сообщить(ВидДокумента);
			КонецПопытки;
		КонецЕсли;	
		
		// ALEXV: Добавляем колонку с наименованием Организации
		Если (ВидДокумента = "Внутреннее Перемещение") Тогда
			Стрр.Организация = СокрЛП(Стр.ЮЛотправительнаименование);
			Стрр.СкладКодАйко = Стр.СкладКод;
		//ИначеЕсли ВидДокумента = "Акт оказания услуг" или ВидДокумента = "Акт приёма услуг" тогда
		//	 Стрр.Организация = СокрЛП(Стр.ЮЛнаименование);
		//	//ВидДокумента = "Акт Реализации";
		//	 Стрр.Документ = СокрЛП(Стр.НомерДок) + "!" + "Акт Реализации";//СокрЛП(ВидДокумента);
		//	 Продолжить;
		ИначеЕсли ВидДокумента = "Акт оказания услуг" Тогда
			 Стрр.Организация = СокрЛП(Стр.ЮЛнаименование);
			 Стрр.Документ = СокрЛП(Стр.НомерДок) + "!" + "Акт Реализации";
			 Продолжить;
		ИначеЕсли ВидДокумента = "Акт приёма услуг" Тогда
			 Стрр.Организация = СокрЛП(Стр.ЮЛнаименование);
			 Стрр.Документ = СокрЛП(Стр.НомерДок) + "!" + "Акт приёма услуг";
			 Продолжить;
 		ИначеЕсли ВидДокумента <>  "Прием кассовой выручки"  Тогда
			Стрр.Организация = СокрЛП(Стр.ЮЛнаименование);
			Стрр.СкладКодАйко = Стр.СкладКод;
		КонецЕсли;
		
		Если ВидДокумента <> "Акт оказания услуг" и ВидДокумента <> "Акт приёма услуг" и ВидДокумента <>  "Прием кассовой выручки" тогда
			Стрр.СкладКодАйко = Стр.СкладКод;
		КонецЕсли;
		
		//Если ВидДокумента = "Акт оказания услуг" тогда 
		//	ВидДокумента = "Акт Реализации";	
		//КонецЕсли;
		Стрр.Документ = СокрЛП(Стр.НомерДок) + "!" + СокрЛП(ВидДокумента);
	КонецЦикла;	
	
	Объект.Докум.Сортировать("Дата Возр,НомерДок Возр");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТЗ(Текст,НачИменаКолонок,УмныеИменаКолонок)
	
	Тззз = Новый ТаблицаЗначений;  
	Стр1 = Текст.ПрочитатьСтроку();
	Спис = ИзСтрокиВСпис(Стр1);
	
	Если не ЗначениеЗаполнено(Спис) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПравильныеКолонки = Новый Массив(Спис.Количество());
	
	Для ии = 0 по Спис.Количество()-1 цикл
		индекс = НачИменаКолонок.НайтиПоЗначению(Спис[ии]);
		Если индекс <>  неопределено Тогда
			ПравильныеКолонки[ии] =  СокрЛП(УмныеИменаКолонок[НачИменаКолонок.Индекс(индекс)]);
			Тззз.Колонки.Добавить(ПравильныеКолонки[ии]);		
		Иначе
			
		КонецЕсли;
	КонецЦикла;
	
	//Ткст = Текст.Прочитать();
	//
	//Для ии = 1 По СтрЧислоСтрок(Ткст) Цикл 
	//	Стр1 = СтрПолучитьСтроку(Ткст,ии);
	//	
	//	Если Стр1 = "" тогда
	//		продолжить;
	//	КонецЕсли;
	//	
	//	Стр2 = Тззз.Добавить();
	//	Спис1 = ИзСтрокиВСпис(Стр1);
	//	Для хх = 0 по ПравильныеКолонки.Количество()-1 цикл
	//		индекс = ПравильныеКолонки[хх];
	//		Если индекс <>  неопределено Тогда
	//			Если Спис1.Количество() > хх Тогда
	//				Стр2[индекс] = Спис1[хх];      
	//			Иначе
	//				Стр2[индекс] = "";
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;	
	//КонецЦикла;   
	
	// Данный фрагмент немного изменен в виду чрезвычайно
	// медленной работы функции СтрПолучитьСтроку()
	Стр1 = Текст.ПрочитатьСтроку();

	Пока Стр1 <> Неопределено Цикл
		
		Если Стр1 = "" тогда
			продолжить;
		КонецЕсли;
		
		Стр2 = Тззз.Добавить();
		Спис1 = ИзСтрокиВСпис(Стр1);
		Для хх = 0 по ПравильныеКолонки.Количество()-1 цикл
			индекс = ПравильныеКолонки[хх];
			Если индекс <>  неопределено Тогда
				Если Спис1.Количество() > хх Тогда
					Стр2[индекс] = Спис1[хх];      
				Иначе
					Стр2[индекс] = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		Стр1 = Текст.ПрочитатьСтроку();
	КонецЦикла;
		
	Возврат ПоместитьВоВременноеХранилище(Тззз, УИДФормы);
	
КонецФункции

&НаСервере
Процедура ОбновитьГруппировку()
	
	ЕстьНоменклатура = Ложь;
	ЕстьГруппировка = Ложь;
	Объект.Номенклатура.Очистить();
	Объект.Группировка.Очистить();
	ВсяНомеклатураАйко = ПолучитьИзВременногоХранилища(АдресНомАйко);
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);
	
	Для Каждого Стр из ВсяНомеклатураАйко Цикл
		
		катег = Объект.БухгалтерскаяКатегория.НайтиСтроки(Новый Структура("КатегорияАйкоКод", Стр.ГруппаУчетаКод));
		Если Катег.Количество() = 0 тогда 
			Сообщить("Категория товаров неопределена")
		КонецЕсли;
		
		Если катег[0].Аналитика = "Аналитика" Тогда
			ЕстьНоменклатура = Истина;
			н = Объект.Номенклатура.Добавить();
			н.НКодИИКО = Стр.НКодИИКО;
			н.ННаименованиеИИКО = Стр.ННаименованиеИИКО;
			н.Категория = Стр.ГруппаУчетаНазвание;
			ном = ТекущаяНастройка.СохраненнаяНастройка.Номенклатура.Найти(Стр.НКодИИКО, "КодАйко");
			
			Если ЗначениеЗаполнено(ном) тогда
				н.Номенклатура = ном.Значение;
				//Если ЗначениеЗаполнено(н[0].Номенклатура) и не н[0].Номенклатура.ЭтоГруппа Тогда
				//	Если Укр = 0 тогда
				//		н.Код1С = ТруКодН(н.Номенклатура.Код);
				//	Иначе
				//		н.Код1С = н.Номенклатура.Код;
				//	КонецЕсли;	
				//	н.Наименование1С = н.Номенклатура.Наименование;
			Иначе
				н.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
				//КонецЕсли;	
			КонецЕсли;
			
		Иначе              
			ЕстьГруппировка = Истина;
			
			Если катег[0].Аналитика = "НДС" Тогда
				ндс = СокрЛП(Стр.СтавкаНДС);
			Иначе
				ндс = СокрЛП(Стр.ГруппаУчетаНазвание) + "/" + СокрЛП(Стр.СтавкаНДС);
			КонецЕсли;
			
			Если (Объект.Группировка.НайтиСтроки(Новый Структура("СтавкаНДС", ндс)).Количество() = 0) или 
				(Объект.Группировка.НайтиСтроки(Новый Структура("Категория", Стр.ГруппаУчетаНазвание)).Количество() = 0) Тогда
				г = Объект.Группировка.Добавить();
				г.СтавкаНДС = ндс;
				г.Категория = Стр.ГруппаУчетаНазвание;
				г.НДС = СокрЛП(Стр.СтавкаНДС);
			КонецЕсли;	                      
			гр = ТекущаяНастройка.СохраненнаяНастройка.Группировка.НайтиСтроки(Новый Структура("КодАйко", ндс + "-" + СокрЛП(Стр.ГруппаУчетаНазвание)));
			Если гр.Количество() <> 0 и не ЗначениеЗаполнено(г.Номенклатура) тогда
				г.Номенклатура = гр[0].Значение;
				//Сообщить(ндс + "-" + СокрЛП(Стр.ГруппаУчетаНазвание) + ": " + гр.Код1С + ", " + г.Номенклатура.Код);
				Если г.Номенклатура.ЭтоГруппа тогда
					г.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	//ТЗНом = ВсяНомеклатураАйко.Скопировать();
	//ТЗНом.Свернуть("НКодИИКО,ННаименованиеИИКО");
	//Номенклатура.Загрузить(ВсяНомеклатураАйко);
	
	АдресНомАйко = ПоместитьВоВременноеХранилище(ВсяНомеклатураАйко, УИДФормы);
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);
	Элементы.ГруппаНоменклатура.Видимость = ЕстьНоменклатура;
	Элементы.ГруппаГруппировка.Видимость = ЕстьГруппировка;
	
КонецПроцедуры

&НаСервере
Функция НайтиНоменклатуру(Код, Ставка, ГруппаУчета)
	
	категория = Объект.БухгалтерскаяКатегория.НайтиСтроки(Новый структура ("КатегорияАйко", ГруппаУчета));
	
	Если категория.количество() = 0 Тогда
		Сообщить("Не найдена категория " + ГруппаУчета + " для номенклатуры: " + Код + ", загрузка невозможна!", СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;
	
	Если категория[0].Аналитика = "Аналитика" Тогда
		ном = Объект.Номенклатура.НайтиСтроки(Новый структура("НКодИИКО", Код));
	ИначеЕсли категория[0].Аналитика = "НДС" Тогда
		ном = Объект.Группировка.НайтиСтроки(Новый Структура ("СтавкаНДС", СокрлП(Ставка)));
	Иначе	
		ном = Объект.Группировка.НайтиСтроки(Новый Структура ("СтавкаНДС", СокрлП(ГруппаУчета) + "/" + СокрлП(Ставка)));
	КонецЕсли;
	
	Если ном.Количество() = 0  Тогда
		Сообщить("Не найдена номенклатура " + Код + ", ндс: " + Ставка + ", категория: " + ГруппаУчета + ", загрузка невозможна!", СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ном[0];
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНоменклатуру(тззз, продажи)
	
	ВсяНоменклатураАйко = ПолучитьИзВременногоХранилища(АдресНомАйко);	
	
	для Каждого нн из тззз Цикл
		Если продажи тогда
			СтавкаНДС = нн.СтавкаНДСспродаж;
		Иначе
			СтавкаНДС = нн.СтавкаНДС;
		КонецЕсли;
		Если ВсяНомеклатураАйко.Найти(нн.НКодИИКО + "-" + СтавкаНДС,"Ключ") = неопределено Тогда
			Если не ЗначениеЗаполнено(нн.ГруппаУчетаКод) Тогда
				Сообщить("Для товара " + "'" + нн.ННаименованиеИИКО + "'" + " в IIKO не задана группа учета! Данная позиция не будет загружена!");
				продолжить;
			КонецЕсли;
			ххх = ВсяНомеклатураАйко.Добавить();
			ххх.Ключ = нн.НКодИИКО + "-" + СтавкаНДС;
			ххх.НКодИИКО = нн.НКодИИКО;
			ххх.ННаименованиеИИКО = нн.ННаименованиеИИКО;
			ххх.СтавкаНДС = СтавкаНДС;
			ххх.ГруппаУчетаКод = нн.ГруппаУчетаКод;
			ххх.ГруппаУчетаНазвание = нн.ГруппаУчетаНазвание;
			ххх.ЕдиницаИзмерения = нн.Единицаизмеренияназвание;
		КонецЕсли;
	КонецЦикла; 
	
	
	
	АдресНомАйко = ПоместитьВоВременноеХранилище(ВсяНоменклатураАйко, УИДФормы);
	
КонецПроцедуры

&НаСервере
Процедура ФильтрПоЮрЛицам(ТабЗнач, юл)
	
	кво = ТабЗнач.Количество()-1;
	
	Для ии = 0 по кво цикл
		Если СокрЛП(ТабЗнач[ии].ЮЛнаименование) <>  юл тогда
			ТабЗнач.Удалить(ии);
			ии = ии-1;
			кво = ТабЗнач.Количество()-1;
		КонецЕсли;		
		Если ии = кво Тогда Возврат;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры 

&НаСервере
Процедура ФильтрПоЮрЛицамПеремещение(ТабЗнач, юл)
	
	кво = ТабЗнач.Количество()-1;
	
	Для ии = 0 по кво цикл
		Если СокрЛП(ТабЗнач[ии].ЮЛотправительнаименование) <>  юл тогда
			ТабЗнач.Удалить(ии);
			ии = ии-1;
			кво = ТабЗнач.Количество()-1;
		КонецЕсли;		
		Если ии = кво Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИменаКолонок()
	// Приходная накладная
	НачИменаКолонок.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Вход. номер;Вход. дата;Поставщик (ИНН);Поставщик (код);Поставщик (наименование);Сотрудник (код);Сотрудник (наименование);Склад(код);Склад (наименование);Счет-фактура;Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена с НДС;Сумма с НДС;Сумма НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название);Номер таможенной декларации;Концепция (название);Концепция (код);Комментарий"));
	УмныеИменаКолонок.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;Входномер;Входдата;КИННИИКО;ККодИИКО;КНаименованиеИИКО;Сотрудниккод;Сотрудникнаименование;СкладКод;СкладНаименование;СчетФактура;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Колво;ЦенасНДС;СуммасНДС;СуммаНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Типноменклатурыкод;Типноменклатурыназвание;Единицаизмерениякод;Единицаизмеренияназвание;НомерГТД;КонцепцияНазвание;КонцепцияКод;Комментарий"));
	
	// Акт реализации
	//НачИменаКолонок1.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад(код);Склад (наименование);Операция;Операция (название);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена продажи с НДС;Сумма продажи с НДС;Сумма НДС с продаж;Ставка НДС с продаж;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Тип списания;Тип списания (название);Движение денежных средств (код);Движение денежных средств;Статья расходов(код);Статья расходов;Тип номенклатуры (код);Тип номенклатуры (название);Целевое блюдо (код);Целевое блюдо (название);Единица измерения (код);Единица измерения (название);Проданное блюдо (код);Проданное блюдо (название)"));
	//УмныеИменаКолонок1 = ИзСтрокиВСпис("Дата;НомерДок;Складкод;СкладНаименование;Операция;Операцияназвание;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;ЦенапродажисНДС;СуммапродажисНДС;СуммаНДСспродаж;СтавкаНДСспродаж;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;ТипСписания;ТипСписанияНазвание;Движениеденежныхсредствкод;Движениеденежныхсредств;Статьярасходовкод;Статьярасходов;Типноменклатурыкод;Типноменклатурыназвание;Целевоеблюдокод;Целевоеблюдоназвание;Единицаизмерениякод;Единицаизмеренияназвание;ПроданноеБлюдоКод;ПроданноеБлюдоНазвание");	
	НачИменаКолонок1.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад(код);Склад (наименование);Операция;Операция (название);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена продажи с НДС;Сумма продажи с НДС;Сумма НДС с продаж;Ставка НДС с продаж;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Тип списания;Тип списания (название);Движение денежных средств (код);Движение денежных средств;Проданное блюдо (код);Проданное блюдо (название);Единица измерения (название);Концепция (название);Концепция (код);Номер кассы;Номер смены;Комментарий"));
	УмныеИменаКолонок1.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;Складкод;СкладНаименование;Операция;Операцияназвание;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;ЦенапродажисНДС;СуммапродажисНДС;СуммаНДСспродаж;СтавкаНДСспродаж;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;ТипСписания;ТипСписанияНазвание;Движениеденежныхсредствкод;Движениеденежныхсредств;ПроданноеБлюдоКод;ПроданноеБлюдоНазвание;Единицаизмеренияназвание;КонцепцияНазвание;КонцепцияКод;НомерКассы;НомерСмены;Комментарий"));	
	
	// Внутренне перемещение
	//НачИменаКолонок2 = Новый СписокЗначений;
	НачИменаКолонок2.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Торговое предприятие отправитель (код);Торговое предприятие отправитель (наименование);ЮЛ отправитель (ИНН);ЮЛ отправитель (наименование);Склад отправитель (код);Склад отправитель (наименование);Торговое предприятие получатель(код);Торговое предприятие получатель (наименование);ЮЛ получатель (ИНН);ЮЛ получатель (наименование);Склад получатель (код);Склад получатель (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название);Концепция (название);Концепция (код);Комментарий"));
	УмныеИменаКолонок2.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;Торговоепредприятиеотправителькод;Торговоепредприятиеотправительнаименование;ЮЛотправительИНН;ЮЛотправительнаименование;Складотправителькод;Складотправительнаименование;Торговоепредприятиеполучателькод;Торговоепредприятиеполучательнаименование;ЮЛполучательИНН;ЮЛполучательнаименование;Складполучателькод;Складполучательнаименование;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Типноменклатурыкод;Типноменклатурыназвание;Единицаизмерениякод;Единицаизмеренияназвание;КонцепцияНазвание;КонцепцияКод;Комментарий"));	
	
	// Акт приготовления / Акт переработки
	НачИменаКолонок3.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад списания(код);Склад списания (наименование);Склад прихода(код);Склад прихода (наименование);Знак операции;Знак операции (название);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Целевое блюдо (код);Целевое блюдо (название);Единица измерения (код);Единица измерения (название);Концепция (название);Концепция (код);Комментарий"));
	УмныеИменаКолонок3.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;Складсписаниякод;Складсписаниянаименование;Складприходакод;Складприходанаименование;Знакоперации;Знакоперацииназвание;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Типноменклатурыкод;Типноменклатурыназвание;Целевоеблюдокод;Целевоеблюдоназвание;Единицаизмерениякод;Единицаизмеренияназвание;КонцепцияНазвание;КонцепцияКод;Комментарий"));	
	
	//Прием кассовой выручки
	НачИменаКолонок4.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Сумма;Вид оплаты(код);Вид оплаты(наименование);Номер карты;Номер кассы;Рег. номер ККМ;Номер смены;Покупатель(ИНН);Покупатель (наименование);Фамилия;Имя;Отчество;Дата рождения;Концепция (название);Концепция (код);Комментарий"));
	УмныеИменаКолонок4.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Сумма;Видоплатыкод;Видоплатынаименование;Номеркарты;Номеркассы;РегномерККМ;Номерсмены;ПокупательИНН;Покупательнаименование;Фамилия;Имя;Отчество;Датарождения;КонцепцияНазвание;КонцепцияКод;Комментарий"));	
	
	// Акт списания
	//НачИменаКолонок6 = Новый СписокЗначений;
	НачИменаКолонок6.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад (код);Склад (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Статья расходов;Статья расходов(код);Тип списания;Тип списания (название);Операция;Операция (название);Тип номенклатуры (код);Тип номенклатуры (название);Целевое блюдо (код);Целевое блюдо (название);Единица измерения (код);Единица измерения (название);Проданное блюдо (код);Проданное блюдо (название);Концепция (название);Концепция (код);Комментарий"));
	УмныеИменаКолонок6.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;Складкод;Складнаименование;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Статьярасходов;Статьярасходовкод;Типсписания;Типсписанияназвание;Операция;Операцияназвание;Типноменклатурыкод;Типноменклатурыназвание;Целевоеблюдокод;Целевоеблюдоназвание;Единицаизмерениякод;Единицаизмеренияназвание;ПроданноеБлюдоКод;ПроданноеБлюдоНазвание;КонцепцияНазвание;КонцепцияКод;Комментарий"));	
	
	// Инвентаризация
	//НачИменаКолонок7 = Новый СписокЗначений;
	
	// Дата;Номер;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Склад (код);Склад (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Счет недостачи (код);Счет недостачи (наименование);Счет излишков (код);Счет излишков (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название)
	// "Себестоимость за ед. без НДС" переименован в "Себестоимость за ед.", добавим обе колонки        4                        5                6             7           8                      9                10                         11                           12             13          14                  15           16           17                  18                           19                   20                              21                     22                           23                     24                          25                               26                       27                           28               29
	НачИменаКолонок7.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Склад (код);Склад (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Себестоимость за ед.;Себестоимость;Ставка НДС;Счет недостачи (код);Счет недостачи (наименование);Счет излишков (код);Счет излишков (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название);Излишки/Недостача (количество);Излишки/Недостача (сумма);Себестоимость за ед. без НДС;Себестоимость без НДС;Комментарий"));
	УмныеИменаКолонок7.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Складкод;Складнаименование;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Счетнедостачикод;Счетнедостачинаименование;Счетизлишковкод;Счетизлишковнаименование;Типноменклатурыкод;Типноменклатурыназвание;Единицаизмерениякод;Единицаизмеренияназвание;ИзлишкиНедостачаКоличество;ИзлишкиНедостачаСумма;СебестоимостьбезНДС;СебестоимостьзаедбезНДС;Комментарий"));	
	//5                                                           10                                                                                         15                                                                                           20                                                                                     24
	// Расходная накладная
	//НачИменаКолонок8 = Новый СписокЗначений;
	НачИменаКолонок8.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад (код);Склад (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена продажи с НДС;Сумма продажи с НДС;Сумма НДС с продаж;Ставка НДС с продаж;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Операция;Операция (название);Тип списания;Тип списания (название);Движение денежных средств (код);Движение денежных средств;Статья расходов(код);Статья расходов;Покупатель (ИНН);Покупатель (код);Покупатель (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Целевое блюдо (код);Целевое блюдо (название);Единица измерения (код);Единица измерения (название);Концепция (название);Концепция (код);Комментарий"));
	УмныеИменаКолонок8.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;Складкод;Складнаименование;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;ЦенапродажисНДС;СуммапродажисНДС;СуммаНДСспродаж;СтавкаНДСспродаж;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Операция;Операцияназвание;Типсписания;Типсписанияназвание;Движениеденежныхсредствкод;Движениеденежныхсредств;Статьярасходовкод;Статьярасходов;КИННИИКО;ККодИИКО;КНаименованиеИИКО;Типноменклатурыкод;Типноменклатурыназвание;Целевоеблюдокод;Целевоеблюдоназвание;Единицаизмерениякод;Единицаизмеренияназвание;КонцепцияНазвание;КонцепцияКод;Комментарий"));	
	
	// Возвратная накладная
	//НачИменаКолонок9 = Новый СписокЗначений;
	НачИменаКолонок9.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад (код);Склад (наименование);Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена продажи с НДС;Сумма продажи с НДС;Сумма НДС с продаж;Ставка НДС с продаж;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Движение денежных средств (код);Движение денежных средств;Статья расходов(код);Статья расходов;Покупатель (ИНН);Покупатель (код);Покупатель (наименование);Приходная накладная (дата);Приходная накладная (номер);Счет-фактура;Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название);Концепция (название);Концепция (код);Комментарий"));
	УмныеИменаКолонок9.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;Складкод;Складнаименование;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;ЦенапродажисНДС;СуммапродажисНДС;СуммаНДСспродаж;СтавкаНДСспродаж;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Движениеденежныхсредствкод;Движениеденежныхсредств;Статьярасходовкод;Статьярасходов;КИННИИКО;ККодИИКО;КНаименованиеИИКО;Приходнаянакладнаядата;Приходнаянакладнаяномер;Счетфактура;Типноменклатурыкод;Типноменклатурыназвание;Единицаизмерениякод;Единицаизмеренияназвание;КонцепцияНазвание;КонцепцияКод;Комментарий"));
	
	//Акт оказания услуг
	НачИменаКолонок10.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Вход. номер;Вход. дата;Движение денежных средств(код);Движение денежных средств;Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена с НДС;Сумма с НДС;Сумма НДС;Ставка НДС с продаж;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Покупатель (ИНН);Покупатель (код);Покупатель (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название);Номер кассы;Номер смены;Концепция (название);Концепция (код);Комментарий"));
	УмныеИменаКолонок10.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;Входномер;Входдата;Движениеденежныхсредствкод;ДвижениеДенежныхСредств;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;ЦенаСНДС;СуммаПродажиСНДС;СуммаНДС;СтавкаНДССПродаж;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;КИННИИКО;ККодИИКО;КНаименованиеИИКО;Типноменклатурыкод;Типноменклатурыназвание;Единицаизмерениякод;Единицаизмеренияназвание;НомерКассы;НомерСмены;КонцепцияНазвание;КонцепцияКод;Комментарий"));
	
	//Акт приема услуг
	НачИменаКолонок11.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Вход. номер;Вход. дата;Поставщик (ИНН);Поставщик (код);Поставщик (наименование);Сотрудник (код);Сотрудник (наименование);Движение денежных средств(код);Движение денежных средств;Счет-фактура;Номенклатура (код);Номенклатура (наименование);Группа учета (название);Группа учета (код);Количество;Цена с НДС;Сумма с НДС;Сумма НДС;Ставка НДС;Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название);Концепция (название);Концепция (код);Комментарий"));
	УмныеИменаКолонок11.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;Входномер;Входдата;КИННИИКО;ККодИИКО;КНаименованиеИИКО;Сотрудниккод;Сотрудникнаименование;Движениеденежныхсредствкод;ДвижениеДенежныхСредств;СчетФактура;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Колво;ЦенасНДС;СуммасНДС;СуммаНДС;СтавкаНДС;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Типноменклатурыкод;Типноменклатурыназвание;Единицаизмерениякод;Единицаизмеренияназвание;КонцепцияНазвание;КонцепцияКод;Комментарий"));
	
	// Акт разбора
	НачИменаКолонок12.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;Номер;Склад (код);Склад (наименование);Операция;Операция (название);Номенклатура (код);Наименование;Группа учета (название);Группа учета (код);Количество;Себестоимость за ед. без НДС;Себестоимость без НДС;Ставка НДС;Тип номенклатуры (код);Тип номенклатуры (название);Торговое предприятие(код);Торговое предприятие (наименование);ЮЛ (ИНН);ЮЛ (наименование);Тип номенклатуры (код);Тип номенклатуры (название);Единица измерения (код);Единица измерения (название);Тара (код);Тара (название);Концепция (название);Концепция (код);Процент себестоимости;Комментарий"));
	УмныеИменаКолонок12.ЗагрузитьЗначения(ИзСтрокиВСпис("Дата;НомерДок;СкладКод;СкладНаименование;Операция;Операцияназвание;НКодИИКО;ННаименованиеИИКО;Группаучетаназвание;Группаучетакод;Количество;СебестоимостьзаедбезНДС;СебестоимостьбезНДС;СтавкаНДС;ТипНомерклатурыКод;ТипНомерклатурыНазвание;Торговоепредприятиекод;Торговоепредприятиенаименование;ЮЛИНН;ЮЛнаименование;Типноменклатурыкод;Типноменклатурыназвание;Единицаизмерениякод;Единицаизмеренияназвание;ТараКод;ТараНазвание;КонцепцияНазвание;КонцепцияКод;ПроцентСебестоимости;Комментарий"));	
	

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДокументыИзФайлов()
	
	соединение = СтрокаСоединенияИнформационнойБазы();
	КаталогБазы = Прав(соединение,СтрДлина(СтрокаСоединенияИнформационнойБазы())-6);
	КаталогБазы = Лев(КаталогБазы,СтрДлина(КаталогБазы)-2);
	
	//ЗагрузитьЕденицыИзмеренийИзДбф();
	
	ОшибкаФайла = Ложь;
	
	Если ПН  тогда
		ФС = Новый Файл(Каталог1с + "\Приходная накладная.csv");
			
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл приходных накладных " + Каталог1с + "\Приходная накладная.csv не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
			//Продолжить;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда 
			Текст = Новый ЧтениеТекста(Каталог1с + "\Приходная накладная.csv",КодировкаТекста.ANSI);
			АдресПН = ПолучитьТЗ(Текст,НачИменаКолонок,УмныеИменаКолонок);
		Иначе
			АдресПН = неопределено
		КонецЕсли;
	КонецЕсли;	
	
	ОшибкаФайла = Ложь;	
	Если АР  тогда
		ФС = Новый Файл(Каталог1с + "\Акт реализации.csv");
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл актов реализации " + Каталог1с + "\Акт реализации.csv не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда 
			Текст1 = Новый ЧтениеТекста(Каталог1с + "\Акт реализации.csv",КодировкаТекста.ANSI);
			АдресАР = ПолучитьТЗ(Текст1,НачИменаКолонок1,УмныеИменаКолонок1);
			Тз1 = ПолучитьИзВременногоХранилища(АдресАР);
			
			Если Тз1.Колонки.Найти("ПроданноеБлюдоКод") <>  неопределено Тогда
				ВерсияАйко = 2;
				АдресВерсииАйко = ПоместитьВоВременноеХранилище(ВерсияАйко, УИДФормы);
			КонецЕсли;
			
			АдресАР = ПоместитьВоВременноеХранилище(Тз1, УИДФормы)
		Иначе 
			АдресАР = неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаФайла = Ложь;
	Если ВП  тогда
		ФС = Новый Файл(Каталог1с + "\Внутреннее перемещение.csv");
		
		Если НЕ Фс.Существует() Тогда			
			Сообщить("Файл внутренних перемещений " + Каталог1с + "\Внутреннее перемещение.csv не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина; 			
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда
			Текст2 = Новый ЧтениеТекста(Каталог1с + "\Внутреннее перемещение.csv",КодировкаТекста.ANSI);
			АдресВП = ПолучитьТЗ(Текст2,НачИменаКолонок2,УмныеИменаКолонок2);
			
		иначе 
			АдресВП = неопределено;
		КонецЕсли;
	КонецЕсли;
	/////////////
	ОшибкаФайла = Ложь;
	Если АП  тогда
		ФС = Новый Файл(Каталог1с + "\Акт приготовления.csv");
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл актов приготовлений " + Каталог1с + "\Акт приготовления.csv не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда
			Текст3 = Новый ЧтениеТекста(Каталог1с + "\Акт приготовления.csv",КодировкаТекста.ANSI);
			АдресАП = ПолучитьТЗ(Текст3,НачИменаКолонок3,УмныеИменаКолонок3);
			тз3 = ПолучитьИзВременногоХранилища(АдресАП);		
			АдресАП = ПоместитьВоВременноеХранилище(тз3, УИДФормы);
		Иначе 
			АдресАп = неопределено;
		КонецЕсли;
	КонецЕсли;
	
	
	ОшибкаФайла = Ложь;
	
	Если АПЕР  тогда
		ФС = Новый Файл(Каталог1с + "\Акт переработки.csv");
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл актов переработки " + Каталог1с + "\Акт переработки.csv не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда 
			Текст5 = Новый ЧтениеТекста(Каталог1с + "\Акт переработки.csv",КодировкаТекста.ANSI);
			АдресАПЕР = ПолучитьТЗ(Текст5,НачИменаКолонок3,УмныеИменаКолонок3);		
			Тз5 = ПолучитьИзВременногоХранилища(АдресАПЕР);		
			АдресАПЕР = ПоместитьВоВременноеХранилище(Тз5, УИДФормы)
		Иначе 
			АдресАпер = неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаФайла = Ложь;
	
	Если АС тогда		
		ФС = Новый Файл(Каталог1с + "\Акт списания.csv");
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл актов списаний " + Каталог1с + "\Акт списания.csv не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли; 
		
		Если ОшибкаФайла =  Ложь тогда 
			Текст6 = Новый ЧтениеТекста(Каталог1с + "\Акт списания.csv",КодировкаТекста.ANSI);
			АдресАС = ПолучитьТЗ(Текст6,НачИменаКолонок6,УмныеИменаКолонок6);
			
			Если АдресАС = Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		Иначе 
			АдресАС = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	
	ОшибкаФайла = Ложь;	
	
	Если Рн тогда		
		ФС = Новый Файл(Каталог1с + "\Расходная накладная.csv");
		
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл Расходных накладных " + Каталог1с + "\Расходная накладная.csv не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли; 
		
		Если ОшибкаФайла = Ложь тогда 
			Текст8 = Новый ЧтениеТекста(Каталог1с + "\Расходная накладная.csv",КодировкаТекста.ANSI);
			АдресРН = ПолучитьТЗ(Текст8,НачИменаКолонок8,УмныеИменаКолонок8);
		Иначе 
			АдресРН = неопределено;
		КонецЕсли;
	КонецЕсли;	
	
	ОшибкаФайла = Ложь;
	Если АР и (БезналичныеОплаты = "ИзПриемаКассовойВыручки") тогда 		
		ФС = Новый Файл(Каталог1с + "\Прием кассовой выручки.csv");
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл ПКВ " + Каталог1с + "\Прием кассовой выручки.csv не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда 
			Текст4 = Новый ЧтениеТекста(Каталог1с + "\Прием кассовой выручки.csv",КодировкаТекста.ANSI);
			АдресАРиБезнал = ПолучитьТЗ(Текст4,НачИменаКолонок4,УмныеИменаКолонок4);
		Иначе АдресАРиБезнал = Неопределено;
		КонецЕсли;
	КонецЕсли;	
	
	ОшибкаФайла = Ложь;
	Если ВН  тогда		
		ФС = Новый Файл(Каталог1с + "\Возвратная накладная.csv");
		
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл возвратных накладных " + Каталог1с + "\Возвратная накладная.csv не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;; 			
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда 
			Текст9 = Новый ЧтениеТекста(Каталог1с + "\Возвратная накладная.csv",КодировкаТекста.ANSI);
			АдресВН = ПолучитьТЗ(Текст9,НачИменаКолонок9,УмныеИменаКолонок9);
		Иначе
			АдресВН =  неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаФайла = Ложь;	
	Если ИН тогда 		
		ФС = Новый Файл(Каталог1с + "\Инвентаризация.csv");
		
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл возвратных накладных " + Каталог1с + "\Инвентаризация.csv не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли; 
		Если ОшибкаФайла = Ложь тогда 
			Текст7 = Новый ЧтениеТекста(Каталог1с + "\Инвентаризация.csv",КодировкаТекста.ANSI);
			АдресИН = ПолучитьТЗ(Текст7,НачИменаКолонок7,УмныеИменаКолонок7);
		Иначе 
			АдресИН  = неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаФайла = Ложь;
	Если АУ тогда 
		 ФС = Новый Файл(Каталог1с + "\Акты оказания услуг.csv");
		 
		 Если не ФС.Существует() тогда 
			 Сообщить("Файл оказания услуг" + Каталог1С + " не найден!!!", СтатусСообщения.Важное);
			 ОшибкаФайла = истина;
		 КОнецЕсли;
		 
		 Если не ОшибкаФайла тогда 
			Текст10 = Новый ЧтениеТекста(Каталог1С + "\Акты оказания услуг.csv",КодировкаТекста.ANSI);
			АдресАУ = ПолучитьТЗ(Текст10, НачИменаКолонок10, УмныеИменаКолонок10);
		Иначе
			АдресАУ = неопределено;
		КонецЕсли;
	КонецЕсли;
	
	 ОшибкаФайла = Ложь;
	 Если АПУ тогда 
		 
		 ФС = Новый Файл(Каталог1с + "\Акты приёма услуг.csv");
		 
		 Если не ФС.Существует() тогда
			 ФС2 = Новый Файл(Каталог1с + "\Акты приема услуг.csv");
			 Если ФС2.Существует()тогда
				 Текст11 = Новый ЧтениеТекста(Каталог1С + "\Акты приема услуг.csv",КодировкаТекста.ANSI);
				 АдресАПУ = ПолучитьТЗ(Текст11, НачИменаКолонок11, УмныеИменаКолонок11);
			 Иначе
				 Сообщить("Файл приема услуг" + Каталог1С + " не найден!!!", СтатусСообщения.Важное);
				 ОшибкаФайла = истина;
				 АдресАПУ = неопределено;				 
			 КонецЕсли;			 
		 Иначе	 
			 Текст11 = Новый ЧтениеТекста(Каталог1С + "\Акты приёма услуг.csv",КодировкаТекста.ANSI);
			 АдресАПУ = ПолучитьТЗ(Текст11, НачИменаКолонок11, УмныеИменаКолонок11);			 
		 КОнецЕсли;
		 
	КонецЕсли;

	 ОшибкаФайла = Ложь;
	Если Араз  тогда
		ФС = Новый Файл(Каталог1с + "\Акт разбора.csv");
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл акта разбора " + Каталог1с + "\Акт разбора.csv не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда
			Текст12 = Новый ЧтениеТекста(Каталог1с + "\Акт разбора.csv",КодировкаТекста.ANSI);
			АдресАРаз = ПолучитьТЗ(Текст12,НачИменаКолонок12,УмныеИменаКолонок12);
		Иначе 
			АдресАРаз = неопределено;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

// +[Лемма:ТС] Обработка временных файлов при клиент-серверном режиме работы
&НаКлиенте
Функция ПолучитьМассивВыделенных()
	МассивВыделенных = Новый Массив;
	Если ПН Тогда МассивВыделенных.Добавить("Приходная накладная");		КонецЕсли;
	Если АР Тогда МассивВыделенных.Добавить("Акт реализации"); 			КонецЕсли;
	Если ВП Тогда МассивВыделенных.Добавить("Внутреннее перемещение");	КонецЕсли;
	Если АП Тогда МассивВыделенных.Добавить("Акт приготовления");		КонецЕсли;
	Если АПЕР Тогда МассивВыделенных.Добавить("Акт переработки");		КонецЕсли;
	Если АС Тогда МассивВыделенных.Добавить("Акт списания");			КонецЕсли;
	Если Рн Тогда МассивВыделенных.Добавить("Расходная накладная");		КонецЕсли;
	Если АР и (БезналичныеОплаты = "ИзПриемаКассовойВыручки") Тогда МассивВыделенных.Добавить("Прием кассовой выручки"); КонецЕсли;
	Если ВН Тогда МассивВыделенных.Добавить("Возвратная накладная");	КонецЕсли;
	Если ИН Тогда МассивВыделенных.Добавить("Инвентаризация");			КонецЕсли;
	Если АУ Тогда МассивВыделенных.Добавить("Акты оказания услуг");		КонецЕсли;
	Если АПУ Тогда МассивВыделенных.Добавить("Акты приема услуг");		КонецЕсли;
	Если Араз Тогда	МассивВыделенных.Добавить("Акт разбора");			КонецЕсли;
	Возврат МассивВыделенных;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСКлиентаНаСервер();
	// возвращает массив значений типа Файл
    МассивВыделенныхИмен = ПолучитьМассивВыделенных();
	Для Каждого Имя Из МассивВыделенныхИмен Цикл
		//Создаем оповещение, именно процедура "ОбработатьВыборФайла" будет вызвана после окнчания помещения
		Оповещение = Новый ОписаниеОповещения("ФайлНаСервере", ЭтотОбъект, Имя);
		ИмяФайла = Каталог1с+"\"+Имя+".csv";
		ФС = Новый Файл(ИмяФайла);
		Если ФС.Существует() Тогда
			НачатьПомещениеФайла(Оповещение, , ИмяФайла, Ложь, УникальныйИдентификатор);
		Иначе
			Если Имя = "Акты приема услуг" Тогда
				ИмяФайла = Каталог1с+"\Акты приёма услуг.csv"; // Ё
				ФСЁ	= Новый Файл(ИмяФайла); 
				Если ФСЁ.Существует() Тогда
					НачатьПомещениеФайла(Оповещение, , ИмяФайла, Ложь, УникальныйИдентификатор);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	ЗагрузитьДокументыИзВременныхФайлов();
КонецПроцедуры

&НаСервере
Процедура ФайлНаСервере(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры)
	Если ЭтоАдресВременногоХранилища(Адрес) Тогда
		Хранилище = Новый ХранилищеЗначения( ПолучитьИзВременногоХранилища(Адрес) );
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ДанныеФайла = Хранилище.Получить();
		ДанныеФайла.Записать(ИмяВременногоФайла);
		Стр = СоответствиеФайлов.Добавить();
    	Стр.ИмяФайла = ДополнительныеПараметры;
    	Стр.ИмяВрФайла = ИмяВременногоФайла;
	Иначе
		Сообщить("Неверный адрес временного хранилища");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПутьВрФайлаПоИмени(ИмяФайла)
	Отбор = Новый Структура;
    Отбор.Вставить("ИмяФайла", ИмяФайла);
	НайденныеСтроки = СоответствиеФайлов.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество()>0 Тогда
		Результат = НайденныеСтроки[0].ИмяВрФайла;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗагрузитьДокументыИзВременныхФайлов()
	
	соединение = СтрокаСоединенияИнформационнойБазы();
	КаталогБазы = Прав(соединение,СтрДлина(СтрокаСоединенияИнформационнойБазы())-6);
	КаталогБазы = Лев(КаталогБазы,СтрДлина(КаталогБазы)-2);
	
	//ЗагрузитьЕденицыИзмеренийИзДбф();
	
	ОшибкаФайла = Ложь;
	
	Если ПН  тогда 	
		ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Приходная накладная");
		ФС = Новый Файл(ФайлПутьНаСервере);
			
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл приходных накладных " + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
			//Продолжить;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда 
			Текст = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресПН = ПолучитьТЗ(Текст,НачИменаКолонок,УмныеИменаКолонок);
			Текст.Закрыть();
		Иначе
			АдресПН = неопределено
		КонецЕсли;
	КонецЕсли;	
	
	ОшибкаФайла = Ложь;	
	Если АР  тогда
		ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Акт реализации");
		ФС = Новый Файл(ФайлПутьНаСервере);
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл актов реализации " + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда 
			Текст1 = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресАР = ПолучитьТЗ(Текст1,НачИменаКолонок1,УмныеИменаКолонок1);
			Текст1.Закрыть();
			Тз1 = ПолучитьИзВременногоХранилища(АдресАР);
			
			Если Тз1.Колонки.Найти("ПроданноеБлюдоКод") <>  неопределено Тогда
				ВерсияАйко = 2;
				АдресВерсииАйко = ПоместитьВоВременноеХранилище(ВерсияАйко, УИДФормы);
			КонецЕсли;
			
			АдресАР = ПоместитьВоВременноеХранилище(Тз1, УИДФормы)
		Иначе 
			АдресАР = неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаФайла = Ложь;
	Если ВП  тогда
		ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Внутреннее перемещение");
		ФС = Новый Файл(ФайлПутьНаСервере);
		
		Если НЕ Фс.Существует() Тогда			
			Сообщить("Файл внутренних перемещений " + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина; 			
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда
			Текст2 = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресВП = ПолучитьТЗ(Текст2,НачИменаКолонок2,УмныеИменаКолонок2);
			Текст2.Закрыть();
		иначе 
			АдресВП = неопределено;
		КонецЕсли;
	КонецЕсли;
	/////////////
	ОшибкаФайла = Ложь;
	Если АП  тогда
		ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Акт приготовления");
		ФС = Новый Файл(ФайлПутьНаСервере);
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл актов приготовлений " + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда
			Текст3 = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресАП = ПолучитьТЗ(Текст3,НачИменаКолонок3,УмныеИменаКолонок3);
			Текст3.Закрыть();
			тз3 = ПолучитьИзВременногоХранилища(АдресАП);		
			АдресАП = ПоместитьВоВременноеХранилище(тз3, УИДФормы);
		Иначе 
			АдресАп = неопределено;
		КонецЕсли;
	КонецЕсли;
	
	
	ОшибкаФайла = Ложь;
	
	Если АПЕР  тогда
		ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Акт переработки");
		ФС = Новый Файл(ФайлПутьНаСервере);
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл актов переработки " + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда 
			Текст5 = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресАПЕР = ПолучитьТЗ(Текст5,НачИменаКолонок3,УмныеИменаКолонок3);
			Текст5.Закрыть();
			Тз5 = ПолучитьИзВременногоХранилища(АдресАПЕР);		
			АдресАПЕР = ПоместитьВоВременноеХранилище(Тз5, УИДФормы)
		Иначе 
			АдресАпер = неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаФайла = Ложь;
	
	Если АС тогда		
		ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Акт списания");
		ФС = Новый Файл(ФайлПутьНаСервере);
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл актов списаний " + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли; 
		
		Если ОшибкаФайла =  Ложь тогда 
			Текст6 = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресАС = ПолучитьТЗ(Текст6,НачИменаКолонок6,УмныеИменаКолонок6);
			Текст6.Закрыть();
			Если АдресАС = Ложь Тогда
				Сообщить("Выбранный файл пуст!!!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		Иначе 
			АдресАС = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	
	ОшибкаФайла = Ложь;	
	
	Если Рн тогда		
		ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Расходная накладная");
		ФС = Новый Файл(ФайлПутьНаСервере);
		
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл Расходных накладных " + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли; 
		
		Если ОшибкаФайла = Ложь тогда 
			Текст8 = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресРН = ПолучитьТЗ(Текст8,НачИменаКолонок8,УмныеИменаКолонок8);
			Текст8.Закрыть();
		Иначе 
			АдресРН = неопределено;
		КонецЕсли;
	КонецЕсли;	
	
	ОшибкаФайла = Ложь;
	Если АР и (БезналичныеОплаты = "ИзПриемаКассовойВыручки") тогда 
		ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Прием кассовой выручки");
		ФС = Новый Файл(ФайлПутьНаСервере);
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл ПКВ " + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда 
			Текст4 = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресАРиБезнал = ПолучитьТЗ(Текст4,НачИменаКолонок4,УмныеИменаКолонок4);
			Текст4.Закрыть();
		Иначе АдресАРиБезнал = Неопределено;
		КонецЕсли;
	КонецЕсли;	
	
	ОшибкаФайла = Ложь;
	Если ВН  тогда	
		ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Возвратная накладная");
		ФС = Новый Файл(ФайлПутьНаСервере);
		
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл возвратных накладных " + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;; 			
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда 
			Текст9 = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресВН = ПолучитьТЗ(Текст9,НачИменаКолонок9,УмныеИменаКолонок9);
			Текст9.Закрыть();
		Иначе
			АдресВН =  неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаФайла = Ложь;	
	Если ИН тогда 	
		ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Инвентаризация");
		ФС = Новый Файл(ФайлПутьНаСервере);
		
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл возвратных накладных " + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли; 
		Если ОшибкаФайла = Ложь тогда 
			Текст7 = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресИН = ПолучитьТЗ(Текст7,НачИменаКолонок7,УмныеИменаКолонок7);
			Текст7.Закрыть();
		Иначе 
			АдресИН  = неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаФайла = Ложь;
	Если АУ тогда 
		 ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Акты оказания услуг");
		 ФС = Новый Файл(ФайлПутьНаСервере);
		 
		 Если не ФС.Существует() тогда 
			 Сообщить("Файл оказания услуг" + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			 ОшибкаФайла = истина;
		 КОнецЕсли;
		 
		 Если не ОшибкаФайла тогда 
			Текст10 = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресАУ = ПолучитьТЗ(Текст10, НачИменаКолонок10, УмныеИменаКолонок10);
			Текст10.Закрыть();
		Иначе
			АдресАУ = неопределено;
		КонецЕсли;
	КонецЕсли;
	
	 ОшибкаФайла = Ложь;
	 Если АПУ тогда 
		 ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Акты приема услуг");
		 ФС = Новый Файл(ФайлПутьНаСервере);
		 
		 Если не ФС.Существует() тогда 
			 Сообщить("Файл приема услуг" + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			 ОшибкаФайла = истина;
		 КонецЕсли;
		 
		 Если не ОшибкаФайла тогда 
			Текст11  = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресАПУ = ПолучитьТЗ(Текст11, НачИменаКолонок11, УмныеИменаКолонок11);
			Текст11.Закрыть();
		Иначе
			АдресАПУ = неопределено;
		КонецЕсли; 
	КонецЕсли;

	 ОшибкаФайла = Ложь;
	 Если Араз  тогда
		ФайлПутьНаСервере = ПолучитьПутьВрФайлаПоИмени("Акт разбора");
		ФС = Новый Файл(ФайлПутьНаСервере);
		Если НЕ Фс.Существует() Тогда    
			Сообщить("Файл акта разбора " + ФайлПутьНаСервере + " не найден!!!", СтатусСообщения.Важное);
			ОшибкаФайла = Истина;
		КонецЕсли;
		
		Если ОшибкаФайла = Ложь тогда
			Текст12 = Новый ЧтениеТекста(ФайлПутьНаСервере,КодировкаТекста.ANSI);
			АдресАРаз = ПолучитьТЗ(Текст12,НачИменаКолонок12,УмныеИменаКолонок12);
			Текст12.Закрыть();
		Иначе 
			АдресАРаз = неопределено;
		КонецЕсли;
	КонецЕсли;	
	
	УдалитьВременныеФайлы();
	СоответствиеФайлов.Очистить();
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныеФайлы()
	Для Каждого СоответствиеФайла Из СоответствиеФайлов Цикл
		УдалитьФайлы(СоответствиеФайла.ИмяВрФайла);	
	КонецЦикла;	
КонецПроцедуры
// -[Лемма:ТС] Обработка временных файлов при клиент-серверном режиме работы

&НаСервере	
Процедура ДобавитьКонтрагентов(тз)     	
	для Каждого нн из ТЗ Цикл
		Если ПустаяСтрока(нн.ККодИИКО) Тогда  
			нн.ККодИИКО = Лев(нн.КНаименованиеИИКО,11);
		КонецЕсли;
		Если ЗначениеЗаполнено(нн.КНаименованиеИИКО) тогда
			Если Объект.Контрагенты.НайтиСтроки(Новый Структура ("ККодИИКО", нн.ККодИИКО)).Количество() = 0 Тогда
				ххх = Объект.Контрагенты.Добавить();
				ххх.КИННИИКО = ИсправленныйЮЛИНН(нн.КИННИИКО);
				ххх.ККодИИКО = нн.ККодИИКО;
				ххх.КНаименованиеИИКО = нн.КНаименованиеИИКО;
			КонецЕсли;
		иначе
			Продолжить;
		конецЕсли; 		
	КонецЦикла;   	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНажатие(Команда)
	Если (Объект.Докум.Количество() > 0) Тогда           
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаПерезаполнитьСоответствия", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
						"Вы хотите перезаполнить таблицы соответствия?",
						РежимДиалогаВопрос.ДаНет, 
						0, 
						КодВозвратаДиалога.Да
						);
	Иначе
		ЗагрузитьНаКлиенте();	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаПерезаполнитьСоответствия(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		Объект.БухгалтерскаяКатегория.Очистить();
		Объект.Контрагенты.Очистить();  
		Объект.Номенклатура.Очистить();
		Объект.Склады.Очистить();
		Объект.Докум.Очистить();
		Объект.ВидыОплаты.Очистить();
		Объект.ВидыОплатыСчета.Очистить();
		Объект.Группировка.Очистить();
		Объект.ФизЛица.Очистить();
		Объект.Статьи.Очистить();
		Элементы.БухгалтерскаяКатегория.Видимость = Истина;
		Элементы.ГруппаКонтрагенты.Видимость = Истина;
		Элементы.ГруппаНоменклатура.Видимость = Истина;
		Элементы.ГруппаСклады.Видимость = Истина;
		Элементы.ГруппаФизЛица.Видимость = Ложь; 
		
		ЗагрузитьНаКлиенте();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте 
Процедура ЗагрузитьНаКлиенте()
	Элементы.ДекорацияДлительнаяОперация.Видимость = Истина;
	Элементы.ДекорацияДлительнаяОперацияКонтекстноеМеню.Видимость = Истина;
	
	#Если ВебКлиент тогда 
		Если НЕ ПодключитьРасширениеРаботыСФайлами() тогда 
			УстановитьРасширениеРаботыСФайлами();
			ПодключитьРасширениеРаботыСФайлами();
		КОнецЕсли;			
	#КонецЕсли
	
	Если не ПН и не АР и не ВП и не АП и не РН и не АПЕР и не АС и не ИН и не ВН и не АУ и не АПУ и не Араз Тогда
		Сообщить("Выберите тип загружаемого документа!");
		Возврат;
	КонецЕсли;
	
	Если Элементы.Откуда.ТекущаяСтраница = Элементы.Откуда.ПодчиненныеЭлементы.Сервер Тогда
		
		Если (не ЗначениеЗаполнено(НачПериода)) ИЛИ (не ЗначениеЗаполнено(КонПериода)) Тогда
			Предупреждение("Неверный интервал!!!");
			Возврат;
		Иначе
			Если КонПериода < НачПериода Тогда
				Предупреждение("Неверный интервал!!!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Естьче = ЗагрузитьДокументыССервера();
		
		Если ЕстьЧе = 0 Тогда
			Возврат;
		КонецЕсли;	
	Иначе    /// ФАЙЛО
		// +[Лемма:ТС] Обработка временных файлов при клиент-серверном режиме работы
		Если СерверныйРежим Тогда
			ЗагрузитьСКлиентаНаСервер();
		Иначе
			ЗагрузитьДокументыИзФайлов();
		КонецЕсли;
		// -[Лемма:ТС] Обработка временных файлов при клиент-серверном режиме работы
	КонецЕсли;
	
	Если ЮР тогда  
		СписокЮрЛиц = ПодготовитьЮрЛицо();
		
		Если СписокЮрлиц.Количество() > 0 Тогда
			НужноеЮрЛицо = СписокЮрлиц.ВыбратьЭлемент("Выберите Юр.Лицо!",);
			юл = СокрЛП(НужноеЮрЛицо);
			Юрлицо = ПодготовитьЮрЛицо2(юл);
		КонецЕсли;
		
	Иначе
		Юрлицо = "";
	КонецЕсли;  
	
	Если ОтборКонцепции тогда 
		СписокКонцепций = ПодготовитьКонцепцию();
		Если СписокКонцепций.Количество() > 0 Тогда
			НужнаяКонцепция = СписокКонцепций.ВыбратьЭлемент("Выберите необходимую концепцию!",);
			НужнаяКонцепция = СокрЛП(НужнаяКонцепция);
			УдалитьКонцепции(НужнаяКонцепция);
		КонецЕсли;
	КонецЕсли;
	
	
	ЗагрузитьНаСервере();
	
	ВосстановитьНоменклатуруНаКлиенте();
	
	
	//	Если заполнять соответствия автоматически не нужно, следующие 4 строки можно закомментировать
	//ЗаполнитьГруппировкуНаСервере();
	//КонтрагентыЗаполнитьСоответствия();
	//ЗаполнитьСоответствия(); 
	//ЗаполнитьСоответствияСкладыНаСервере();
	///
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = Ложь;
	Элементы.ДекорацияДлительнаяОперацияКонтекстноеМеню.Видимость = Ложь;	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	
	ВсяНомеклатураАйко = Новый ТаблицаЗначений;
	ВсяНомеклатураАйко.Колонки.Добавить("Ключ");
	ВсяНомеклатураАйко.Колонки.Добавить("НКодИИКО"); 
	ВсяНомеклатураАйко.Колонки.Добавить("ННаименованиеИИКО"); 
	ВсяНомеклатураАйко.Колонки.Добавить("ГруппаУчетаКод");
	ВсяНомеклатураАйко.Колонки.Добавить("ГруппаУчетаНазвание");
	ВсяНомеклатураАйко.Колонки.Добавить("СтавкаНДС");
	ВсяНомеклатураАйко.Колонки.Добавить("ЕдиницаИзмерения");
	АдресНомАйко = ПоместитьВоВременноеХранилище(ВсяНомеклатураАйко, УИДФормы);
	Укр = 0;
		
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);
	//СоздатьСтруктуры();
	Если ТекущаяНастройка = неопределено тогда 		
		СоздатьСтруктуры();
		ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН); 		
	КонецЕсли; 	
	
	ВосстановтьНастройки();	
	Элементы.ГруппаНоменклатура.Видимость = Истина;
	
	Если ПН и ЗначениеЗаполнено(АдресПН) тогда
		ТЗ = ПолучитьИзВременногоХранилища(АдресПН);
		Кол = ТЗ.Количество();
		Для й=1 По Кол Цикл
			НН = ТЗ.Получить(Кол - й);
			НН.Колво = УдалитьПробелы(НН.Колво);
			Если Число(НН.Колво) = 0 Тогда
				ТЗ.Удалить(нн);
			Иначе
				НН.ЦенасНДС = УдалитьПробелы(НН.ЦенасНДС);
				НН.СуммасНДС = УдалитьПробелы(НН.СуммасНДС);
				НН.СуммаНДС = УдалитьПробелы(НН.СуммаНДС);
				НН.СкладНаименование ="("+ НН.Торговоепредприятиенаименование + ") " + НН.СкладНаименование; 				
				
				Если НомерПлюсКодТП тогда 
					НН.НомерДок = НН.ТорговоеПредприятиеКод + НН.НомерДок;
				КонецЕсли; 	
				
				
				Если не ПустаяСтрока(нн.СотрудникКод) тогда
					Если Объект.ФизЛица.НайтиСтроки(Новый Структура("КодАйко", нн.СотрудникКод)).Количество()  = 0 Тогда
						ххх = Объект.ФизЛица.Добавить();
						ххх.КодАйко = нн.СотрудникКод;
						ххх.НазваниеАйко = нн.СотрудникНаименование;
					КонецЕсли;
				КонеЦЕсли;
				ЕдИзм = ТаблицаЕдиницыИзмерений.НайтиСтроки(Новый Структура("ЕдиницаИзмеренияАйко",нн.Единицаизмеренияназвание));
				Если ЕдИзм.Количество() > 0 тогда 
				Иначе
					НоваяЕдИзм = ТаблицаЕдиницыИзмерений.Добавить();
					НоваяедИзм.ЕдиницаИзмеренияАйко = нн.Единицаизмеренияназвание;
				КонецЕсли;					
			КонецЕсли;	
		КонецЦикла;
		ТЗ.Свернуть("Дата,НомерДок,Входномер,Входдата,КИННИИКО,ККодИИКО,КНаименованиеИИКО,Сотрудниккод,Сотрудникнаименование,
		|СкладКод,СкладНаименование,СчетФактура,НКодИИКО,ННаименованиеИИКО,Группаучетаназвание,Группаучетакод,
		|СтавкаНДС,Торговоепредприятиекод,Торговоепредприятиенаименование,ЮЛИНН,ЮЛнаименование,Типноменклатурыкод,
		|Типноменклатурыназвание,Единицаизмерениякод,Единицаизмеренияназвание,ЦенасНДС,КонцепцияНазвание,КонцепцияКод,Комментарий,НомерГТД","Колво,СуммасНДС,СуммаНДС");   // НомерГТД,
		
		ТЗКонтр = ТЗ.Скопировать();
		ТЗКонтр.Свернуть("КИННИИКО,ККодИИКО,КНаименованиеИИКО");
		Объект.Контрагенты.Загрузить(ТЗКонтр);
		ЗагрузитьНоменклатуру(ТЗ,Ложь);
		ТзСклад = Тз.Скопировать();
		ТзСклад.Свернуть("СкладНаименование,СкладКод");
		Объект.Склады.Загрузить(ТзСклад);
		АдресПН = ПоместитьВоВременноеХранилище(ТЗ, УИДФормы);
	КонецЕсли;
	
	Если Ар и ЗначениеЗаполнено(АдресАР) Тогда
		ТЗ1 = ПолучитьИзВременногоХранилища(АдресАР);
		НН = Тз1.Количество()-1;
		Пока НН >= 0 Цикл
			Тз1[НН].Количество = УдалитьПробелы(Тз1[НН].Количество);
			Если Число(Тз1[НН].Количество) = 0 и Число(Тз1[НН].СебестоимостьбезНДС) = 0 Тогда
				Тз1.Удалить(Тз1[НН]);
				НН = НН - 1;
			Иначе
				Тз1[НН].ЦенапродажисНДС = УдалитьПробелы(Тз1[НН].ЦенапродажисНДС);
				Тз1[НН].СуммапродажисНДС = УдалитьПробелы(Тз1[НН].СуммапродажисНДС);
				Тз1[НН].СуммаНДСспродаж = УдалитьПробелы(Тз1[НН].СуммаНДСспродаж);
				Тз1[НН].СебестоимостьзаедбезНДС = УдалитьПробелы(Тз1[НН].СебестоимостьзаедбезНДС);
				Тз1[НН].СебестоимостьбезНДС = УдалитьПробелы(Тз1[НН].СебестоимостьбезНДС);
				Тз1[НН].СкладНаименование ="("+ Тз1[НН].Торговоепредприятиенаименование + ") " + Тз1[НН].СкладНаименование;
				Если НЕ ПустаяСтрока(ТЗ1[НН].НомерКассы) И ТЗ1[НН].НомерКассы <> Неопределено тогда 
					ТЗ1[НН].НомерКассы = Число(ТЗ1[НН].НомерКассы);
					ТЗ1[НН].НомерСмены = Число(ТЗ1[НН].НомерСмены); 
				КонецЕсли;
				Если НомерПлюсКодТП тогда 
					Тз1[НН].НомерДок = Тз1[НН].ТорговоеПредприятиеКод + Тз1[НН].НомерДок;
				КонецЕсли;
				ЕдИзм = ТаблицаЕдиницыИзмерений.НайтиСтроки(Новый Структура("ЕдиницаИзмеренияАйко",ТЗ1[нн].Единицаизмеренияназвание));
				Если ЕдИзм.Количество() > 0 тогда 
				Иначе
					НоваяЕдИзм = ТаблицаЕдиницыИзмерений.Добавить();
					НоваяедИзм.ЕдиницаИзмеренияАйко = ТЗ1[нн].Единицаизмеренияназвание;
				КонецЕсли;
				НН = НН -1;
			КонецЕсли;	
		КонецЦикла; 
				
		ТЗ1.Свернуть("Дата,НомерДок,Складкод,СкладНаименование,Операция,Операцияназвание,НКодИИКО,ННаименованиеИИКО,Группаучетаназвание,
		|Группаучетакод,СтавкаНДСспродаж,СтавкаНДС,Торговоепредприятиекод,Торговоепредприятиенаименование,ЮЛИНН,ЮЛнаименование,ТипСписания,
		|ТипСписанияНазвание,Движениеденежныхсредствкод,Движениеденежныхсредств,ПроданноеБлюдоКод,ПроданноеБлюдоНазвание,
		|Единицаизмеренияназвание,ЦенапродажисНДС,СебестоимостьзаедбезНДС,КонцепцияНазвание,КонцепцияКод,,НомерКассы,НомерСмены,Комментарий","Количество,СуммапродажисНДС,СуммаНДСспродаж,СебестоимостьбезНДС");
		
		ЗагрузитьНоменклатуру(ТЗ1,Истина);
		
		для Каждого нн из ТЗ1 Цикл
			Если Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", нн.СкладНаименование)).Количество() = 0  Тогда
				ххх = Объект.Склады.Добавить();
				ххх.СкладНаименование = нн.СкладНаименование;
				ххх.СкладКод = нн.СкладКод;
			КонецЕсли; 
			код = нн.Движениеденежныхсредствкод;
			Если ПустаяСтрока(код) Тогда
				код = нн.Движениеденежныхсредств;	
			КонецЕсли;
			Если (СокрЛП(код) <>  "4.03")и(СокрЛП(нн.Движениеденежныхсредств) <>  "Торговая выручка без учета скидок") тогда
				Если Объект.ВидыОплатыСчета.НайтиСтроки(Новый Структура("КодАйко", код)).Количество() = 0 Тогда
					ххх = Объект.ВидыОплатыСчета.Добавить();
					ххх.КодАйко = код;
					ххх.НазваниеАйко = нн.Движениеденежныхсредств;
				КонецЕсли;
			КонеЦЕсли;
		КонецЦикла;
		АдресАР = ПоместитьВоВременноеХранилище(ТЗ1, УИДФормы);
	КонецЕсли;
	
	Если ВП и ЗначениеЗаполнено(АдресВП) Тогда
		Тз2 = ПолучитьИзВременногоХранилища(АдресВП);
		Кол = ТЗ2.Количество();
		Для й=1 По Кол Цикл
			НН = ТЗ2.Получить(Кол - й);
			НН.Количество = УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество) = 0 Тогда
				Тз2.Удалить(нн);
			Иначе
				НН.Количество = УдалитьПробелы(НН.Количество);
				НН.СебестоимостьзаедбезНДС = УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС = УдалитьПробелы(НН.СебестоимостьбезНДС);
				НН.СкладОтправительНаименование ="("+ НН.ТорговоеПредприятиеОтправительНаименование + ") " + НН.СкладОтправительНаименование;
				НН.СкладПолучательНаименование ="("+ НН.ТорговоеПредприятиеПолучательНаименование + ") " + НН.СкладПолучательНаименование;
				Если НомерПлюсКодТП тогда 
					НН.НомерДок = НН.ТорговоеПредприятиеОтправительКод + НН.НомерДок;
				КонецЕсли;
				ЕдИзм = ТаблицаЕдиницыИзмерений.НайтиСтроки(Новый Структура("ЕдиницаИзмеренияАйко",нн.Единицаизмеренияназвание));
				Если ЕдИзм.Количество() > 0 тогда 
				Иначе
					НоваяЕдИзм = ТаблицаЕдиницыИзмерений.Добавить();
					НоваяедИзм.ЕдиницаИзмеренияАйко = нн.Единицаизмеренияназвание;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Тз2.Свернуть("Дата,НомерДок,Торговоепредприятиеотправителькод,Торговоепредприятиеотправительнаименование,ЮЛотправительИНН,
		|ЮЛотправительнаименование,Складотправителькод,Складотправительнаименование,Торговоепредприятиеполучателькод,
		|Торговоепредприятиеполучательнаименование,ЮЛполучательИНН,ЮЛполучательнаименование,Складполучателькод,Складполучательнаименование,
		|НКодИИКО,ННаименованиеИИКО,Группаучетаназвание,Группаучетакод,СтавкаНДС,Типноменклатурыкод,Типноменклатурыназвание,Единицаизмерениякод,
		|Единицаизмеренияназвание,Комментарий,СебестоимостьзаедбезНДС,КонцепцияНазвание,КонцепцияКод","Количество,СебестоимостьбезНДС");
		
		для Каждого нн из ТЗ2 Цикл
			Если Объект.Склады.НайтиСтроки(Новый структура("СкладНаименование", нн.СкладОтправительНаименование)).Количество() = 0 Тогда
				ххх = Объект.Склады.Добавить();
				ххх.СкладНаименование = нн.СкладОтправительНаименование;
				ххх.СкладКод = нн.СкладОтправительКод;
			КонецЕсли;	
			Если Объект.Склады.НайтиСтроки(Новый структура("СкладНаименование", нн.СкладПолучательНаименование)).Количество() = 0 Тогда
				ххх = Объект.Склады.Добавить();
				ххх.СкладНаименование = нн.СкладПолучательНаименование;
				ххх.СкладКод = нн.СкладПолучательКод;
			КонецЕсли;	
		КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ2,Ложь);
		АдресВП = ПоместитьВоВременноеХранилище(ТЗ2, УИДФормы);
	КонецЕсли;  	
	
	Если АП и ЗначениеЗаполнено(АдресАП) Тогда
		Тз3 = ПолучитьИзВременногоХранилища(АдресАП);
		Кол = Тз3.Количество();
		Для й=1 По Кол Цикл
			НН = Тз3.Получить(Кол - й);
			НН.Количество = УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество) = 0 Тогда
				Тз3.Удалить(нн);
			Иначе
				НН.Количество = УдалитьПробелы(НН.Количество);
				НН.СебестоимостьзаедбезНДС = УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС = УдалитьПробелы(НН.СебестоимостьбезНДС);
				НН.ЗнакОперации = Число(НН.ЗнакОперации);
				////Расчет себестоимости
				//Если СебестоимостьВ1С тогда 
				//	НН.СебестоимостьзаедбезНДС = 0;
				//	НН.СебестоимостьбезНДС = 0;
				//КонецЕсли;

				Если ЗначениеЗаполнено(НН.СкладСписанияНаименование) тогда 
					НН.СкладСписанияНаименование ="("+ НН.Торговоепредприятиенаименование + ") " + НН.СкладСписанияНаименование;
				КонецЕсли;
				Если ЗначениеЗаполнено(НН.СкладПриходаНаименование) тогда 
					НН.СкладПриходаНаименование ="("+ НН.Торговоепредприятиенаименование + ") " + НН.СкладПриходаНаименование;
				КонецЕсли;
				
				Если НомерПлюсКодТП тогда 
					НН.НомерДок = НН.ТорговоеПредприятиеКод + НН.НомерДок;
				КонецЕсли;
				ЕдИзм = ТаблицаЕдиницыИзмерений.НайтиСтроки(Новый Структура("ЕдиницаИзмеренияАйко",нн.Единицаизмеренияназвание));
				Если ЕдИзм.Количество() > 0 тогда 
				Иначе
					НоваяЕдИзм = ТаблицаЕдиницыИзмерений.Добавить();
					НоваяедИзм.ЕдиницаИзмеренияАйко = нн.Единицаизмеренияназвание;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла; 
		
		Тз3.Свернуть("Дата,НомерДок,Складсписаниякод,Складсписаниянаименование,Складприходакод,Складприходанаименование,
		|Знакоперации,Знакоперацииназвание,НКодИИКО,ННаименованиеИИКО,Группаучетаназвание,Группаучетакод,
		|СебестоимостьзаедбезНДС,СтавкаНДС,Торговоепредприятиекод,Торговоепредприятиенаименование,ЮЛИНН,ЮЛнаименование,Типноменклатурыкод,
		|Типноменклатурыназвание,Целевоеблюдокод,Целевоеблюдоназвание,Единицаизмерениякод,Единицаизмеренияназвание,Комментарий,КонцепцияНазвание,КонцепцияКод","Количество,СебестоимостьбезНДС");
		
		для Каждого нн из ТЗ3 Цикл
			Если ЗначениеЗаполнено(нн.Складсписаниянаименование) тогда
				Если Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", нн.СкладСписанияНаименование)).Количество() = 0  Тогда
					ххх = Объект.Склады.Добавить();
					ххх.СкладНаименование = нн.Складсписаниянаименование;
					ххх.СкладКод = нн.СкладсписанияКод;
					//Сообщить("код = " + нн.СкладсписанияКод + "," + нн.Складсписаниянаименование);
				КонецЕсли;	
			КонецЕсли;	
			Если ЗначениеЗаполнено(нн.Складприходанаименование) тогда
				Если Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", нн.Складприходанаименование)).Количество() = 0  Тогда
					ххх = Объект.Склады.Добавить();
					ххх.СкладНаименование = нн.Складприходанаименование;
					ххх.СкладКод = нн.СкладприходаКод;
					//Сообщить("код = " + нн.СкладприходаКод + ", " + нн.Складприходанаименование);
				КонецЕсли;	                                                                                                 
			КонецЕсли;	
		КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ3,Ложь);
		АдресАП = ПоместитьВоВременноеХранилище(ТЗ3, УИДФормы);
	КонецЕсли; 	
	
	Если АПЕР и ЗначениеЗаполнено(АдресАПЕР) Тогда
		Тз5 = ПолучитьИзВременногоХранилища(АдресАПЕР);
		Кол = ТЗ5.Количество();
		Для й=1 По Кол Цикл
			НН = ТЗ5.Получить(Кол - й);
			НН.Количество = УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество) = 0 Тогда
				Тз5.Удалить(нн);
			Иначе
				НН.Количество = УдалитьПробелы(НН.Количество);
				НН.СебестоимостьзаедбезНДС = УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС = УдалитьПробелы(НН.СебестоимостьбезНДС);
				НН.ЗнакОперации = Число(НН.ЗнакОперации);
				
				////Расчет себестоимости
				//Если СебестоимостьВ1С тогда 
				//	НН.СебестоимостьзаедбезНДС = 0;
				//	НН.СебестоимостьбезНДС = 0;
				//КонецЕсли;

				Если ЗначениеЗаполнено(НН.СкладСписанияНаименование) тогда 
					НН.СкладСписанияНаименование ="("+ НН.Торговоепредприятиенаименование + ") " + НН.СкладСписанияНаименование;
				КонецЕсли;
				Если ЗначениеЗаполнено(НН.СкладПриходаНаименование) тогда 
					НН.СкладПриходаНаименование ="("+ НН.Торговоепредприятиенаименование + ") " + НН.СкладПриходаНаименование;
				КонецЕсли;				
				Если НомерПлюсКодТП тогда 
					НН.НомерДок = НН.ТорговоеПредприятиеКод + НН.НомерДок;
				КонецЕсли;
				
				ЕдИзм = ТаблицаЕдиницыИзмерений.НайтиСтроки(Новый Структура("ЕдиницаИзмеренияАйко",нн.Единицаизмеренияназвание));
				Если ЕдИзм.Количество() > 0 тогда 
				Иначе
					НоваяЕдИзм = ТаблицаЕдиницыИзмерений.Добавить();
					НоваяедИзм.ЕдиницаИзмеренияАйко = нн.Единицаизмеренияназвание;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла; 
		
		Тз5.Свернуть("Дата,НомерДок,Складсписаниякод,Складсписаниянаименование,Складприходакод,Складприходанаименование,
		|Знакоперации,Знакоперацииназвание,НКодИИКО,ННаименованиеИИКО,Группаучетаназвание,Группаучетакод,
		|СебестоимостьзаедбезНДС,СтавкаНДС,Торговоепредприятиекод,Торговоепредприятиенаименование,ЮЛИНН,ЮЛнаименование,Типноменклатурыкод,
		|Типноменклатурыназвание,Целевоеблюдокод,Целевоеблюдоназвание,Единицаизмерениякод,Единицаизмеренияназвание,Комментарий,КонцепцияНазвание,КонцепцияКод","Количество,СебестоимостьбезНДС");
		
		для Каждого нн из ТЗ5 Цикл
			Если ЗначениеЗаполнено(нн.Складсписаниянаименование) тогда
				Если Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", нн.СкладСписанияНаименование)).Количество() = 0  Тогда
					ххх = Объект.Склады.Добавить();
					ххх.СкладНаименование = нн.Складсписаниянаименование;
					ххх.СкладКод = нн.СкладсписанияКод;
				КонецЕсли;	
			КонецЕсли;	
			Если ЗначениеЗаполнено(нн.Складприходанаименование) тогда
				Если Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", нн.Складприходанаименование)).Количество() = 0  Тогда
					ххх = Объект.Склады.Добавить();
					ххх.СкладНаименование = нн.Складприходанаименование;
					ххх.СкладКод = нн.СкладприходаКод;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ5,Ложь);
		АдресАПЕР = ПоместитьВоВременноеХранилище(ТЗ5, УИДФормы);
	КонецЕсли;  	
	
	Если АС и ЗначениеЗаполнено(АдресАС) Тогда
		Тз6 = ПолучитьИзВременногоХранилища(АдресАС);
		Кол = ТЗ6.Количество();
		Для й=1 По Кол Цикл
			НН = ТЗ6.Получить(Кол - й);
			НН.Количество = УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество) = 0 Тогда
				Тз6.Удалить(нн);
			Иначе
				НН.СебестоимостьзаедбезНДС = УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС = УдалитьПробелы(НН.СебестоимостьбезНДС); 				
				НН.СкладНаименование ="("+ НН.Торговоепредприятиенаименование + ") " + НН.СкладНаименование; 				
				Если НомерПлюсКодТП тогда 
					НН.НомерДок = НН.ТорговоеПредприятиеКод + НН.НомерДок;
				КонецЕсли;
				ЕдИзм = ТаблицаЕдиницыИзмерений.НайтиСтроки(Новый Структура("ЕдиницаИзмеренияАйко",нн.Единицаизмеренияназвание));
				Если ЕдИзм.Количество() > 0 тогда 
				Иначе
					НоваяЕдИзм = ТаблицаЕдиницыИзмерений.Добавить();
					НоваяедИзм.ЕдиницаИзмеренияАйко = нн.Единицаизмеренияназвание;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;  		
		
		Тз6.Свернуть("Дата,НомерДок,Складкод,Складнаименование,НКодИИКО,ННаименованиеИИКО,Группаучетаназвание,Группаучетакод,
		|СебестоимостьзаедбезНДС,СтавкаНДС,Торговоепредприятиекод,Торговоепредприятиенаименование,ЮЛИНН,ЮЛнаименование,Статьярасходов,
		|Статьярасходовкод,Типсписания,Типсписанияназвание,Операция,Операцияназвание,Типноменклатурыкод,Типноменклатурыназвание,
		|Целевоеблюдокод,Целевоеблюдоназвание,Единицаизмерениякод,Единицаизмеренияназвание,ПроданноеБлюдоКод,
		|ПроданноеБлюдоНазвание,КонцепцияНазвание,КонцепцияКод,Комментарий","Количество,СебестоимостьбезНДС");
		
		для Каждого нн из ТЗ6 Цикл
			Если Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", нн.СкладНаименование)).Количество() = 0  Тогда
				ххх = Объект.Склады.Добавить();
				ххх.СкладНаименование = нн.СкладНаименование;
				ххх.СкладКод = нн.СкладКод;
			КонецЕсли;	
		КонецЦикла;		
		Для каждого стр из ТЗ6 цикл			
			Если Объект.Статьи.НайтиСтроки(Новый Структура("СтатьяРасходовИИКО", Стр.СтатьяРасходов)).Количество() = 0 тогда 
				строка = Объект.Статьи.Добавить();
				Строка.СтатьяРасходовИИКО = стр.СтатьяРасходов;				
			КонецЕсли; 			
		КонецЦикла;
		
		ЗагрузитьНоменклатуру(ТЗ6,Ложь);
		АдресАС = ПоместитьВоВременноеХранилище(ТЗ6, УИДФормы);
	КонецЕсли;
	
	Если ИН и ЗначениеЗаполнено(АдресИН)тогда
		Тз7 = ПолучитьИзВременногоХранилища(АдресИН);
		для Каждого нн из ТЗ7 Цикл
			НН.Количество = УдалитьПробелы(НН.Количество);
			НН.СебестоимостьзаедбезНДС = УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
			НН.СебестоимостьбезНДС = УдалитьПробелы(НН.СебестоимостьбезНДС);
			НН.СкладНаименование ="("+ НН.Торговоепредприятиенаименование + ") " + НН.СкладНаименование; 				
			Если НомерПлюсКодТП тогда 
				НН.НомерДок = НН.ТорговоеПредприятиеКод + НН.НомерДок;
			КонецЕсли; 	
			ЕдИзм = ТаблицаЕдиницыИзмерений.НайтиСтроки(Новый Структура("ЕдиницаИзмеренияАйко",нн.Единицаизмеренияназвание));
			Если ЕдИзм.Количество() > 0 тогда 
			Иначе
				НоваяЕдИзм = ТаблицаЕдиницыИзмерений.Добавить();
				НоваяедИзм.ЕдиницаИзмеренияАйко = нн.Единицаизмеренияназвание;
			КонецЕсли;
		КонецЦикла; 
		
		Тз7.Свернуть("Дата,НомерДок,Торговоепредприятиекод,Торговоепредприятиенаименование,ЮЛИНН,ЮЛнаименование,Складкод,
		|Складнаименование,НКодИИКО,ННаименованиеИИКО,Группаучетаназвание,Группаучетакод,
		|СебестоимостьзаедбезНДС,СтавкаНДС,Счетнедостачикод,Счетнедостачинаименование,Счетизлишковкод,Счетизлишковнаименование,
		|Типноменклатурыкод,Типноменклатурыназвание,Единицаизмерениякод,Единицаизмеренияназвание","Количество,СебестоимостьбезНДС,ИзлишкиНедостачаКоличество,ИзлишкиНедостачаСумма");
		
		для Каждого нн из ТЗ7 Цикл
			Если Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", нн.СкладНаименование)).Количество() = 0  Тогда
				ххх = Объект.Склады.Добавить();
				ххх.СкладНаименование = нн.СкладНаименование;
				ххх.СкладКод = нн.СкладКод;
			КонецЕсли;	
		КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ7,Ложь);
		АдресИН = ПоместитьВоВременноеХранилище(ТЗ7, УИДФормы);
	КонецЕсли;
	
	
	Если РН и ЗначениеЗаполнено(АдресРН) Тогда
		Тз8 = ПолучитьИзВременногоХранилища(АдресРН);
		
		нн = ТЗ8.Количество()-1;
		Пока нн >= 0 Цикл
			ТЗ8[нн].Количество = УдалитьПробелы(ТЗ8[нн].Количество);
			Если Число(ТЗ8[нн].Количество)=0 Тогда
				ТЗ8.Удалить(ТЗ8[нн]);
			Иначе
				ТЗ8[нн].ЦенапродажисНДС=УдалитьПробелы(ТЗ8[нн].ЦенапродажисНДС);
				ТЗ8[нн].СуммапродажисНДС=УдалитьПробелы(ТЗ8[нн].СуммапродажисНДС);
				ТЗ8[нн].СуммаНДСспродаж=УдалитьПробелы(ТЗ8[нн].СуммаНДСспродаж);
				ТЗ8[нн].СебестоимостьзаедбезНДС=УдалитьПробелы(ТЗ8[нн].СебестоимостьзаедбезНДС);
				ТЗ8[нн].СебестоимостьбезНДС=УдалитьПробелы(ТЗ8[нн].СебестоимостьбезНДС);
				ТЗ8[нн].СкладНаименование ="("+ ТЗ8[нн].Торговоепредприятиенаименование + ") " + ТЗ8[нн].СкладНаименование; 				
				Если НомерПлюсКодТП тогда 
					ТЗ8[нн].НомерДок = ТЗ8[нн].ТорговоеПредприятиеКод + ТЗ8[нн].НомерДок;
				КонецЕсли;
				ЕдИзм = ТаблицаЕдиницыИзмерений.НайтиСтроки(Новый Структура("ЕдиницаИзмеренияАйко",ТЗ8[нн].Единицаизмеренияназвание));
				Если ЕдИзм.Количество() > 0 тогда 
				Иначе
					НоваяЕдИзм = ТаблицаЕдиницыИзмерений.Добавить();
					НоваяедИзм.ЕдиницаИзмеренияАйко = ТЗ8[нн].Единицаизмеренияназвание;
				КонецЕсли;
			КонецЕсли;
			нн = нн - 1;	
		КонецЦикла;	
		
		Тз8.Свернуть("Дата,НомерДок,Складкод,Складнаименование,НКодИИКО,ННаименованиеИИКО,Группаучетаназвание,Группаучетакод,
		|ЦенапродажисНДС,СтавкаНДСспродаж,СебестоимостьзаедбезНДС,СтавкаНДС,Торговоепредприятиекод,Торговоепредприятиенаименование,
		|ЮЛИНН,ЮЛнаименование,Операция,Операцияназвание,Типсписания,Типсписанияназвание,Движениеденежныхсредствкод,Движениеденежныхсредств,
		|Статьярасходовкод,Статьярасходов,КИННИИКО,ККодИИКО,КНаименованиеИИКО,Типноменклатурыкод,Типноменклатурыназвание,
		|Целевоеблюдокод,Целевоеблюдоназвание,Единицаизмерениякод,Единицаизмеренияназвание,Комментарий,КонцепцияНазвание,КонцепцияКод","Количество,СуммапродажисНДС,СуммаНДСспродаж,СебестоимостьбезНДС");
		
		ДобавитьКонтрагентов(ТЗ8); 
		для Каждого нн из ТЗ8 Цикл
			Если Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", нн.СкладНаименование)).Количество() = 0  Тогда
				ххх = Объект.Склады.Добавить();
				ххх.СкладНаименование = нн.СкладНаименование;
				ххх.СкладКод = нн.СкладКод;
			КонецЕсли;	
		КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ8,Истина);
		АдресРН = ПоместитьВоВременноеХранилище(ТЗ8, УИДФормы);
	КонецЕсли;
	
	
	Если ВН и ЗначениеЗаполнено(АдресВН) Тогда
		Тз9 = ПолучитьИзВременногоХранилища(АдресВН);
		Кол = ТЗ9.Количество();
		Для й=1 По Кол Цикл
			НН = ТЗ9.Получить(Кол - й);
			НН.Количество = УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество) = 0 Тогда
				Тз9.Удалить(нн);
			Иначе
				НН.ЦенапродажисНДС = УдалитьПробелы(НН.ЦенапродажисНДС);
				НН.СуммапродажисНДС = УдалитьПробелы(НН.СуммапродажисНДС);
				НН.СуммаНДСспродаж = УдалитьПробелы(НН.СуммаНДСспродаж);
				НН.СебестоимостьзаедбезНДС = УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС = УдалитьПробелы(НН.СебестоимостьбезНДС);				
				НН.СкладНаименование ="("+ НН.Торговоепредприятиенаименование + ") " + НН.СкладНаименование; 				
				Если НомерПлюсКодТП тогда 
					НН.НомерДок = НН.ТорговоеПредприятиеКод + НН.НомерДок;
				КонецЕсли; 
				ЕдИзм = ТаблицаЕдиницыИзмерений.НайтиСтроки(Новый Структура("ЕдиницаИзмеренияАйко",нн.Единицаизмеренияназвание));
				Если ЕдИзм.Количество() > 0 тогда 
				Иначе
					НоваяЕдИзм = ТаблицаЕдиницыИзмерений.Добавить();
					НоваяедИзм.ЕдиницаИзмеренияАйко = нн.Единицаизмеренияназвание;
				КонецЕсли; 
			КонецЕсли;	
		КонецЦикла;
		
		Тз9.Свернуть("Дата,НомерДок,Складкод,Складнаименование,НКодИИКО,ННаименованиеИИКО,Группаучетаназвание,Группаучетакод,
		|ЦенапродажисНДС,СтавкаНДСспродаж,СебестоимостьзаедбезНДС,СтавкаНДС,Торговоепредприятиекод,Торговоепредприятиенаименование,
		|ЮЛИНН,ЮЛнаименование,Движениеденежныхсредствкод,Движениеденежныхсредств,Статьярасходовкод,Статьярасходов,КИННИИКО,ККодИИКО,
		|КНаименованиеИИКО,Приходнаянакладнаядата,Приходнаянакладнаяномер,Счетфактура,Типноменклатурыкод,Типноменклатурыназвание,
		|Единицаизмерениякод,Единицаизмеренияназвание,КонцепцияНазвание,КонцепцияКод","Количество,СуммапродажисНДС,СуммаНДСспродаж,СебестоимостьбезНДС");
		
		ДобавитьКонтрагентов(ТЗ9); 
		для Каждого нн из ТЗ9 Цикл
			Если Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", нн.СкладНаименование)).Количество() = 0  Тогда
				ххх = Объект.Склады.Добавить();
				ххх.СкладНаименование = нн.СкладНаименование;
				ххх.СкладКод = нн.СкладКод;
			КонецЕсли;	
		КонецЦикла;  
		ЗагрузитьНоменклатуру(ТЗ9,Ложь);
		АдресВН = ПоместитьВоВременноеХранилище(ТЗ9, УИДФормы);
	КонецЕсли;
	
	
	Если АР и БезналичныеОплаты = "ИзПриемаКассовойВыручки" и ЗначениеЗаполнено(АдресАРиБезнал) Тогда
		Тз4  = ПолучитьИзВременногоХранилища(АдресАРИБезнал);	
		для Каждого нн из ТЗ4 Цикл
			НН.Сумма = УдалитьПробелы(НН.Сумма);
			НН.НомерКассы = Число(НН.НомерКассы);
			НН.НомерСмены = Число(НН.НомерСмены);
			НН.Дата = НачалоДня(НН.Дата);
		КонецЦикла; 
		
		Тз4.Свернуть("Дата,НомерДок,Торговоепредприятиекод,Торговоепредприятиенаименование,ЮЛИНН,ЮЛнаименование,
		|Видоплатыкод,Видоплатынаименование,Номеркарты,Номеркассы,РегномерККМ,Номерсмены,ПокупательИНН,Покупательнаименование,
		|Фамилия,Имя,Отчество,Датарождения,КонцепцияНазвание,КонцепцияКод,Комментарий","Сумма");
		
		для Каждого нн из ТЗ4 Цикл
			Если Объект.ВидыОплаты.НайтиСтроки(Новый Структура("КодИИКО", нн.ВидОплатыКод)).Количество() = 0 Тогда
				Если (СокрЛП(нн.ВидОплатыНаименование) <>  "Рубли")и(СокрЛП(нн.ВидОплатыНаименование) <>  "Наличные") тогда
					ххх = Объект.ВидыОплаты.Добавить();
					ххх.КодИИКО = нн.ВидОплатыКод;
					ххх.ВидОплатыИИКО = нн.ВидОплатыНаименование;
				КонеЦЕсли;
			КонецЕсли;
		КонецЦикла;
		//Т = Тз4.Скопировать();
		//Т.Свернуть("Видоплатынаименование", "Сумма");
		АдресАРиБезнал = ПоместитьВоВременноеХранилище(Тз4, УИДФормы);
	КонецЕсли;
	
	
	Если АУ   и ЗначениеЗаполнено(АдресАУ) тогда
		ТЗ10 = ПолучитьИзВременногоХранилища(АдресАУ);
		Для каждого нн из ТЗ10 Цикл
			НН.Количество = УдалитьПробелы(НН.Количество);
			НН.ЦенасНДС = УдалитьПробелы(НН.ЦенасНДС);
			НН.СуммаПродажиСНДС = УдалитьПробелы(НН.СуммаПродажиСНДС);
			НН.СуммаНДС = УдалитьПробелы(НН.СуммаНДС);
			ЕдИзм = ТаблицаЕдиницыИзмерений.НайтиСтроки(Новый Структура("ЕдиницаИзмеренияАйко",нн.Единицаизмеренияназвание));
			Если ЕдИзм.Количество() > 0 тогда 
			Иначе
				НоваяЕдИзм = ТаблицаЕдиницыИзмерений.Добавить();
				НоваяедИзм.ЕдиницаИзмеренияАйко = нн.Единицаизмеренияназвание;
			КонецЕсли;
		КонецЦикла;
		
		Тз10.Свернуть("Дата,НомерДок,Движениеденежныхсредствкод,Типноменклатурыназвание,
		|ДвижениеДенежныхСредств,НКодИИКО,ННаименованиеИИКО,Группаучетаназвание,Группаучетакод,
		|СтавкаНДССПродаж,СтавкаНДС,Торговоепредприятиекод,Торговоепредприятиенаименование,
		|ЮЛИНН,ЮЛнаименование,КИННИИКО,ККодИИКО,КНаименованиеИИКО,Типноменклатурыкод,
		|Единицаизмерениякод,Единицаизмеренияназвание,НомерКассы,НомерСмены,КонцепцияНазвание,КонцепцияКод,Комментарий
		|","Количество,СуммаПродажиСНДС,ЦенаСНДС,СуммаНДС");
		
		ДобавитьКонтрагентов(ТЗ10); 
        ЗагрузитьНоменклатуру(ТЗ10,Ложь);
		АдресАУ = ПоместитьВоВременноеХранилище(Тз10, УИДФормы);
 	КонецЕсли;
	
	Если АПУ  и ЗначениеЗаполнено(АдресАПУ) тогда
		ТЗ11 = ПолучитьИзВременногоХранилища(АдресАПУ);
		Кол = ТЗ11.Количество();
		Для й=1 По Кол Цикл
			НН = ТЗ11.Получить(Кол - й);
			НН.Колво = УдалитьПробелы(НН.Колво);
			Если Число(НН.Колво) = 0 Тогда
				ТЗ11.Удалить(нн);
			Иначе
				НН.ЦенасНДС = УдалитьПробелы(НН.ЦенасНДС);
				НН.СуммасНДС = УдалитьПробелы(НН.СуммасНДС);
				НН.СуммаНДС = УдалитьПробелы(НН.СуммаНДС);
				ЕдИзм = ТаблицаЕдиницыИзмерений.НайтиСтроки(Новый Структура("ЕдиницаИзмеренияАйко",нн.Единицаизмеренияназвание));
				Если ЕдИзм.Количество() > 0 тогда 
				Иначе
					НоваяЕдИзм = ТаблицаЕдиницыИзмерений.Добавить();
					НоваяедИзм.ЕдиницаИзмеренияАйко = нн.Единицаизмеренияназвание;
				КонецЕсли;
				Если не ПустаяСтрока(нн.СотрудникКод) тогда
					Если Объект.ФизЛица.НайтиСтроки(Новый Структура("КодАйко", нн.СотрудникКод)).Количество()  = 0 Тогда
						ххх = Объект.ФизЛица.Добавить();
						ххх.КодАйко = нн.СотрудникКод;
						ххх.НазваниеАйко = нн.СотрудникНаименование;
					КонецЕсли;
				КонеЦЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Тз11.Свернуть("Дата,НомерДок,Входномер,Входдата,КИННИИКО,ККодИИКО,КНаименованиеИИКО,Сотрудниккод,Сотрудникнаименование,
		|Движениеденежныхсредствкод,ДвижениеДенежныхСредств,СчетФактура,НКодИИКО,ННаименованиеИИКО,Группаучетаназвание,Группаучетакод,
		|ЦенасНДС,СтавкаНДС,Торговоепредприятиекод,Торговоепредприятиенаименование,ЮЛИНН,ЮЛнаименование,Типноменклатурыкод,Типноменклатурыназвание,
		|Единицаизмерениякод,Единицаизмеренияназвание,КонцепцияНазвание,КонцепцияКод,Комментарий","Колво,СуммасНДС,СуммаНДС");
		
        ДобавитьКонтрагентов(ТЗ11);
		ЗагрузитьНоменклатуру(Тз11,Ложь);
        АдресАПУ = ПоместитьВоВременноеХранилище(Тз11, УИДФормы);
 	КонецЕсли;  
	
	Если АРаз и ЗначениеЗаполнено(АдресАРаз) Тогда
		Тз12 = ПолучитьИзВременногоХранилища(АдресАРаз);
		Кол = ТЗ12.Количество();
		Для й=1 По Кол Цикл
			НН = ТЗ12.Получить(Кол - й);
			НН.Количество = УдалитьПробелы(НН.Количество);
			Если Число(НН.Количество) = 0 Тогда
				Тз12.Удалить(нн);
			Иначе
				НН.Количество = УдалитьПробелы(НН.Количество);
				НН.СебестоимостьзаедбезНДС = УдалитьПробелы(НН.СебестоимостьзаедбезНДС);
				НН.СебестоимостьбезНДС = УдалитьПробелы(НН.СебестоимостьбезНДС);
				НН.Операция = Число(НН.Операция); 				
				НН.ПроцентСебестоимости = Число(НН.ПроцентСебестоимости);
				
				Если ЗначениеЗаполнено(НН.СкладНаименование) тогда 
					НН.СкладНаименование ="("+ НН.Торговоепредприятиенаименование + ") " + НН.СкладНаименование;
					Если Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", нн.СкладНаименование)).Количество() = 0  Тогда
						ххх = Объект.Склады.Добавить();
						ххх.СкладНаименование = нн.СкладНаименование;
						ххх.СкладКод = нн.СкладКод;
						//Сообщить("код = " + нн.СкладсписанияКод + "," + нн.Складсписаниянаименование);
					КонецЕсли;
				КонецЕсли;
						
				Если НомерПлюсКодТП тогда 
					НН.НомерДок = НН.ТорговоеПредприятиеКод + НН.НомерДок;
				КонецЕсли;				
			КонецЕсли;	
		КонецЦикла;
		
		ЗагрузитьНоменклатуру(Тз12,Ложь);
		АдресАраз = ПоместитьВоВременноеХранилище(Тз12, УИДФормы);

		
		
	КонецЕсли;	
		
		
	ТзКатег = ВсяНомеклатураАйко.Скопировать();
	ТзКатег.Свернуть("ГруппаУчетаКод,ГруппаУчетаНазвание");
	Для Каждого Стр из ТзКатег Цикл
		НайденыеСтроки = Объект.БухгалтерскаяКатегория.НайтиСтроки(Новый Структура("КатегорияАйко", Стр.ГруппаУчетаНазвание));
		Если НайденыеСтроки.Количество() = 0 Тогда
			катег = Объект.БухгалтерскаяКатегория.Добавить();
			катег.КатегорияАйко = Стр.ГруппаУчетаНазвание;
			катег.КатегорияАйкоКод = Стр.ГруппаУчетаКод;
			катег.Аналитика = "Аналитика";
		КонецЕсли;
	КонецЦикла;
	
	//ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);

	Для Каждого Элемент из Объект.БухгалтерскаяКатегория Цикл
		строка = ТекущаяНастройка.СохраненнаяНастройка.Категории.Найти(СокрЛП(элемент.КатегорияАйкоКод), "КодАйко");
		Если ЗначениеЗаполнено(строка) Тогда
			Элемент.Группа1С = строка.Значение;
			Элемент.Группа1СКод = строка.Значение.Код;
			Элемент.Аналитика = строка.Аналитика;
		КонецЕсли;
	КонецЦикла;    
	
	Для Каждого Элемент из Объект.Статьи цикл
		Строка = ТекущаяНастройка.СохраненнаяНастройка.СтатьиЗатрат.Найти(СокрЛП(Элемент.СтатьяРасходовИИКО), "СтатьяРасходовИИКО");		
		Если ЗначениеЗаполнено(Строка) тогда 
			Элемент.СтатьяЗатрат1С = Строка.СтатьяЗатрат1С;
			Элемент.СчетЗатрат1С = Строка.СчетЗатрат1С;
		КонецЕсли; 		
	КонецЦикла;

	
	ОбновитьГруппировку();
	
	Если ПН или РН или ВН или АУ или АПУ тогда
		Для Каждого элемент из Объект.Контрагенты Цикл
			строка = ТекущаяНастройка.СохраненнаяНастройка.Поставщики.Найти(СокрЛП(элемент.ККодИИКО), "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				элемент.Контрагент = строка.Значение;
			КонецЕсли;
			Если ЗначениеЗаполнено(элемент.Контрагент) Тогда
				элемент.Код1С = элемент.Контрагент.Код;
				элемент.Наименование1С = элемент.Контрагент.Наименование;
				элемент.ИНН1С = ИсправленныйЮЛИНН(элемент.Контрагент.ИНН);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаКонтрагенты;
	Для Каждого Стр из Объект.Склады Цикл
		Код = СокрЛП(Стр.СкладКод);
		Если ПустаяСтрока(Код) Тогда
			Код = Стр.СкладНаименование; 
		КонецЕсли;
		строка = ТекущаяНастройка.СохраненнаяНастройка.Склады.Найти(Код, "КодАйко");
		Если ЗначениеЗаполнено(строка) Тогда
			Стр.Склад = строка.Значение;
			Стр.Подразделение = строка.Подразделение;
		КонецЕсли;
	КонецЦикла;
	
	Если не БезналичныеОплаты = "НеГрузить" Тогда
		Для каждого элемент из Объект.ВидыОплаты цикл   
			//строка = ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Найти(СокрЛП(элемент.КодИИКО), "КодАйко");
			строка = ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Найти(СокрЛП(элемент.КодИИКО), "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				элемент.ВидОплаты = строка.Значение;
				элемент.Код1С = Элемент.ВидОплаты.Код;
				элемент.ВидОплаты1С = Элемент.ВидОплаты.Наименование;
			КонецЕсли;
		КонецЦикла;
		Для каждого элемент из Объект.ВидыОплатыСчета цикл
			строка = ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Найти(СокрЛП(элемент.КодАйко), "КодАйкоСчет");
			Если ЗначениеЗаполнено(строка) Тогда
				элемент.ВидОплаты = строка.Значение;
				элемент.КодВидОплаты1С = элемент.ВидОплаты.Код;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ФизЛица.Количество() > 0 Тогда
		Элементы.ГруппаФизЛица.Видимость = Истина;
		Для каждого элемент из Объект.ФизЛица Цикл 
			строка = ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Найти(СокрЛП(элемент.КодАйко), "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				элемент.Название1С = строка.Значение;
				элемент.Код1С = строка.Значение.Код;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если ПН или ВП или РН или АУ или АПУ тогда
		Элементы.Страницы.ТекущаяСтраница  = Элементы.ГруппаКонтрагенты;
	КонецЕсли;
	
	Если Пн и ЗначениеЗаполнено(АдресПн) тогда
		ЗаполнитьДокументы(тз,"Приходная Накладная",Объект.ДеньПрефикс);
	КонецЕсли;
	
	Если АР и ЗначениеЗаполнено(АдресАР) тогда
		ЗаполнитьДокументы(тз1,"Акт Реализации",Объект.ДеньАР_ОПЗСПрефикс);
	КонецЕсли;
	
	Если ВП и ЗначениеЗаполнено(АдресВП) тогда
		ЗаполнитьДокументы(тз2,"Внутреннее Перемещение",Объект.ДеньПрефикс);
	КонецЕсли;
	
	Если АП и ЗначениеЗаполнено(АдресАП) тогда
		ЗаполнитьДокументы(тз3,"Акт Приготовления",Объект.ДеньАПриготовленияПрефикс);
	КонецЕсли;
	
	Если АС и ЗначениеЗаполнено(АдресАС) тогда
		ЗаполнитьДокументы(тз6,"Акт Списания",Объект.ДеньАС_ОПЗСПрефикс);
	КонецЕсли;	
	
	Если АПЕР и ЗначениеЗаполнено(АдресАПЕР) тогда
		ЗаполнитьДокументы(тз5,"Акт Переработки",Объект.ДеньАПерараоткиПрефикс);
	КонецЕсли;
	
	Если РН и ЗначениеЗаполнено(АдресРН) тогда
		ЗаполнитьДокументы(тз8,"Расходная Накладная",Объект.ДеньРН_ОПЗСПрефикс);
	КонецЕсли;
	
	Если ИН и ЗначениеЗаполнено(АдресИН) тогда
		ЗаполнитьДокументы(тз7,"Инвентаризация",Объект.ДеньПрефикс);
	КонецЕсли;	
	
	Если АР и БезналичныеОплаты = "ИзПриемаКассовойВыручки" и ЗначениеЗаполнено(АдресАРиБезнал) тогда
		ЗаполнитьДокументы(тз4,"Прием кассовой выручки",Объект.ДеньПрефикс);
	КонецЕсли;
	
	Если ВН и ЗначениеЗаполнено(АдресВН) тогда
		ЗаполнитьДокументы(тз9,"Возвратная Накладная",Объект.ДеньПрефикс);
	КонецЕсли;
	
	Если АУ и ЗначениеЗаполнено(АдресАУ) тогда 
		ЗаполнитьДокументы(тз10,"Акт оказания услуг",Объект.ДеньПрефикс);	//ЗаполнитьДокументы(тз10,"Акт оказания услуг",Объект.ДеньПрефикс);	
	КОнецЕсли;
	  
	Если АПУ и ЗначениеЗаполнено(АдресАПУ) тогда 
		ЗаполнитьДокументы(тз11,"Акт приёма услуг",Объект.ДеньПрефикс);		
	КонецЕсли;
	
	Если АРаз и ЗначениеЗаполнено(АдресАРаз) тогда 
		ЗаполнитьДокументы(тз12,"Акт разбора",Объект.ДеньПрефикс);		
	КонецЕсли;
	
	Элементы.Выполнить.Доступность = Истина;
	ЗапускБЫЛ = Ложь;
	АдресЗапуска = ПоместитьВоВременноеХранилище(ЗапускБЫЛ, УИДФормы);
	АдресНомАйко = ПоместитьВоВременноеХранилище(ВсяНомеклатураАйко, УИДФормы);
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);
	Элементы.Выполнить.Доступность = Истина;
	
	Если (АУ или АПУ) и не АП и не АПЕР и не АР и не ПН и не РН и не АС и не ИН и не ВН и не ВП тогда		
		Элементы.ГруппаБухгалтерскаяКатегория.Видимость = Истина;
		Элементы.ГруппаКонтрагенты.Видимость = Истина;
		Элементы.ГруппаСклады.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//преобразовать строку в дату
&НаСервере
Функция получитьДату(Стро2) 
	
	Стро = Стро2;
	Стро = СтрЗаменить(СокрЛП(Стро),Символы.НПП,"");
	Год = Число(Сред(Стро,7,4));
	Месяц = Число(Сред(Стро,4,2));
	День = Число(Лев(Стро,2));
	Длинн = СтрДлина(Стро);
	
	Если Длинн = 18 тогда
		Час =  Число(Сред(Стро,12,1));
		Минута = Число(Сред(Стро,14,2));
		Секунда = Число(Сред(Стро,17,2));
	ИначеЕсли Длинн = 10 тогда
		Час =  0;
		Минута = 0;
		Секунда = 0;
	Иначе
		Час =  Число(Сред(Стро,12,2));
		Минута = Число(Сред(Стро,15,2));
		Секунда = Число(Сред(Стро,18,2));
	КонецЕсли;
	
	ддд = Дата(Год,Месяц,День,час,Минута,Секунда);
	
	Возврат ддд;
	
КонецФункции

&НаСервере
функция ДобитьПробелы(Стр, числ) 
	
	Пока стрДлина(Стр) < числ цикл
		Стр = "0" + Стр;
	КонецЦикла;	
	
	Возврат Стр;
	
КонецФункции

&НаСервере
функция ТруКод(Стр) 
	
	Возврат ДобитьПробелы(СокрЛП(Стр),9);
	
КонецФункции

&НаСервере
Функция ИсправленныйЮЛИНН(иннИзАйко)    
	
	// ALEXV: Исправляем ИНН из IIKO - убираем начальные нули
	инн1 = СокрЛП(иннИзАйко);
	Пока Лев(инн1, 1) = "0" Цикл
		инн1 =  Сред(инн1, 2); 
	КонецЦикла;
	Возврат инн1;
	
КонецФункции

&НаСервере
Процедура СоздатьСтруктуры() 
	
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("Версия", 2);
	ОбщиеНастройки.Вставить("ЕдиницаИзмренияДефолтная", Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"));
	
	ЕдиницыИзмерений = Новый ТаблицаЗначений;
	ЕдиницыИзмерений.Колонки.Добавить("НазваниеАйко"); 
	ЕдиницыИзмерений.Колонки.Добавить("Значение"); 
	
	Поставщики = Новый ТаблицаЗначений;
	Поставщики.Колонки.Добавить("КодАйко"); 
	Поставщики.Колонки.Добавить("Значение");
	
	СкладыС = Новый ТаблицаЗначений;
	СкладыС.Колонки.Добавить("КодАйко"); 
	СкладыС.Колонки.Добавить("Значение");
	СкладыС.Колонки.Добавить("Подразделение");
	
	Категории = Новый ТаблицаЗначений;
	Категории.Колонки.Добавить("КодАйко"); 
	Категории.Колонки.Добавить("Значение");
	Категории.Колонки.Добавить("Аналитика");
	
	ГруппировкаС = Новый ТаблицаЗначений;
	ГруппировкаС.Колонки.Добавить("КодАйко"); 
	ГруппировкаС.Колонки.Добавить("Значение");
	
	НоменклатураС = Новый ТаблицаЗначений;
	НоменклатураС.Колонки.Добавить("КодАйко"); 
	НоменклатураС.Колонки.Добавить("Значение");
	
	ФизЛицаС = Новый ТаблицаЗначений;
	ФизЛицаС.Колонки.Добавить("КодАйко"); 
	ФизЛицаС.Колонки.Добавить("Значение");
	
	ТипыОплат = Новый ТаблицаЗначений;
	ТипыОплат.Колонки.Добавить("КодАйко"); 
	ТипыОплат.Колонки.Добавить("Значение");
	ТипыОплат.Колонки.Добавить("КодАйкоСчет");
	ТипыОплат.Колонки.Добавить("Игнорировать");
	
	СтатьиЗатрат = Новый ТаблицаЗначений;
	СтатьиЗатрат.Колонки.Добавить("СтатьяРасходовИИКО");
	СтатьиЗатрат.Колонки.Добавить("СтатьяЗатрат1С");
	СтатьиЗатрат.Колонки.Добавить("СчетЗатрат1С");

	
	СохраненнаяНастройка = Новый Структура;
	СохраненнаяНастройка.Вставить("ОбщиеНастройки", ОбщиеНастройки);
	СохраненнаяНастройка.Вставить("ЕдиницыИзмерений", ЕдиницыИзмерений);
	СохраненнаяНастройка.Вставить("Поставщики", Поставщики);
	СохраненнаяНастройка.Вставить("Склады", СкладыС);
	СохраненнаяНастройка.Вставить("Категории", Категории);
	СохраненнаяНастройка.Вставить("Группировка", ГруппировкаС);
	СохраненнаяНастройка.Вставить("Номенклатура", НоменклатураС);
	СохраненнаяНастройка.Вставить("ФизЛица", ФизЛицаС);
	СохраненнаяНастройка.Вставить("ТипыОплат", ТипыОплат);
	СохраненнаяНастройка.Вставить("СтатьиЗатрат", СтатьиЗатрат);
	
	ТекущаяНастройка = Новый Структура;
	ТекущаяНастройка.Вставить("ВидНастройки", 0);
	ТекущаяНастройка.Вставить("ИмяОбъекта"             , "iiko->БП30");
	ТекущаяНастройка.Вставить("Пользователь"           , ПараметрыСеанса.ТекущийПользователь);
	ТекущаяНастройка.Вставить("НаименованиеНастройки"  , "ТаблицыСоответствий.iikoRMS");
	ТекущаяНастройка.Вставить("ИспользоватьПриОткрытии", Истина);
	ТекущаяНастройка.Вставить("СохранятьАвтоматически" , Истина);
	ТекущаяНастройка.Вставить("СохраненнаяНастройка"   , СохраненнаяНастройка);
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);
	
	//СохранениеНастроек(ТекущаяНастройка);
	ВосстановтьНастройки();
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьКнопка(Команда)
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = Истина;
	Элементы.ДекорацияДлительнаяОперацияКонтекстноеМеню.Видимость = Истина;
	
	ВыполнитьНажатиеНаСервере();
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = Ложь;
	Элементы.ДекорацияДлительнаяОперацияКонтекстноеМеню.Видимость = Ложь;
	
	Если НужнаКолонка тогда 
		ВидимостьКолонки();
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура СоздатьНакладные(табз,префикс,ДеньПрефикс,порядок)
		
	строки=ПодготовитьНакладные(табз);
	Если строки=неопределено тогда
		возврат;
	КонецЕсли;
	
	Доки=строки.Скопировать();     
	Доки.Свернуть("Номер,Дата,Склад,ТорговоеПредприятиеКод,ЮЛнаименование,ЮЛИНН,Контрагент,СчетФактура,ВходНомер,ВходДата,Сотрудник,Комментарий");
	Доки2 = Доки.Скопировать();
	Доки2.Свернуть("Номер, Дата");
	СтарыйНомер="";
	Для каждого докСтр из Доки2 цикл
		//Проверим сколько документов с таким же номером за этот день
		СписДок = Доки.НайтиСтроки(Новый Структура("Номер, Дата", докСтр.Номер, докСтр.Дата));
		// Если в списке документов больше чем 1, значит были документы с 2мя складами
		Н = 0;
		Если СписДок.Количество() > 1 Тогда
			МассивНаСФ = Новый Массив;
			Для каждого СтрокаМассива из СписДок цикл
				номернаклиико=СокрЛП(СтрокаМассива.Номер)+"!"+"Приходная Накладная";
				
				д=Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
				Если д.Количество() = 0 или не д[0].Выбор тогда
					Продолжить;
				КонецЕсли;
				
				НомерДокумента=НомерНакладной(СтрокаМассива,СтрокаМассива.Номер,Префикс,ДеньПрефикс,"Приходная Накладная");
				Если НомерДокумента=Неопределено Тогда
					продолжить;
				КонецЕсли;
				
				НомерДокумента = Прав(НомерДокумента, 10);
				НомерДокумента = СТрока(Н) + НомерДокумента;
				
				Если ЗначениеЗаполнено(СтрокаМассива.Сотрудник) Тогда
					СоздатьАвансовыйОтчет(СтрокаМассива,строки,НомерДокумента, Порядок, номернаклиико, "Приходная Накладная");
					Н = Н + 1;
					продолжить;
				КонецЕсли;
				
				Док = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(НомерДокумента, СтрокаМассива.Дата);
				Если не ЗначениеЗаполнено(Док) Тогда
					Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Док.Номер = НомерДокумента;
				Иначе
					Если зд Тогда
						Док = Док.ПолучитьОбъект();
						Док.УстановитьПометкуУдаления(Ложь);
						Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						Сообщить("Накладная № " + СтрокаМассива.Номер + " от " + СтрокаМассива.Дата + " существует!");
						Продолжить
					КОнецЕсли;
				КОнецЕсли;				
				Док.Дата = СтрокаМассива.Дата;
				Если ОрганизацияИзДокумента тогда 
					Док.Организация=НайтиОгранизациюПоИНН(СтрокаМассива.ЮЛИНН, ложь);	
				Иначе
					Док.Организация=НайтиОгранизациюПоИНН(ОрганизацияДокумента.ИНН, ложь);
				КонецЕсли;
				//Получим систему налогооблажения
				УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
				
				Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
					//НДСВСтоимости = Истина;
					УчитыватьНДС = Истина;
				Иначе
					//НДСВСтоимости = Ложь;
					УчитыватьНДС = Истина;
				КонецЕсли;				
				
				Док.ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
				Док.КурсВзаиморасчетов=1;  				
				Док.СуммаВключаетНДС=истина;
				Док.НДСВключенВСтоимость=НДСВСтоимости;
				Док.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
				Док.Контрагент = СтрокаМассива.Контрагент; 				
				Док.СпособЗачетаАвансов=Перечисления.СпособыЗачетаАвансов.Автоматически; 							
				Док.ДоговорКонтрагента = НайтиДоговор(Док.Организация, Док.Контрагент, 
					Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "Основной договор");
				Док.ДатаВходящегоДокумента = ПолучитьДату(СтрокаМассива.ВходДата);
				Док.НомерВходящегоДокумента=СтрокаМассива.ВходНомер;
				Док.Грузоотправитель = Док.Контрагент;
				Если ОрганизацияИзДокумента тогда 
					Док.Грузополучатель = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СтрокаМассива.ЮЛИНН);
				Иначе
					Док.Грузополучатель = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ОрганизацияДокумента.ИНН);
				КОнецЕсли;
				
				СтрокиК = ТаблицаЗапросаК.НайтиСтроки(Новый Структура("Контрагент",Док.Контрагент));
				Если СтрокиК.Количество() = 0 Тогда 
					Док.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
					Док.СчетУчетаРасчетовПоАвансам=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");
				Иначе 
					Док.СчетУчетаРасчетовСКонтрагентом=СтрокиК.Хозрасчетный.СчетУчетаРасчетовСПоставщиком;
					Док.СчетУчетаРасчетовПоАвансам=СтрокиК.Хозрасчетный.СчетУчетаАвансовВыданных;
				КонецЕсли;
				Док.Склад = СтрокаМассива.Склад;
				Док.ПодразделениеОрганизации = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;
				
				Док.Номер = НомерДокумента;
				Док.Комментарий = "Накладная а iiko № " + СтрокаМассива.Номер;
				
				Если не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
					Сообщить("У контрагента "+Док.Контрагент+" не заполнен основной договор! Накладная № "+СокрЛП(Док.Номер)+" от "+СтрокаМассива.Дата+" проведена не будет", СтатусСообщения.ОченьВажное);
				КОнецЕсли;    				
				
				// Заполнение табличной части
				
				Док.Товары.Очистить();
				Док.Услуги.Очистить();
				Отб = Новый Структура("Номер, Склад",СтрокаМассива.Номер, СтрокаМассива.Склад);
				НСтр = строки.НайтиСтроки(Отб);	
				
				ТабЧасть = Новый ТаблицаЗначений;
				Табчасть = Строки.Скопировать(НСтр);
				Табчасть.Свернуть("Номенклатура,СтавкаНДС,НомерГТД","СуммасНДС,СуммаНДС,Количество");
				
				Для каждого стрр из Табчасть Цикл
					Если стрр.Номенклатура.Услуга=ложь  тогда
						услуга=ложь;
						стр2 = Док.Товары.Добавить();
					Иначе
						услуга=Истина;
						стр2 = Док.Услуги.Добавить();
					КонецЕсли;
					стр2.Номенклатура = стрр.Номенклатура;
					Если услуга = ложь тогда
						стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
						стр2.Коэффициент = 1;
					КонецЕсли;
					// Если Не суммовой
					Если не СуммовойУчет или Услуга = Истина тогда
						стр2.Количество = стрр.Количество;
						стр2.Цена = стрр.СуммасНДС/стрр.Количество;
						стр2.Сумма = стрр.СуммасНДС;
						стр2.СуммаНДС = стрр.СуммаНДС;
					Иначе //
						Если НДСВСтоимости тогда 
							стр2.Количество = стрр.СуммасНДС;
						Иначе
							стр2.Количество = стрр.СуммасНДС - стрр.СуммаНДС ;
						КонецЕсли;
						стр2.Цена = 1;
						стр2.Сумма = стрр.СуммасНДС;
						стр2.СуммаНДС = стрр.СуммаНДС;
					КонецЕсли;				
					//Стр2.ОтражениеВУСН=Перечисления.ОтражениеВУСН.Принимаются;
					Стр2.ОтражениеВУСН = РасходыНУ;
					СттНДС=Число(СокрЛП(Стрр.СтавкаНДС));
					стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,стр2.Сумма,стр2.СуммаНДС); 					
					строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
					Если строкк<>неопределено тогда  						
						стр2.СчетУчетаНДС = строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
						Если  услуга=Ложь тогда
							стр2.СчетУчета = строкк.СчетУчета;
							Если ЗначениеЗаполнено(Стрр.НомерГТД) тогда 
								НомерГТД = Справочники.НомераГТД.НайтиПоКоду(Стрр.НомерГТД);
								Если НомерГТД <> Справочники.НомераГТД.ПустаяСсылка()  тогда
									Если НомерГТД.ПометкаУдаления тогда
										Сообщить("Номер ГТД " + НомерГТД + " помечен на удаление!");
									Иначе
										Стр2.НомерГТД = НомерГТД;
										Стр2.СтранаПроисхождения = стр2.Номенклатура.СтранаПроисхождения;
									КонецЕсли;								
								Иначе
									НомерГТД = СоздатьНомерГТД(Стрр.НомерГТД);
									Стр2.НомерГТД = НомерГТД;
									Стр2.СтранаПроисхождения = стр2.Номенклатура.СтранаПроисхождения;
								КОнецЕсли;
							Иначе	
							КонецЕсли;
						Иначе
							стр2.СчетЗатрат = строкк.СчетУчета;							
						КонецЕсли;
					Иначе
						Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
					КонецЕсли;	
				КонецЦикла;
				
				ВремяДокумента = Документы.ПоступлениеТоваровУслуг.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
				Попытка
					Если Проводить тогда 
						Док.Записать(РежимЗаписиДокумента.Проведение); 
						Сообщить("Проведено Поступление товаров и услуг № "+Док.Номер+" от "+Док.Дата);
						ОБъект.Докум.НайтиСТроки(Новый Структура("Документ, СуммаДок", номернаклиико, Док.СуммаДокумента))[0].Док=Док.Ссылка;						
					Иначе
						Док.Записать(РежимЗаписиДокумента.Запись); 
						Сообщить("Записано Поступление товаров и услуг  № "+Док.Номер+" от "+Док.Дата);
						ОБъект.Докум.НайтиСТроки(Новый Структура("Документ, СуммаДок", номернаклиико, Док.СуммаДокумента))[0].Док=Док.Ссылка;						
					КонецЕсли;     					
				Исключение
					Сообщить("Не удалось записать Поступление товаров и услуг № " + Док.Номер + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
					Док.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
				
				Ссылки = Объект.Докум.НайтиСтроки(Новый структура("НомерДок, СуммаДок, Дата", СокрЛП(СтрокаМассива.Номер), Док.СуммаДокумента, Док.Дата));
				
				Если Ссылки.Количество() > 0 тогда
					Ссылки[0].Док = Док.Ссылка;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаМассива.СчетФактура) тогда 
					МассивНаСФ.Добавить(Док.Ссылка);
				КонецЕсли;
				
				Н = Н + 1;             
			КонецЦикла;
			// Создаем счет-фактуру
			Если МассивНаСФ.Количество() > 0 тогда
				
				Док1 = Документы.СчетФактураПолученный.НайтиПоНомеру(Док.Номер, Док.Дата);
				Если не ЗначениеЗаполнено(Док1) Тогда
					Док1 = Документы.СчетФактураПолученный.СоздатьДокумент();
					Док1.Номер = СтрокаМассива.СчетФактура;
				Иначе
					Если зд Тогда
						Док1 = Док1.ПолучитьОбъект();
						Док1.УстановитьПометкуУдаления(Ложь);
						Док1.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						Сообщить("Счет-фактура № " + Док.НомерВходящегоДокумента + " от " + Док.ДатаВходящегоДокумента + " существует!");
						Продолжить
					КОнецЕсли;
				КОнецЕсли;
				
				//Док1.Заполнить(Док);
				Док1.Организация = Док.Организация;
				Док1.Дата = ПолучитьДату(СтрокаМассива.ВходДата);
				Док1.Номер = Док.Номер;
				Док1.ДатаВходящегоДокумента = ПолучитьДату(СтрокаМассива.ВходДата);
				Док1.НомерВходящегоДокумента = СтрокаМассива.СчетФактура;
				Док1.КодВидаОперации = "01";
				Док1.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;				
				Док1.ДокументыОснования.Очистить();
				
				Для каждого СтрокаТабЧасти из МассивНаСФ цикл
					Строка = Док1.ДокументыОснования.Добавить();
					СТрока.ДокументОснование = СтрокаТабЧасти.ССылка;					
				КонецЦикла;
				ВремяДокумента = Документы.СчетФактураПолученный.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Док1,ВремяДокумента);
				Попытка
					Если Проводить тогда 
						//СохранитьДокумент1С(Док1, "Счет-фактура полученный", 2 , номернаклиико);
						Док1.Записать(РежимЗаписиДокумента.Проведение); 
						Сообщить("Проведена счет-фактура № "+Док1.Номер+" от "+Док1.Дата);
					Иначе
						Док1.Записать(РежимЗаписиДокумента.Запись); 
						Сообщить("Записана счет-фактура № "+Док1.Номер+" от "+Док1.Дата); 						
					КонецЕсли; 					
				Исключение
					Сообщить("Не удалось записать счет-фактуру № " + Док1.Номер + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				КонецПопытки;
			КонецЕсли;
			
		Иначе
			номернаклиико=СокрЛП(СписДок[0].Номер)+"!"+"Приходная Накладная";
			
			д=Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
			Если д.Количество() = 0 или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;
			
			НомерДокумента=НомерНакладной(СписДок[0],СписДок[0].Номер,Префикс,ДеньПрефикс,"Приходная Накладная");
			Если НомерДокумента=Неопределено Тогда
				продолжить;
			КонецЕсли;
			
			// ALEXV: TODO: Добавить Авансовый отчет
			Если ЗначениеЗаполнено(СписДок[0].Сотрудник) Тогда
				СоздатьАвансовыйОтчет(СписДок[0],строки,НомерДокумента, Порядок, номернаклиико, "Приходная Накладная");
				продолжить;
			КонецЕсли;
			
			// Поиск документа
			Док = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(НомерДокумента, СписДок[0].Дата);
			Если не ЗначениеЗаполнено(Док) Тогда
				Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				Док.Номер = НомерДокумента;
			Иначе
				Если зд Тогда
					Док = Док.ПолучитьОбъект();
					Док.УстановитьПометкуУдаления(Ложь);
					Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					Сообщить("Накладная № "+СписДок[0].Номер+" от "+СписДок[0].Дата+" существует!");
					Продолжить
				КОнецЕсли;
			КОнецЕсли;
			//ОбщегоНазначения.ЗаполнитьШапкуДокумента(Док, ТекущийПользователь, Константы.ВалютаРегламентированногоУчета.Получить(), "Покупка");
			// Шапка документа 
			Док.Дата = СписДок[0].Дата;
			Если ОрганизацияИзДокумента тогда 
				Док.Организация=НайтиОгранизациюПоИНН(СписДок[0].ЮЛИНН, ложь);
			Иначе
				Док.Организация=НайтиОгранизациюПоИНН(ОрганизацияДокумента.ИНН, ложь);
			КонецЕсли;
			//Поулчим систему налогооблажения
			УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
			
			Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
				//НДСВСтоимости = Истина;
				УчитыватьНДС = Истина;
			Иначе
				//НДСВСтоимости = Ложь;
				УчитыватьНДС = Истина;
			КонецЕсли;
			
			Док.ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
			Док.КурсВзаиморасчетов=1;
			Док.СуммаВключаетНДС=истина;
			Док.НДСВключенВСтоимость=НДСВСтоимости;
			Док.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
			Док.Контрагент = СписДок[0].Контрагент;  			
			Док.СпособЗачетаАвансов=Перечисления.СпособыЗачетаАвансов.Автоматически;						
			Док.ДоговорКонтрагента = НайтиДоговор(Док.Организация, Док.Контрагент, 
			Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "Основной договор");
			Док.ДатаВходящегоДокумента=ПолучитьДату(СписДок[0].ВходДата);
			Док.НомерВходящегоДокумента=СписДок[0].ВходНомер;
			Док.Грузоотправитель = Док.Контрагент;
			Если ОрганизацияИзДокумента тогда 
				Док.Грузополучатель = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СписДок[0].ЮЛИНН);
			Иначе
				Док.Грузополучатель = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ОрганизацияДокумента.ИНН);
			КОнецЕсли;
			СтрокиК = ТаблицаЗапросаК.НайтиСтроки(Новый Структура("Контрагент",Док.Контрагент));
			Если СтрокиК.Количество() = 0 Тогда 
				Док.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
				Док.СчетУчетаРасчетовПоАвансам=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");
			Иначе 
				Док.СчетУчетаРасчетовСКонтрагентом=СтрокиК[0].СчетУчетаРасчетовСПоставщиком;
				Док.СчетУчетаРасчетовПоАвансам=СтрокиК[0].СчетУчетаАвансовВыданных;
			КонецЕсли;
				
			Если не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
				Сообщить("У контрагента "+Док.Контрагент+" не заполнен основной договор! Накладная № "+СокрЛП(Док.Номер)+" от "+СписДок[0].Дата+" проведена не будет", СтатусСообщения.ОченьВажное);
			КОнецЕсли;
			
			Док.Склад = СписДок[0].Склад;
			Док.ПодразделениеОрганизации = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;
			Док.Номер = НомерДокумента;
			Док.Комментарий = СписДок[0].Комментарий;
			
			// Позиции документа
			Док.Товары.Очистить();
			Док.Услуги.Очистить();
			Отб = Новый Структура("Номер",СписДок[0].Номер);
			НСтр = строки.НайтиСтроки(Отб);
			
			ТабЧасть = Новый ТаблицаЗначений;
			Табчасть = Строки.Скопировать(НСтр);
			Табчасть.Свернуть("Номенклатура,СтавкаНДС,НомерГТД","СуммасНДС,СуммаНДС,Количество");
			
			Для каждого стрр из Табчасть Цикл
				Если стрр.Номенклатура.Услуга=ложь  тогда
					услуга=ложь;
					стр2 = Док.Товары.Добавить();
				Иначе
					услуга=Истина;
					стр2 = Док.Услуги.Добавить();
				КонецЕсли;
				стр2.Номенклатура = стрр.Номенклатура;
				Если услуга = ложь тогда
					стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
					стр2.Коэффициент = 1;
				КонецЕсли;
				// Если Не суммовой
				Если не СуммовойУчет или Услуга = Истина тогда
					стр2.Количество = стрр.Количество;
					стр2.Цена = стрр.СуммасНДС/Стрр.Количество;
					стр2.Сумма = стрр.СуммасНДС;
					стр2.СуммаНДС = стрр.СуммаНДС;
				Иначе //
					Если НДСВСтоимости тогда 
						стр2.Количество = стрр.СуммасНДС;
					Иначе
						стр2.Количество = стрр.СуммасНДС - стрр.СуммаНДС ;
					КонецЕсли; 					
					стр2.Цена = 1;
					стр2.Сумма = стрр.СуммасНДС;
					стр2.СуммаНДС = стрр.СуммаНДС;
				КонецЕсли;  
				//Стр2.ОтражениеВУСН=Перечисления.ОтражениеВУСН.Принимаются;
				Стр2.ОтражениеВУСН = РасходыНУ;
				СттНДС=Число(СокрЛП(Стрр.СтавкаНДС));
				стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,стр2.Сумма,стр2.СуммаНДС);
				
				строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если строкк<>неопределено тогда
					стр2.СчетУчетаНДС = строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
					// ALEXV: TODO: Добавить указание субконто для СчетУчетаБУ и СчетУчетаНУ
					//              Субконто "Статьи затрат" взять из карточки номенклатуры
					//              Субконто "НоменклатурнаяГруппа" взять из карточки номенклатуры
					//              Субконто "Подразделение" взять из таблицы соотвествия подразделений
					Если  услуга=Ложь тогда
						стр2.СчетУчета = строкк.СчетУчета;
						Если ЗначениеЗаполнено(Стрр.НомерГТД) тогда 
							НомерГТД = Справочники.НомераГТД.НайтиПоКоду(Стрр.НомерГТД);
							Если НомерГТД <> Справочники.НомераГТД.ПустаяСсылка()  тогда
								Если НомерГТД.ПометкаУдаления тогда
									Сообщить("Номер ГТД " + НомерГТД + " помечен на удаление!");
								Иначе
								Стр2.НомерГТД = НомерГТД;
								Стр2.СтранаПроисхождения = стр2.Номенклатура.СтранаПроисхождения;
								КонецЕсли;								
							Иначе
								НомерГТД = СоздатьНомерГТД(Стрр.НомерГТД);
								Стр2.НомерГТД = НомерГТД;
								Стр2.СтранаПроисхождения = стр2.Номенклатура.СтранаПроисхождения;
							КОнецЕсли;
						Иначе	
						КонецЕсли;
					Иначе
						стр2.СчетЗатрат = строкк.СчетУчета;
					КонецЕсли;  					
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
			КонецЦикла;
			//СохранитьДокумент1С(Док, "Приходная Накладная", Порядок, номернаклиико);
			ВремяДокумента = Документы.ПоступлениеТоваровУслуг.ВремяДокументаПоУмолчанию();
			УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
			Попытка
					Если Проводить тогда 
						Док.Записать(РежимЗаписиДокумента.Проведение); 
						Сообщить("Проведено Поступление товаров и услуг № "+Док.Номер+" от "+Док.Дата);
						ОБъект.Докум.НайтиСТроки(Новый Структура("Документ, СуммаДок", номернаклиико, Док.СуммаДокумента))[0].Док=Док.Ссылка;						
					Иначе
						Док.Записать(РежимЗаписиДокумента.Запись); 
						Сообщить("Записано Поступление товаров и услуг  № "+Док.Номер+" от "+Док.Дата);
						ОБъект.Докум.НайтиСТроки(Новый Структура("Документ, СуммаДок", номернаклиико, Док.СуммаДокумента))[0].Док=Док.Ссылка;						
					КонецЕсли;     					
				Исключение
					Сообщить("Не удалось записать Поступление товаров и услуг № " + Док.Номер + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			КонецПопытки;

			СтрокаДляСФ = Доки.НайтиСтроки(Новый Структура("Дата, Номер", ДокСтр.Дата, ДокСтр.Номер));
			Есть = Новый ТаблицаЗначений;
			Есть = ЕстьСчетФактура(СтрокаДляСФ[0]);
			
			Если ЗначениеЗаполнено(СтрокаДляСФ[0].СчетФактура) тогда
				Если Есть.Количество() = 0 тогда 					
					Док.ДатаВходящегоДокумента = ПолучитьДату(СтрокаДляСФ[0].ВходДата);
					Док.НомерВходящегоДокумента = СтрокаДляСФ[0].ВходНомер; 					
					Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(
					Док.Ссылка, 
					СтрокаДляСФ[0].СчетФактура, 
					Док.ДатаВходящегоДокумента, 
					Неопределено); 					
				Иначе   					
				КонецЕсли;
			Иначе  				
			КонецЕсли; 			
		КонецЕсли;		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПодготовитьНакладные(табз)
	
	Тзз1 = Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
	Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("Склад"); 
	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СтавкаНДС");
	Тзз1.Колонки.Добавить("Контрагент");
	Тзз1.Колонки.Добавить("Сотрудник");
	Тзз1.Колонки.Добавить("СуммасНДС");
	Тзз1.Колонки.Добавить("СуммаНДС");
	Тзз1.Колонки.Добавить("ВходНомер");
	Тзз1.Колонки.Добавить("ВходДата");
	Тзз1.Колонки.Добавить("СчетФактура");
	Тзз1.Колонки.Добавить("ЦенасНДС");
	Тзз1.Колонки.Добавить("НомерГТД");
	Тзз1.Колонки.Добавить("Комментарий");
	
	табз = ПолучитьИзВременногоХранилища(АдресПН);
	
	Для Каждого Стр из табз Цикл
		ОкрКоличество = Окр(Стр.Колво,3);
		Если ОкрКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ххх = Тзз1.Добавить();
		ххх.Номер = Стр.НомерДок;
		Дата = Стр.Дата;
		ххх.Дата = ПолучитьДату(Дата);
		НайденнаяСтрока = НайтиНоменклатуру(Стр.НКодИИКО, Стр.Ставкандс, Стр.ГруппаучетаНазвание);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			ххх.Номенклатура = НайденнаяСтрока.Номенклатура;
		Иначе
			Сообщить ("Неправильно заполнена номенклатура в IIKO, загрузка невозможна!");
			прервать;
		КонецЕсли;
		
		ххх.Склад = Объект.Склады.НайтиСтроки(Новый Структура ("СкладНаименование",Стр.СкладНаименование))[0].Склад;
		ххх.ЮЛнаименование = Стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод = Стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН = ИсправленныйЮЛИНН(СокрЛП(Стр.ЮЛИНН));
		ххх.Количество = ОкрКоличество;
		ххх.СтавкаНДС = Стр.СтавкаНДС;
		НайденныйКонтрагент = Объект.Контрагенты.НайтиСтроки(Новый Структура("КкодИИКО", Стр.КкодИИКО));//[0].Контрагент;
		Если НайденныйКонтрагент.Количество() <> 0 тогда 
			ххх.Контрагент = НайденныйКонтрагент[0].Контрагент;
		Иначе
		КонецЕсли;
		
		ххх.СуммасНДС = Стр.СуммасНДС;
		ххх.СуммаНДС = Стр.СуммаНДС;
		ххх.ВходНомер = Стр.ВходНомер;
		ххх.ВходДата = Стр.ВходДата;
		ххх.СчетФактура = Стр.СчетФактура;
		ххх.ЦенасНДС = Стр.ЦенасНДС;
		ххх.НомерГТД = Стр.НомерГТД;
		Попытка
			ххх.Комментарий = Стр.Комментарий;
		Исключение 
			ххх.Комментарий = "";
		КонецПопытки;
		
		Если не ПустаяСтрока(Стр.СотрудникКод) Тогда
			фл = Объект.ФизЛица.НайтиСтроки(Новый Структура("КодАйко", Стр.СотрудникКод));
			Если не фл.Количество() = 0 Тогда
				ххх.Сотрудник = фл[0].Название1С;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	  	
		
	Возврат Тзз1;
	
КонецФункции		

&НаКлиенте
Процедура СкладыСоздать(Команда)
	
	ТекДанные = Элементы.Склады.ТекущиеДанные;
	
	Если  ТекДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Создать склад с названием: " + 
	ТекДанные.СкладНаименование + "?", РежимДиалогаВопрос.ДаНет); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Парам = Новый Структура();
	Парам.Вставить("СкладНаименование", ТекДанные.СкладНаименование);
	Строка = СоздатьСкладыНаСервере(Парам);
	Элементы.Склады.ТекущиеДанные.Склад = Строка;
	
КонецПроцедуры

&НаСервере
Функция СоздатьСкладыНаСервере(Парам)
	
	Скл = Справочники.Склады.СоздатьЭлемент();
	Скл.Наименование = Парам.СкладНаименование;
	Скл.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	Попытка
		Скл.Записать();
		Элементы.Склады.ТекущиеДанные.Склад = Скл.Ссылка;
		Скл.ПолучитьФорму().Открыть();
	Исключение
		Скл.УстановитьНовыйКод();
		Попытка
			Скл.Записать();
		исключение
			Сообщить("Склад создать не удалось:" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		КонецПопытки;
	КонецПопытки;
	Строка = Справочники.Склады.НайтиПоНаименованию(Парам.СкладНаименование);
	
	Возврат Строка;
	
КонецФункции

&НаКлиенте
Процедура СкладыСоздатьВсе(Команда)
	
	Если Вопрос("Создать все Элементы?",РежимДиалогаВопрос.ДаНет,0) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьВсеСкладыНаСервере()
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВсеСкладыНаСервере()
	
	Для Каждого Стр из Объект.Склады Цикл
		Если не ЗначениеЗаполнено(Стр.Склад) тогда
			Скл = Справочники.Склады.СоздатьЭлемент();
			Скл.Наименование = Стр.СкладНаименование;
			Скл.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
			Попытка
				Скл.Записать();
				Стр.Склад = Скл.Ссылка;
				Стр.Наименование1С = Скл.Наименование;
			Исключение
				Сообщить("Склад создать не удалось:" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			КонецПопытки;		
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыЗаполнить(Команда)
	
	Если Вопрос("Заполнить соответствие по названию?",РежимДиалогаВопрос.ДаНет,0) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	
	ЗаполнитьСоответствияСкладыНаСервере();
	
	Элементы.СкладыСоздать.Доступность = Истина;
	Элементы.СкладыСоздатьВсе.Доступность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствияСкладыНаСервере()
	
	Для Каждого Стр из Объект.Склады Цикл
		Элемм = Справочники.Склады.ПустаяСсылка();
		Если не ЗначениеЗаполнено(Стр.Склад) тогда
			Элемм = Справочники.Склады.НайтиПоНаименованию(Стр.СкладНаименование,Истина);
			Если Элемм.ЭтоГруппа тогда
				Элемм = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемм) тогда
			Стр.Склад = Элемм.Ссылка;
			Стр.Наименование1С = Элемм.Наименование;
		КонецЕСли;
		Стр.Наименование1С = Стр.Склад.Наименование
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПриготовления(табз,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
	
	таб = ПодготовитьПриготовления(табз);
	СоздатьПриготовленияПодговленные(таб,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПриготовления(табз)
	
	Тзз1 = Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
	Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("СкладСписания"); 
	Тзз1.Колонки.Добавить("СкладПрихода"); 
	Тзз1.Колонки.Добавить("СкладПодразделение"); 
	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз1.Колонки.Добавить("ЗнакОперации");
	
	табз = ПолучитьИзВременногоХранилища(АдресАП);
	
	Для Каждого Стр из табз Цикл
		ОкрКоличество = Окр(Стр.Количество,3);
		Если ОкрКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ххх = Тзз1.Добавить();
		ххх.Номер = Стр.НомерДок;
		Дата = Стр.Дата;
		ххх.Дата = ПолучитьДату(Дата);
		ххх.Номенклатура = НайтиНоменклатуру(Стр.НКодИИКО, Стр.Ставкандс, Стр.ГруппаучетаНазвание).Номенклатура;  
		скл = Объект.Склады.НайтиСтроки(Новый Структура ("СкладНаименование", Стр.СкладСписанияНаименование));
		ххх.СкладСписания = скл[0].Склад;
		ххх.СкладПодразделение = скл[0].Подразделение;
		ххх.СкладПрихода = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стр.СкладПриходаНаименование))[0].Склад;
		ххх.ЮЛнаименование = Стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод = Стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН = Стр.ЮЛИнн;
		ххх.Количество = ОкрКоличество;
		ххх.СебестоимостьЗаедБезНДС = Стр.СебестоимостьЗаедБезНДС;
		ххх.СебестоимостьБезНДС = Стр.СебестоимостьБезНДС;
		ххх.ЗнакОперации = Стр.ЗнакОперации;
	КонецЦикла;	
	СвернутьПриготовления(Тзз1);
	Возврат Тзз1;
	
КонецФункции	

&НаСервере
Процедура СоздатьПриготовленияПодговленные(таб,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
	
	Доки = таб.Скопировать(); 
	СоворачиватьПо = "Номер,Дата,СкладСписания,СкладПрихода,ЮЛнаименование,ЮЛИНН,СкладПодразделение,Комментарий";
	Если АналитикаДокументов = "По Документам" Тогда
		СоворачиватьПо = СоворачиватьПо + ",ТорговоеПредприятиеКод";	
	КонецЕсли;
	Доки.Свернуть(СоворачиватьПо);
	Доки.Сортировать("Дата");
	СтарыйНомер = "";
	Для Каждого Стр из Доки Цикл
		Если Стр.Номер = СтарыйНомер тогда
			Дата = Стр.Дата;
			ДатаДокум = ПолучитьДату(Дата);
			Сообщить("В iiko с номером " + СтарыйНомер + " от " + ДатаДокум + " имеется 2 акта приготовления, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер = Стр.Номер;
		КонецЕсли;	
	КонецЦикла;	 
	
	Для каждого Стр из Доки цикл
		//Сообщить("" + Стр.Номер + ", " + Стр.Дата + ", " + Стр.СкладСписания + ", " + Стр.СкладПрихода + ", " + Стр.ЮЛнаименование + ", " + Стр.ЮЛИНН + ", " + Стр.СкладПодразделение);
		номернаклиико = СокрЛП(Стр.Номер) + "!" + "Акт Приготовления";
		Если ПустаяСтрока(базовыйДокумент) Тогда
			д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
			Если д = неопределено или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;	
		Иначе
			номерБазовый = СокрЛП(Стр.Номер) + базовыйДокумент;
			д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номерБазовый));
			Если д = неопределено или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Юрлицо) тогда
			Если Стр.ЮЛнаименование <>  Юрлицо тогда
				Продолжить;
			КонецЕСли;
		КонецЕСли;	
		Отб = Новый Структура("Номер",Стр.Номер);
		НСтр = таб.НайтиСтроки(Отб);
		Дата = Стр.Дата;
		ДатаДокум = ПолучитьДату(Дата);
		НомерДокумента = НомерНакладной(Стр,Стр.Номер,Префикс,ДеньПрефикс,"Акт Приготовления");
		
		Если НомерДокумента = Неопределено Тогда
			продолжить;
		КонецЕсли;
		
		Док = Документы.ОтчетПроизводстваЗаСмену.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Отчет производства за смену № " + Док.Номер + " от " + Док.Дата   + " существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		
		Если ОрганизацияИзДокумента = Истина тогда 
			Если Стр.ЮЛИНН = "" тогда 
				Сообщить ("Сопоставление не удалось: организация с ИНН " + Стр.ЮЛИНН + " не найдена");
				Продолжить;				
			Иначе
				Док.Организация = НайтиОгранизациюПоИНН(Стр.ЮЛИНН, Ложь);
			КонецЕсли;
		Иначе 
			Док.Организация = НайтиОгранизациюПоИНН(Стр.ЮЛИНН, Ложь);
		КонецЕсли;
		Док.Дата = ДатаДокум - 600;
		//Поулчим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Истина;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;

		
		Док.СчетЗатрат =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");		
		Док.НДСвСтоимостиТоваров = НДСВСтоимости;
		Док.Номер = НомерДокумента;
		Док.Склад = Стр.СкладСписания;
		Док.ПодразделениеОрганизации = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;
		Док.ПодразделениеЗатрат = Док.ПодразделениеОрганизации;
		Док.Комментарий = Стр.Комментарий; 		
				
		Док.Продукция.Очистить();
		Док.Материалы.Очистить();
		ТабЧасть = Новый ТаблицаЗначений;
		Табчасть = Таб.Скопировать(НСтр);
		Табчасть.Свернуть("Номенклатура, ЗнакОперации","СебестоимостьБезНДС, Количество");
		
		Для каждого стрр из Табчасть Цикл 
			ОкрКоличество = Окр(стрр.Количество,3);
			Если ОкрКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если СокрЛП(стрр.ЗнакОперации) = "1" Тогда
				ПлановаяСтоимость = стрр.СебестоимостьБезНДС/ОкрКоличество;
				Если ПлановаяСтоимость < 0.01 Тогда
					ПлановаяСтоимость = 0.01;
					СуммаПлановая = стрр.СебестоимостьБезНДС;
				Иначе
					СуммаПлановая = стрр.СебестоимостьБезНДС;
				КонецЕсли;
				Если СуммаПлановая < 0.01 Тогда
					СуммаПлановая = 0.01;
				КонецЕсли;	
				
				Стр2 = Док.Продукция.Добавить();
				Стр2.Номенклатура = стрр.Номенклатура;
				Стр2.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(Стр2.Номенклатура);	
				Стр2.ЕдиницаИзмерения = Стр2.Номенклатура.ЕдиницаИзмерения;
				
				Если не СуммовойУчет тогда 
					Стр2.Количество = ОкрКоличество;
					Стр2.ПлановаяСтоимость = ПлановаяСтоимость;
				Иначе
					Стр2.Количество = СуммаПлановая;
					Стр2.ПлановаяСтоимость = 1;
				КОнецЕсли;
			
				Стр2.Коэффициент = 1;
				
				Стр2.СуммаПлановая = СуммаПлановая;
				
				Строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				//Если Строкк <>  неопределено тогда
				Если Строкк.СчетУчета <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
					Стр2.Счет = Строкк.СчетУчета;
					//Стр2.СчетЗатрат = Док.СчетЗатрат;
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
					Продолжить;
				КонецЕсли;	
			Иначе  // операция = 2
				Стр2 = Док.Материалы.Добавить();
				Стр2.Номенклатура = стрр.Номенклатура;
				Стр2.ЕдиницаИзмерения = Стр2.Номенклатура.ЕдиницаИзмерения;
				
				Если не СуммовойУчет тогда 
					Стр2.Количество = ОкрКоличество;
				Иначе
					Стр2.Количество = стрр.СебестоимостьБезНДС;
				КОнецЕсли;
				
				//Считаем себестоимость в 1С
				Если СебестоимостьВ1С тогда 
					стрр.СебестоимостьБезНДС = 0;
				КонецЕсли;
				
				Стр2.Коэффициент = 1;
				Стр2.Себестоимость = стрр.СебестоимостьБезНДС;
				//Стр2.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				Стр2.ОтражениеВУСН = РасходыНУ;
				Стр2.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(Стр2.Номенклатура);
				Строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				
				Если Строкк <>  неопределено тогда
					Стр2.Счет = Строкк.СчетУчета;
					Стр2.СтатьяЗатрат = СтатьяЗатрат;										
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура, СтатусСообщения.Внимание);
				КонецЕсли;	

			КонецЕсли;
		КонецЦикла;
		
		ВремяДокумента = Документы.ОтчетПроизводстваЗаСмену.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		
		Если Не Проводить тогда 
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Запись); 
				Сообщить("Записан" + " Отчет производства за смену № " + Док.Номер + " от " + Док.Дата);
				
				СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, Дата", номерБазовый, НачалоДня(Док.Дата)));
				Если базовыйДокумент = "!Акт Списания"  тогда 	
					Если СтрокиДокумента.Количество() <> 0 тогда 
						СтрокиДокумента[0].Док = Док.Ссылка;
						НужнаКолонка = Истина;
					КонецЕсли;
				Иначе
					Если СтрокиДокумента.Количество() <> 0 тогда 
						СтрокиДокумента[0].Док2 = Док.Ссылка;
						НужнаКолонка = Истина;
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				Сообщить("Не удалось записать Отчет производства за смену № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
		Иначе
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение); 
				Сообщить("Проведен" + " Отчет производства за смену № " + Док.Номер + " от " + Док.Дата);
				
				СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, Дата", номерБазовый, НачалоДня(Док.Дата))); 				
				Если базовыйДокумент = "!Акт Списания" тогда 	
					Если СтрокиДокумента.Количество() <> 0 тогда 
						СтрокиДокумента[0].Док = Док.Ссылка;
						НужнаКолонка = Истина;
					КонецЕсли;
				Иначе
					Если СтрокиДокумента.Количество() <> 0 тогда 
						СтрокиДокумента[0].Док2 = Док.Ссылка;
						НужнаКолонка = Истина;
					КонецЕсли;
				КонецЕсли; 				
				
			Исключение
				Сообщить("Не удалось провести Отчет производства за смену № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки; 			
		КонецЕсли;   		
	КонецЦикла;     	
КонецПроцедуры	

&НаСервере
Процедура СвернутьПриготовления(таб)
	
	СоворачиватьПо = "Номер,Дата,Номенклатура,СкладСписания,СкладПрихода,ЮЛнаименование,ЮЛИНН,ЗнакОперации,СкладПодразделение";
	Если АналитикаДокументов = "По Документам" Тогда
		СоворачиватьПо = СоворачиватьПо + ",ТорговоеПредприятиеКод";	
	КонецЕсли;
	//Если СуммовойУчет Тогда
	//	таб.Свернуть(СоворачиватьПо, "Количество,СебестоимостьЗаедБезНДС,СебестоимостьБезНДС");
	//	Для каждого с из таб Цикл
	//		с.СебестоимостьЗаедБезНДС = ?(с.Количество <> 0, с.СебестоимостьБезНДС/с.Количество, 0);
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатурнуюГруппу(Ном)
	
	Если ЗначениеЗаполнено(Ном.НоменклатурнаяГруппа) Тогда
		Возврат Ном.НоменклатурнаяГруппа
	КонецЕсли;	
	Возврат ОсновнаяНоменклатурнаяГруппа;
	
КонецФункции

&НаСервере
Процедура ОбработкаРасходыхНакладных()
	//ОПЗС
	Тзз3 = Новый ТаблицаЗначений;  
	Тзз3.Колонки.Добавить("Номер"); 
	Тзз3.Колонки.Добавить("Дата");
	Тзз3.Колонки.Добавить("Номенклатура"); 
	Тзз3.Колонки.Добавить("СкладСписания"); 
	Тзз3.Колонки.Добавить("СкладПрихода"); 
	Тзз3.Колонки.Добавить("СкладПодразделение"); 
	Тзз3.Колонки.Добавить("Количество");
	Тзз3.Колонки.Добавить("ЮЛнаименование");
	Тзз3.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз3.Колонки.Добавить("ЮЛИНН");
	Тзз3.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз3.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз3.Колонки.Добавить("ЗнакОперации");
	тзз3.Колонки.Добавить("Операция");
	тзз3.Колонки.Добавить("Комментарий");
	
	Тз8 = ПолучитьИзВременногоХранилища(АдресРН);
	
	тзз1 = тз8.Скопировать();
	тзз1.Очистить();
	Для каждого стрр из тз8 цикл
		Если СокрЛП(Стрр.Операция) = "1" тогда  
			Стр = тзз1.Добавить();
			Стр.Дата =  Стрр.Дата;
			Стр.НомерДок =  Стрр.НомерДок;
			Стр.СкладКод =  Стрр.СкладКод;    
			Стр.СкладНаименование =  Стрр.СкладНаименование;   
			Стр.НКодИИКО =  Стрр.НКодИИКО;    
			Стр.ННаименованиеИИКО =  Стрр.ННаименованиеИИКО;    
			Стр.Группаучетаназвание =  Стрр.Группаучетаназвание;
			Стр.Количество =  Стрр.Количество;    
			Стр.ЦенапродажисНДС =  Стрр.ЦенапродажисНДС;    
			Стр.СуммапродажисНДС =  Стрр.СуммапродажисНДС;    
			Стр.СуммаНДСспродаж =  Стрр.СуммаНДСспродаж;    
			Стр.СтавкаНДСспродаж =  Стрр.СтавкаНДСспродаж;
			Стр.СебестоимостьзаедбезНДС =  Стрр.СебестоимостьзаедбезНДС;    
			Стр.СебестоимостьбезНДС =  Стрр.СебестоимостьбезНДС;    
			Стр.СтавкаНДС =  Стрр.СтавкаНДС;    
			Стр.Торговоепредприятиекод =  Стрр.Торговоепредприятиекод; 
			Стр.Торговоепредприятиенаименование =  Стрр.Торговоепредприятиенаименование; 
			Стр.ЮЛИНН =  ИсправленныйЮЛИНН(Стрр.ЮЛИНН);
			Стр.ЮЛнаименование =  Стрр.ЮЛнаименование;
			Стр.Операция =  Стрр.Операция;
			Стр.Операцияназвание =  Стрр.Операцияназвание;
			Стр.Типсписания =  Стрр.Типсписания;
			Стр.Типсписанияназвание =  Стрр.Типсписанияназвание;
			Стр.Движениеденежныхсредствкод =  Стрр.Движениеденежныхсредствкод;
			Стр.Движениеденежныхсредств =  Стрр.Движениеденежныхсредств;
			Стр.Статьярасходовкод =  Стрр.Статьярасходовкод;
			Стр.Статьярасходов =  Стрр.Статьярасходов;
			Стр.КИННИИКО =  ИсправленныйЮЛИНН(Стрр.КИННИИКО);
			Стр.ККодИИКО =  Стрр.ККодИИКО;
			Стр.КНаименованиеИИКО =  Стрр.КНаименованиеИИКО;
			СТр.Комментарий = Стрр.Комментарий;
			Если Стрр.СебестоимостьбезНДС > 0 Тогда
			Иначе
				Сообщить("Для номенклатуры " + стрр.ННаименованиеИИКО + " в расходной накладной № " + стрр.НомерДок + " от " + стрр.Дата  + 
				" не задана себестоимость!!!");
			КонецЕсли;
		КонецЕсли;
		
		Если (СокрЛП(Стрр.ТипСписания) = "2")или(СокрЛП(Стрр.Операция) = "2")  тогда  
			Если Стрр.Количество > 0 Тогда
				Если  (стрр.СебестоимостьзаедбезНДС) = 0 тогда
					Сообщить("Для номенклатуры " + стрр.ННаименованиеИИКО + " в расходной накладной № " + стрр.НомерДок + " от " + стрр.Дата  + 
					" не задана себестоимость!!!");
				КонецЕсли;	
				Стр = тзз3.Добавить();
				Стр.Дата = стрр.Дата;
				Стр.Номер = стрр.НомерДок;
				скл = объект.Склады.НайтиСтроки( Новый Структура("СкладНаименование", стрр.СкладНаименование));
				Стр.СкладСписания = скл[0].Склад;
				Стр.СкладПодразделение = скл[0].Подразделение;
				Стр.СкладПрихода = скл[0].Склад;
				Стр.СебестоимостьбезНДС = стрр.СебестоимостьбезНДС;
				Стр.СебестоимостьзаедбезНДС = стрр.СебестоимостьзаедбезНДС;
				Если СокрЛП(Стрр.ТипСписания) = "2" тогда 
					Стр.Знакоперации = 1;
				Иначе	
					Стр.Знакоперации = 2;
				КонецЕсли;	
				Стр.Номенклатура = НайтиНоменклатуру(стрр.НКодИИКО, стрр.СтавкаНДСспродаж, стрр.ГруппаучетаНазвание).Номенклатура;
				Стр.Количество = стрр.Количество;
				Стр.Торговоепредприятиекод = стрр.Торговоепредприятиекод;
				Стр.ЮЛИНН = ИсправленныйЮЛИНН(стрр.ЮЛИНН);
				Стр.ЮЛнаименование = стрр.ЮЛнаименование;
			Иначе
				Сообщить("Для номенклатуры " + стрр.ННаименованиеИИКО + " в акте списания № " + стрр.НомерДок + " от " + стрр.Дата  + 
				" не задано количество!!!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	СвернутьПриготовления(тзз3);
	СоздатьПриготовленияПодговленные(тзз3,Объект.РН_ОПЗСПрефикс,Объект.ДеньРН_ОПЗСПрефикс,1,Истина,"!Расходная Накладная");
	СоздатьРнакладные(тзз1,Объект.РН_РТУПрефикс,Объект.ДеньПрефикс,2);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРНакладные(табз,префикс,ДеньПрефикс,порядок)
	
	строки = ПодготовитьРНакладные(табз);
	
	Если строки = неопределено тогда
		Возврат;
	КонецЕсли;
	
	Доки = строки.Скопировать();
	Доки.Свернуть("Номер,Дата,Склад,ТорговоеПредприятиеКод,ЮЛИНН,Контрагент");
	СтарыйНомер = "";
	
	Для каждого докСтр из Доки цикл
		номернаклиико = СокрЛП(докСтр.Номер) + "!" + "Расходная Накладная";
		Если докСтр.Номер = СтарыйНомер тогда
			Сообщить("В iiko с номером " + СтарыйНомер + " от " + докСтр.Дата + " имеется 2 Расходных Накладных, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер = докСтр.Номер;
		КонецЕсли;
		д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
		Если д.количество() = 0  или не д[0].Выбор тогда
			Продолжить;
		КонецЕсли;
		
		НомерДокумента = НомерНакладной(докСтр,докСтр.Номер,Префикс,ДеньПрефикс,"Расходная Накладная");
		Если НомерДокумента = Неопределено Тогда
			продолжить;
		КонецЕсли;
		Док = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(НомерДокумента,докСтр.Дата);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Расходная Накладная № " + докСтр.Номер + " от " + докСтр.Дата + " существует!");
				Продолжить
			КОнецЕсли;
		КОнецЕсли;
		
		// Шапка документа
		Если ОрганизацияИзДокумента = Истина тогда 
			Если докСтр.ЮЛИНН = "" тогда 
				Сообщить ("Сопоставление не удалось: организация с ИНН " + докСтр.ЮЛИНН + " не найдена");
				Продолжить;				
			Иначе
				Док.Организация = НайтиОгранизациюПоИНН(докСтр.ЮЛИНН, Ложь);
			КонецЕсли;
		Иначе 
			Док.Организация = НайтиОгранизациюПоИНН(докСтр.ЮЛИНН, Ложь);
		КонецЕсли;
		Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		Док.КурсВзаиморасчетов = 1;
		Док.Дата = докСтр.Дата;
		
		Заполнять = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", Док.Метаданные());
		Если Заполнять тогда 
			Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли; 		
		//Поулчим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Ложь;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;

		Док.Контрагент = докСтр.Контрагент;
		Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		Док.СуммаВключаетНДС = УчитыватьНДС;
		Док.ДоговорКонтрагента = НайтиДоговор(Док.Организация, Док.Контрагент, 
		Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "Основной договор");
		Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		Док.Склад = докСтр.Склад;
		Док.ПодразделениеОрганизации = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;
		Док.Номер = НомерДокумента;
		// ALEXV: TODO: Брать из справочника "Счета учета расчетов с контрагентами
		Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
		Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
				
		// Позиции документа
		Док.Товары.Очистить();
		Док.Услуги.Очистить();
		Отб = Новый Структура("Номер",докСтр.Номер);
		НСтр = строки.НайтиСтроки(Отб);	
		
		ТабЧасть = Новый ТаблицаЗначений;
		Табчасть = Строки.Скопировать(НСтр);
		Табчасть.Свернуть("Номенклатура, СтавкаНДСсПродаж","СебестоимостьБезНДС, СуммаПродажиСНДС, СуммаНДССПродаж, Количество");
		
		Для каждого стрр из Табчасть Цикл
			Если стрр.Номенклатура.Услуга = Ложь  тогда
				услуга = Ложь;
				Стр2 = Док.Товары.Добавить();
			Иначе
				услуга = Истина;
				Стр2 = Док.Услуги.Добавить();
			КонецЕсли;
			
			Стр2.Номенклатура = стрр.Номенклатура;
			Если услуга = Ложь тогда
				Стр2.ЕдиницаИзмерения = Стр2.Номенклатура.ЕдиницаИзмерения;
				Стр2.Коэффициент = 1;
			КонецЕсли;
			
			Если не СуммовойУчет или Услуга = Истина тогда 
				Стр2.Количество = стрр.Количество;
				Стр2.Цена = стрр.СуммаПродажисНДС/стрр.Количество;
				Стр2.Сумма = стрр.СуммаПродажисНДС;
				Стр2.СуммаНДС = стрр.СуммаНДСсПродаж;	
			Иначе
				Стр2.Количество = стрр.СебестоимостьБезНДС;
				Стр2.Цена = 1;
				Стр2.Сумма = стрр.СуммаПродажисНДС;
				Стр2.СуммаНДС = стрр.СуммаНДСсПродаж;
			КонецЕсли;  			
			
			СттНДС = Число(СокрЛП(Стрр.СтавкаНДСспродаж));
			Стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,Стр2.Сумма,Стр2.СуммаНДС);
			Строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
			Если Строкк <>  неопределено тогда
				Если услуга = Ложь тогда
					Стр2.ЕдиницаИзмерения = Стр2.Номенклатура.ЕдиницаИзмерения;
					Стр2.Коэффициент = 1;									
					Стр2.СчетУчета = Строкк.СчетУчета;
					Стр2.Субконто = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
					Стр2.СчетРасходов = Строкк.СчетРасходовОтРеализации;
					Стр2.СчетДоходов = Строкк.СчетДоходовОтРеализации;
					Стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
					Стр2.Себестоимость = Стрр.СебестоимостьБезНДС;
					Если СебестоимостьВ1С тогда 
						Стр2.Себестоимость = 0;
					Иначе  						
					КонецЕсли;
				Иначе
					Стр2.Субконто = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
					Стр2.СчетРасходов = Строкк.СчетРасходовОтРеализации;
					Стр2.СчетДоходов = Строкк.СчетДоходовОтРеализации;
					Стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
				КонецЕсли;
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + докСтр.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;
		//СохранитьДокумент1С(Док, "Расходная Накладная", Порядок, номернаклиико);
		
		ВремяДокумента = Документы.РеализацияТоваровУслуг.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		
		Если НЕ Проводить тогда 
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Запись);  
				Сообщить("Записан" + "а расходная накладная № " + Док.Номер + " от " + Док.Дата);
				Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док.Ссылка;				
			Исключение
				Сообщить("Не удалось записать расходную накладную № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
		Иначе
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);  
				Сообщить("Проведен" + "а расходная накладная № " + Док.Номер + " от " + Док.Дата);
				Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док.Ссылка; 				
			Исключение
				Сообщить("Не удалось провести расходную накладную № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьРНакладные(табз)
	
	Тзз1 = Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
	Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("Склад"); 
	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛОтправительнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СтавкаНДСспродаж");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз1.Колонки.Добавить("Контрагент");
	Тзз1.Колонки.Добавить("ЦенаПродажисНДС");
	Тзз1.Колонки.Добавить("СуммаПродажисНДС");
	Тзз1.Колонки.Добавить("СуммаНДСсПродаж");
	Тзз1.Колонки.Добавить("Комментарий");
	
	Для Каждого Стр из табз Цикл
		ОкрКоличество = Окр(Стр.Количество,3);
		Если ОкрКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ххх = Тзз1.Добавить();
		ххх.Номер = Стр.НомерДок;
		Дата = Стр.Дата;
		ххх.Дата = ПолучитьДату(Дата);
		ххх.Номенклатура = НайтиНоменклатуру(Стр.НКодИИКО, Стр.Ставкандс, Стр.ГруппаучетаНазвание).Номенклатура;
		ххх.Склад = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стр.СкладНаименование))[0].Склад;
		ххх.ЮЛОтправительнаименование = Стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод = Стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН = Стр.ЮЛИнн;
		ххх.Количество = ОкрКоличество;
		ххх.СебестоимостьЗаедБезНДС = Стр.СебестоимостьЗаедБезНДС;
		ххх.СтавкаНДСспродаж = Стр.СтавкаНДСспродаж;
		ххх.СебестоимостьБезНДС = Стр.СебестоимостьБезНДС;
		ххх.Контрагент = Объект.Контрагенты.НайтиСтроки(Новый Структура("КкодИИКО", Стр.КкодИИКО))[0].Контрагент;
		ххх.ЦенаПродажисНДС = Стр.ЦенаПродажисНДС;
		ххх.СуммаПродажисНДС = Стр.СуммаПродажисНДС;
		ххх.СуммаНДСсПродаж = Стр.СуммаНДСсПродаж;
		Попытка
			ххх.Комментарий = Стр.Комментарий;
		Исключение 
			ххх.Комментарий = "";
		КонецПопытки;
	КонецЦикла;	
	//Если СуммовойУчет Тогда
	//	Тзз1.Свернуть("Номер,Дата,Номенклатура,Склад,ЮЛОтправительнаименование,ТорговоеПредприятиеКод,ЮЛИНН,СтавкаНДСспродаж,СебестоимостьЗаедБезНДС,Контрагент,ЦенаПродажисНДС,Комментарий", "Количество,СебестоимостьБезНДС,СуммаПродажисНДС,СуммаНДСсПродаж");
	//	Для каждого с из Тзз1 Цикл
	//		с.СебестоимостьЗаедБезНДС = с.СебестоимостьБезНДС/с.Количество;
	//		с.ЦенаПродажисНДС = с.СуммаПродажисНДС/с.Количество;
	//	КонецЦикла;	
	//КонецЕсли;
	
	Возврат Тзз1;
	
КонецФункции

&НаСервере
Функция ПолучитьСчетУчетаРасчетовСКонтрагентами(контрагент)
	
	ТестЗапрос = Новый Запрос();
	ТестЗапрос.УстановитьПараметр("Контрагент1", контрагент);
	ТестЗапрос.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.СчетаУчетаРасчетовСКонтрагентами ГДЕ Контрагент = (&Контрагент1)";
	Рез = ТестЗапрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() > 0 Тогда
		Возврат Рез.Получить(0);
	КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции	

&НаСервере
Процедура СоздатьПеремещения(табз,префикс,ДеньПрефикс,порядок)
	
	строки = ПодготовитьПеремещение(табз);
	
	Если строки = неопределено тогда
		Возврат;
	КонецЕсли;
	
	Доки = строки.Скопировать();
	Доки.Свернуть("Номер,Дата,СкладОтправитель,СкладПолучатель,ТорговоеПредприятиеКод,ЮЛИНН");
	СтарыйНомер = "";

	
	Для каждого докСтр из Доки цикл
		номернаклиико = СокрЛП(докСтр.Номер) + "!" + "Внутреннее Перемещение"; 
		д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
		Если д.количество() = 0 или не д[0].Выбор тогда
			Продолжить;
		КонецЕсли;
		Если докСтр.Номер = СтарыйНомер тогда
			Сообщить("В iiko с номером " + СтарыйНомер + " от " + докСтр.Дата + " имеется 2 перемещения, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер = докСтр.Номер;
		КонецЕсли;
		
		НомерДокумента = НомерНакладной(докСтр, докСтр.Номер,Префикс,ДеньПрефикс,"Внутреннее Перемещение");
		Если НомерДокумента = Неопределено Тогда
			продолжить;
		КонецЕсли;
		Док = Документы.ПеремещениеТоваров.НайтиПоНомеру(НомерДокумента,докСтр.Дата);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Перемещение товаров № " + НомерДокумента + " от " + докСтр.Дата   + " существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		
		// Шапка документа
		Заполнять = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", Док.Метаданные());
		
		Если Заполнять тогда 
			Док.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		иначе
			
		КонецЕсли;

		Док.Дата = докСтр.Дата;
		Док.Номер = НомерДокумента;
		
		Док.СкладОтправитель = докСтр.СкладОтправитель;
		Док.ПодразделениеОтправитель = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.СкладОтправитель))[0].Подразделение;
		
		Док.СкладПолучатель = докСтр.СкладПолучатель;
		Док.ПодразделениеПолучатель = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.СкладПолучатель))[0].Подразделение;		
		
		Если ОрганизацияИзДокумента = Истина тогда 
			Если докСтр.ЮЛИНН = "" тогда 
				Сообщить ("Сопоставление не удалось: организация с ИНН " + докСтр.ЮЛИНН + " не найдена");
				Продолжить;				
			Иначе
				Док.Организация = НайтиОгранизациюПоИНН(докСтр.ЮЛИНН, Ложь);
			КонецЕсли;
		Иначе 
			Док.Организация = НайтиОгранизациюПоИНН(докСтр.ЮЛИНН, Ложь);
		КонецЕсли;
		//Поулчим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Истина;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;
		Док.НДСвСтоимостиТоваров = НДСВСтоимости;
		
		
		// Позиции документа
		Док.Товары.Очистить();
		Отб = Новый Структура("Номер",докСтр.Номер);
		НСтр = строки.НайтиСтроки(Отб);	
		ТабЧасть = Новый ТаблицаЗначений;
		Табчасть = строки.Скопировать(НСтр);
		Табчасть.Свернуть("Номенклатура","СебестоимостьбезНДС,Количество");
		
		Для каждого стрр из Табчасть Цикл
			ОкрКоличество = Окр(стрр.Количество,3);
			Если ОкрКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;
			Стр2 = Док.Товары.Добавить();
			Стр2.Номенклатура = стрр.Номенклатура;
			Стр2.ЕдиницаИзмерения = Стр2.Номенклатура.ЕдиницаИзмерения;
			Стр2.Коэффициент = 1;
			
			Если не СуммовойУчет тогда 
				Стр2.Количество = ОкрКоличество;			
				Стр2.Цена = стрр.СебестоимостьБезНДС/ОкрКоличество;
				//Считаем себестоимость в 1С
				Если СебестоимостьВ1С тогда 
					стрр.СебестоимостьБезНДС = 0;
				КонецЕсли; 
				Стр2.Себестоимость = стрр.СебестоимостьБезНДС; 
			Иначе
				Стр2.Цена = ОкрКоличество;
				Стр2.Количество = Стрр.СебестоимостьБезНДС;
				//Считаем себестоимость в 1С
				Если СебестоимостьВ1С тогда 
					стрр.СебестоимостьБезНДС = 0;
				КонецЕсли; 
				Стр2.Себестоимость = стрр.СебестоимостьБезНДС;
			КонецЕсли;
			
			Строкк = НайтиСчетаДляНоменклатуры(Стр2.Номенклатура,ТаблицаЗапроса,Док.СкладОтправитель);
			Если Строкк <>  неопределено тогда
				Если Укр = 0 Тогда	
					Стр2.СчетУчета = Строкк.СчетУчета;
					Стр2.НовыйСчетУчета = Стр2.СчетУчета;
				Иначе
					Стр2.СчетУчета = Строкк.СчетУчета;
					Стр2.НовыйСчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду("289");//Стр2.СчетУчетаБУ;
				КонецЕсли;
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + Стр2.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;	
		//СохранитьДокумент1С(Док, "Перемещение товаров", Порядок, номернаклиико);
		
		ВремяДокумента = Документы.ПеремещениеТоваров.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		
		Если Проводить тогда 			
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение); 
				Сообщить("Проведено перемещение товаров № "+Док.Номер+" от "+Док.Дата);
				Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док.Ссылка;
			Исключение
				Сообщить("Не удалось провести перемещение товаров № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				Док.Записать(РежимЗаписиДокумента.Запись); 
			КонецПопытки;
		Иначе
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Запись); 
				Сообщить("Записано перемещение товаров № "+Док.Номер+" от "+Док.Дата);
				Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док.Ссылка;
			Исключение
				Сообщить("Не удалось записать перемещение товаров № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПеремещение(табз)
	
	Тзз1 = Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
	Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("СкладОтправитель"); 
	Тзз1.Колонки.Добавить("СкладПолучатель"); 
	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛОтправительнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	
	
	табз = ПолучитьИзВременногоХранилища(АдресВП);
	
	Для Каждого Стр из табз Цикл
		ххх = Тзз1.Добавить();
		ххх.Номер = Стр.НомерДок;
		Дата = Стр.Дата;
		ххх.Дата = ПолучитьДату(Дата);
		ххх.Номенклатура = НайтиНоменклатуру(Стр.НКодИИКО, Стр.Ставкандс, Стр.ГруппаучетаНазвание).Номенклатура;
		ххх.СкладОтправитель = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стр.Складотправительнаименование))[0].Склад;
		ххх.СкладПолучатель = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стр.Складполучательнаименование))[0].Склад;
		ххх.ЮЛОтправительнаименование = Стр.ЮЛОтправительнаименование;
		ххх.ТорговоеПредприятиеКод = Стр.Торговоепредприятиеотправителькод;
		ххх.ЮЛИНН = Стр.ЮЛОтправительИнн;
		ххх.Количество = Стр.Количество;
		ххх.СебестоимостьЗаедБезНДС = Стр.СебестоимостьЗаедБезНДС;
		ххх.СебестоимостьБезНДС = Стр.СебестоимостьБезНДС;
	КонецЦикла;	
	//Если СуммовойУчет Тогда
	//	Тзз1.Свернуть("Номер,Дата,Номенклатура,СкладОтправитель,СкладПолучатель,ЮЛОтправительнаименование,ТорговоеПредприятиеКод,ЮЛИНН", "Количество,СебестоимостьЗаедБезНДС");
	//КонецЕсли;
	
	Возврат Тзз1;
	
КонецФункции

&НаСервере
Процедура ОбработкаАктовРеализации()
	
	//ОПЗС [m:lemma:ts](отчет производства за смену)[/m:lemma:ts]
	Тзз3 = Новый ТаблицаЗначений;  
	Тзз3.Колонки.Добавить("Номер"); 
	Тзз3.Колонки.Добавить("Дата");
	Тзз3.Колонки.Добавить("Номенклатура"); 
	Тзз3.Колонки.Добавить("СкладСписания"); 
	Тзз3.Колонки.Добавить("СкладПрихода"); 
	Тзз3.Колонки.Добавить("СкладПодразделение"); 
	Тзз3.Колонки.Добавить("Количество");
	Тзз3.Колонки.Добавить("ЮЛнаименование");
	Тзз3.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз3.Колонки.Добавить("ЮЛИНН");
	Тзз3.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз3.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз3.Колонки.Добавить("ЗнакОперации");
	тзз3.Колонки.Добавить("Операция");
	Тзз3.Колонки.Добавить("Комментарий");
	
	//ООРП [m:lemma:ts](отчет о розничных продажах)[/m:lemma:ts]
	Тзз1 = Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
	Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("Склад"); 
	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛОтправительнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СтавкаНДСспродаж");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз1.Колонки.Добавить("Операция");
	Тзз1.Колонки.Добавить("СуммапродажисНДС");
	Тзз1.Колонки.Добавить("СуммаНДСспродаж");
	Тзз1.Колонки.Добавить("ЦенапродажисНДС");
	Тзз1.Колонки.Добавить("Движениеденежныхсредствкод");
	Тзз1.Колонки.Добавить("Комментарий");
	
	ТзПроизводствоДобавитьВСебест = Новый ТаблицаЗначений;
	ТзПроизводствоДобавитьВСебест.Колонки.Добавить("Номер"); 
	ТзПроизводствоДобавитьВСебест.Колонки.Добавить("Номенклатура"); 
	ТзПроизводствоДобавитьВСебест.Колонки.Добавить("СебестоимостьБезНДС");
	ТзПродажаДобавитьВСебест = Новый ТаблицаЗначений;
	ТзПродажаДобавитьВСебест.Колонки.Добавить("Номер"); 
	ТзПродажаДобавитьВСебест.Колонки.Добавить("Номенклатура"); 
	ТзПродажаДобавитьВСебест.Колонки.Добавить("СебестоимостьБезНДС");
	
	тз1 = ПолучитьИзВременногоХранилища(АдресАР);
	
	Для каждого стрр из тз1 цикл                                              
		стрр.Количество = Число(стрр.Количество);
		стрр.ЦенапродажисНДС = Число(стрр.ЦенапродажисНДС);
		стрр.СуммапродажисНДС = Число(стрр.СуммапродажисНДС);
		стрр.СуммаНДСспродаж = Число(стрр.СуммаНДСспродаж);
		стрр.СебестоимостьзаедбезНДС = Число(стрр.СебестоимостьзаедбезНДС);
		стрр.СебестоимостьбезНДС = Число(стрр.СебестоимостьбезНДС);
		
		//Если Стрр.ЦенапродажисНДС = 0 и стрр.СебестоимостьбезНДС = 0 Тогда 
		//	Продолжить;
		//КонецЕсли;	
		
		ДобавитьВМатерьялы = неопределено;
		ВерсяАйко = ПолучитьИзВременногоХранилища(АдресВерсииАйко);
		Если СокрЛП(Стрр.Операция) = "1" и Стрр.ЦенапродажисНДС = 0 тогда		
			
			ВерсияАйко = ПолучитьИзВременногоХранилища(АдресВерсииАйко);
			Если ВерсияАйко < 2 Тогда
				Сообщить("Для номенклатуры " + стрр.ННаименованиеИИКО + " в акте реализации № " + стрр.НомерДок + " от " + стрр.Дата + " не задана цена продажи!!!");
			Иначе
				Стр = ТзПродажаДобавитьВСебест.Добавить();	
				Стр.Номер = стрр.НомерДок;              
				Стр.СебестоимостьбезНДС = стрр.СебестоимостьбезНДС;
				//аа1 = аа1 + Стр.СебестоимостьбезНДС;
				ВсяНоменклатураАйко = ПолучитьИзВременногоХранилища(АдресНомАйко);
				
				ном = ВсяНоменклатураАйко.Найти(стрр.ПроданноеБлюдоКод,"НКодИИКО");
				Если ном = неопределено Тогда
					Сообщить("Не найдено проданное блюдо " + стрр.ПроданноеБлюдоНазвание + " в акте реализации № " + стрр.НомерДок + " от " + стрр.Дата);
					Сообщить("Стр.СебестоимостьбезНДС = " + Стр.СебестоимостьбезНДС);
					ном = ВсяНоменклатураАйко.Получить(0);
					Стр.Номенклатура = НайтиНоменклатуру(ном.НКодИИКО, ном.Ставкандс, ном.ГруппаучетаНазвание).Номенклатура;  
				Иначе
					Стр.Номенклатура = НайтиНоменклатуру(ном.НКодИИКО, ном.Ставкандс, ном.ГруппаучетаНазвание).Номенклатура;  
				КонецЕсли;
				
				Если СокрЛП(Стрр.ТипСписанияНазвание) = "Списывать со склада" Тогда 
					ДобавитьВМатерьялы = Истина;				
					//Адд2 = Адд2 + стрр.СебестоимостьбезНДС;
				КонецЕсли;
				//Иначе
				Стр = ТзПроизводствоДобавитьВСебест.Добавить();	
				Стр.Номер = стрр.НомерДок;
				Стр.СебестоимостьбезНДС = стрр.СебестоимостьбезНДС;
				Если ном <>  неопределено Тогда
					Стр.Номенклатура = НайтиНоменклатуру(ном.НКодИИКО, ном.Ставкандс, ном.ГруппаучетаНазвание).Номенклатура;  
					//Стр.НКодИИКО = стрр.ПроданноеБлюдоКод;
					//Адд = Адд + стрр.СебестоимостьбезНДС;
				КонецЕсли;
				//КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если СокрЛП(Стрр.Операция) = "1" и Стрр.ЦенапродажисНДС > 0 тогда
			// Продажа
			Стр = тзз1.Добавить();
			Стр.Дата = стрр.Дата;
			Стр.Номер = стрр.НомерДок;
			Стр.Склад = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стрр.СкладНаименование))[0].Склад;
			Стр.Операция = стрр.Операция;
			Стр.Номенклатура = НайтиНоменклатуру(стрр.НКодИИКО, стрр.СтавкаНДСспродаж, стрр.ГруппаучетаНазвание).Номенклатура;
			Стр.Количество = стрр.Количество;
			Стр.ЦенапродажисНДС = стрр.ЦенапродажисНДС;
			Стр.СуммапродажисНДС = стрр.СуммапродажисНДС;
			Стр.СуммаНДСспродаж = стрр.СуммаНДСспродаж;
			Стр.СебестоимостьзаедбезНДС = стрр.СебестоимостьзаедбезНДС;
			Стр.СебестоимостьбезНДС = стрр.СебестоимостьбезНДС;
			Стр.СтавкаНДСспродаж = стрр.СтавкаНДСспродаж;
			Стр.Торговоепредприятиекод = стрр.Торговоепредприятиекод;
			Стр.ЮЛИНН = ИсправленныйЮЛИНН(стрр.ЮЛИНН);
			код = стрр.Движениеденежныхсредствкод;
			
			Если ПустаяСтрока(код) Тогда
				код = стрр.Движениеденежныхсредств;	
			КонецЕсли;
			Стр.Движениеденежныхсредствкод = код;
			Стр.Комментарий = стрр.Комментарий;
			//Стр.ТипСписания = стрр.ТипСписания;
		КонецЕсли;
		
		Если (СокрЛП(Стрр.ТипСписанияНазвание) = "Списывать ингредиенты")
			или	(СокрЛП(Стрр.ТипСписанияНазвание) = "")
			или ((СокрЛП(Стрр.ТипСписанияНазвание) = "Списывать со склада")и(СокрЛП(Стрр.Операция) = "2")) 
			или ДобавитьВМатерьялы <>  неопределено тогда  
			Если СокрЛП(Стрр.ТипСписанияНазвание) = "Списывать ингредиенты" и Стрр.ЦенапродажисНДС = 0 и ВерсияАйко >=  2 тогда
				//Если СокрЛП(Стрр.Операция) = "1" и Стрр.ЦенапродажисНДС = 0 и ВерсияАйко >  = 2 тогда
				// Этот товар не попал в Отчет о Розничных продажах
				// Его себестоимость добовляем к проданному с ним блюду.
				//Игн = Игн + стрр.СебестоимостьбезНДС;
				продолжить;
			КонецЕсли;
			Если Число(Стрр.Количество) > 0 или Число(Стрр.СебестоимостьбезНДС) > 0 Тогда
				Если СокрЛП(Стрр.ТипСписанияНазвание) = "Списывать ингредиенты" тогда
					Если  (стрр.СуммапродажисНДС-стрр.СуммаНДСспродаж) = 0 тогда
						Сообщить("Для номенклатуры " + стрр.ННаименованиеИИКО + " в акте реализации № " + стрр.НомерДок + " от " + стрр.Дата  + 
						" не задана цена продажи!!!");
					КонецЕсли;	
				Иначе		
					Если  (стрр.СебестоимостьбезНДС) = 0 тогда
						Сообщить("Для номенклатуры " + стрр.ННаименованиеИИКО + " в акте реализации № " + стрр.НомерДок + " от " + стрр.Дата  + 
						" не задана себестоимость!!!");
					КонецЕсли;	
				КонецЕсли;
				
				Стр = тзз3.Добавить();
				Стр.Дата = стрр.Дата;
				Стр.Номер = стрр.НомерДок;
				скл = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", стрр.СкладНаименование));
				Стр.СкладСписания = скл[0].Склад;
				Стр.СкладПодразделение = скл[0].Подразделение;
				Стр.СкладПрихода = скл[0].Склад;
				Стр.Операция = Стрр.Операция;
				Если СокрЛП(Стрр.ТипСписанияНазвание) = "Списывать ингредиенты" и ДобавитьВМатерьялы = неопределено тогда 
					Стр.Знакоперации = 1;
				Иначе	
					Стр.Знакоперации = 2;
				КонецЕсли;
				Стр.СебестоимостьзаедбезНДС = стрр.СебестоимостьзаедбезНДС;
				Стр.СебестоимостьбезНДС = стрр.СебестоимостьбезНДС;	
				Стр.Номенклатура = НайтиНоменклатуру(стрр.НКодИИКО, стрр.СтавкаНДСспродаж, стрр.ГруппаучетаНазвание).Номенклатура;
				Стр.Количество = стрр.Количество;
				Стр.Торговоепредприятиекод = стрр.Торговоепредприятиекод;
				Стр.ЮЛИНН = ИсправленныйЮЛИНН(стрр.ЮЛИНН);
				Стр.ЮЛнаименование = стрр.ЮЛнаименование;
				Стр.Комментарий = стрр.Комментарий;
			Иначе
				Сообщить("Для материала " + стрр.ННаименованиеИИКО + " в акте реализации № " + стрр.НомерДок + " от " + стрр.Дата  + 
				" не задано количество!!!");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Стр из ТзПроизводствоДобавитьВСебест цикл      
		Отб = Новый Структура("Номер,Номенклатура,Операция",Стр.Номер,Стр.Номенклатура,"1");
		бл1 = тзз3.НайтиСтроки(Отб);
		Если бл1 <>  неопределено и бл1.Количество() > 0 Тогда
			бл = бл1.Получить(0);
		КонецЕсли;
		Если бл = неопределено Тогда
			Для каждого сс из тзз3 цикл
				Если сс.Номер = Стр.Номер Тогда
					бл = сс;
					прервать;		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		бл.СебестоимостьБезНДС = бл.СебестоимостьБезНДС + Стр.СебестоимостьБезНДС;
		Если бл.Количество > 0 Тогда
			бл.СебестоимостьЗаедБезНДС = бл.СебестоимостьБезНДС/бл.Количество; 
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого Стр из ТзПродажаДобавитьВСебест цикл     
		Отб = Новый Структура("Номер,Номенклатура",Стр.Номер,Стр.Номенклатура);
		бл1 = тзз1.НайтиСтроки(Отб);
		Если бл1 <>  неопределено и бл1.Количество() > 0 Тогда
			бл = бл1.Получить(0);
		КонецЕсли;
		Если бл = неопределено Тогда
			Для каждого сс из тзз1 цикл
				Если сс.Номер = Стр.Номер Тогда
					бл = сс;
					прервать;		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		бл.СебестоимостьБезНДС = бл.СебестоимостьБезНДС + Стр.СебестоимостьБезНДС;
		Если бл.Количество > 0 Тогда
			бл.СебестоимостьЗаедБезНДС = бл.СебестоимостьБезНДС/бл.Количество; 
		КонецЕсли;	
	КонецЦикла;
	
	//НачатьТранзакцию();
	СвернутьПриготовления(тзз3);
	СоздатьПриготовленияПодговленные(тзз3,Объект.АР_ОПЗСПрефикс,Объект.ДеньАР_ОПЗСПрефикс,1,Истина,"!Акт Реализации"); 		
	СоздатьАктыРеализации(тзз1,Объект.АР_ООРППрефикс,Объект.ДеньПрефикс,2);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьАктыРеализации(табз,префикс,ДеньПрефикс,порядок)
	
	Доки = табз.Скопировать();
	СоворачиватьПо = "Номер,Дата,Склад,ЮЛИНН,Комментарий";
	
	Если АналитикаДокументов = "По Документам" Тогда
		СоворачиватьПо = СоворачиватьПо + ",ТорговоеПредприятиеКод";	
	КонецЕсли;
	
	Если БезналичныеОплаты = "ПоСчету" Тогда 
		СоворачиватьПо = СоворачиватьПо + ",Движениеденежныхсредствкод";
	КонецЕсли;	
	
	Доки.Свернуть(СоворачиватьПо);
	Доки.Сортировать("Дата");
	СтарыйНомер = "";
	
	Для Каждого Стр из Доки Цикл
		Если Стр.Номер = СтарыйНомер тогда
			ДатаДокум = Стр.Дата;
			Сообщить("В iiko с номером " + СтарыйНомер + " от " + ДатаДокум + " имеется 2 акта реализации, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер = Стр.Номер;
		КонецЕсли;	
	КонецЦикла;	
	
	Для каждого Стр из Доки цикл
		номернаклиико = СокрЛП(Стр.Номер) + "!" + "Акт Реализации";          
		д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
		Если д.Количество() = 0 или не д[0].Выбор тогда
			Продолжить;
		КонецЕсли;	
			
		Отб = Новый Структура("Номер,Дата,Склад",Стр.Номер,Стр.Дата,Стр.Склад);
		НСтр = табз.НайтиСтроки(Отб);
		Дата = Стр.Дата;
		ДатаДокум = ПолучитьДату(Дата);
		НомерДокумента = НомерНакладной(Стр,Стр.Номер,Префикс,ДеньПрефикс,"Акт Реализации");
		Если НомерДокумента = Неопределено Тогда
			продолжить;
		КонецЕсли;
		
		
		Док = Документы.ОтчетОРозничныхПродажах.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Акт реализации № " + НомерДокумента + " от " + Док.Дата   + " существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		
		Если ОрганизацияИзДокумента = Истина тогда 
			Если Стр.ЮЛИНН = "" тогда 
				Сообщить ("Сопоставление не удалось: организация с ИНН " + Стр.ЮЛИНН + " не найдена");
				Продолжить;				
			Иначе
				Док.Организация = НайтиОгранизациюПоИНН(Стр.ЮЛИНН, Ложь);
			КонецЕсли;
		Иначе 
			Док.Организация = НайтиОгранизациюПоИНН(Стр.ЮЛИНН, Ложь);
		КонецЕсли;
		Док.Дата = ДатаДокум;
		//Получим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Истина;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;
		
		Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		Док.КурсДокумента = 1;
		Док.СуммаВключаетНДС = Истина;
		
		Заполнять = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", Док.Метаданные());
		Если Заполнять тогда 
			Док.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
		КонецЕсли;
		
		Док.СтатьяДвиженияДенежныхСредств = СтатьяДДС; 			
		Док.СчетКасса =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01"); 		
		Док.Склад = Стр.Склад;
		Док.Комментарий = Стр.Комментарий;
		
		
		Док.Товары.Очистить();
		Док.Оплата.Очистить();
		Док.Номер = НомерДокумента; 		
		
		ТабЧасть = Новый ТаблицаЗначений;
		Табчасть = Табз.Скопировать(НСтр);
		Табчасть.Свернуть("Номенклатура, СтавкаНДСсПродаж, Операция","СебестоимостьБезНДС, СуммаПродажиСНДС, СуммаНДССПродаж, Количество");
		Для каждого стрр из Табчасть Цикл 
			//Не гузим с 0 суммой {{
			Если Число(СокрЛП(стрр.Операция)) = 2 тогда
				Сумма_ = стрр.СебестоимостьБезНДС;
			Иначе	
				Сумма_ = стрр.СуммаПродажисНДС-стрр.СуммаНДСспродаж;
			КонецЕсли;
			Если Сумма_ = 0 Тогда Продолжить; КонецЕсли;
			//Не гузим с 0 суммой }}
			
			ОкрКоличество = Окр(стрр.Количество,3);
			Если ОкрКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;
			Стр2 = Док.Товары.Добавить();
			Стр2.Номенклатура = стрр.Номенклатура;
			Стр2.Количество = ОкрКоличество;
			СттНДС = Число(СокрЛП(Стрр.СтавкаНДСспродаж));
			
			Если не СуммовойУчет тогда 
				Если Число(СокрЛП(стрр.Операция)) = 2 тогда
					Стр2.Цена = стрр.СебестоимостьБезНДС/ОкрКоличество;
					Стр2.Сумма = стрр.СебестоимостьБезНДС;
					Стр2.СуммаНДС = 0;
					Стр2.Количество = ОкрКоличество;
				Иначе	
					Стр2.Цена = стрр.СуммаПродажисНДС/ОкрКоличество;
					Стр2.Сумма = стрр.СуммаПродажисНДС;
					Стр2.СуммаНДС = стрр.СуммаНДСспродаж;
					Стр2.Количество = ОкрКоличество;
				КонеЦЕсли;
			Иначе
				Если Число(СокрЛП(стрр.Операция)) = 2 тогда
					Стр2.Цена = 1;
					Стр2.Сумма = стрр.СуммаПродажисНДС;;
					Стр2.СуммаНДС = 0;
					Стр2.Количество = стрр.СебестоимостьБезНДС;
				Иначе	
					Стр2.Цена = 1;
					Стр2.Сумма = стрр.СуммаПродажисНДС;
					Стр2.СуммаНДС = стрр.СуммаНДСспродаж;
					Стр2.Количество = стрр.СебестоимостьБезНДС;
				КонеЦЕсли;
			КонецЕсли;
			//Считаем себестоимость в 1С
			Если СебестоимостьВ1С тогда 
				стрр.СебестоимостьБезНдс = 0;
			КонецЕсли;
			
			Стр2.СтавкаНДС =  ПолучитьСтавкуНДС(СттНДС,Стр2.Сумма,Стр2.СуммаНДС);
			Стр2.Себестоимость = стрр.Себестоимостьбезндс;
			Строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
			Если Строкк <>  неопределено тогда
				Если Укр = 0 Тогда
					Стр2.СчетУчета = Строкк.СчетУчета;
					Стр2.Субконто = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
					Стр2.СчетРасходов = Строкк.СчетРасходовОтРеализации;
					Стр2.СчетДоходов = Строкк.СчетДоходовОтРеализации;
					Стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
				КонецЕсли;
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;      		
		
		ВремяДокумента = Документы.ОтчетОРозничныхПродажах.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		
		Если Проводить тогда 
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);  
				Сообщить("Проведен" + " Акт реализации № " + Док.Номер + " от " + Док.Дата);
				Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док.Ссылка;
				СтрокаДоков = СписокДокументов.Добавить();
				СтрокаДоков.Док = Док.Ссылка;
				СтрокаДоков.Дата = Док.Дата;
				СтрокаДоков.Порядок = Порядок;			
			Исключение
				Сообщить("Не удалось провести Акт реализации № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		Иначе
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Запись);  
				Сообщить("Записан" + " Акт реализации № " + Док.Номер + " от " + Док.Дата);
				Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док.Ссылка;
				СтрокаДоков = СписокДокументов.Добавить();
				СтрокаДоков.Док = Док.Ссылка;
				СтрокаДоков.Дата = Док.Дата;
				СтрокаДоков.Порядок = Порядок;			
			Исключение
				Сообщить("Не удалось записать Акт реализации № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;     	
КонецПроцедуры	

&НаСервере
Процедура ОбработкаАктовСписания()
	//ОПЗС
	Тзз3=Новый ТаблицаЗначений;  
	Тзз3.Колонки.Добавить("Номер"); 
	Тзз3.Колонки.Добавить("Дата");
	Тзз3.Колонки.Добавить("Номенклатура"); 
	Тзз3.Колонки.Добавить("СкладСписания"); 
	Тзз3.Колонки.Добавить("СкладПрихода"); 
	Тзз3.Колонки.Добавить("СкладПодразделение"); 
	Тзз3.Колонки.Добавить("Количество");
	Тзз3.Колонки.Добавить("ЮЛнаименование");
	Тзз3.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз3.Колонки.Добавить("ЮЛИНН");
	Тзз3.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз3.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз3.Колонки.Добавить("ЗнакОперации");
	тзз3.Колонки.Добавить("Операция");
	Тзз3.Колонки.Добавить("Комментарий");
	//
	Тзз1=Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
	Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("Склад"); 
	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛОтправительнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СтавкаНДС");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз1.Колонки.Добавить("СтатьяРасходовИИКО");
	Тзз1.Колонки.Добавить("Комментарий");

	
	Тз6 = ПолучитьИзВременногоХранилища(АдресАС);
	
	Для каждого стрр из тз6 цикл
		стрр.Количество = Число(стрр.Количество);
		стрр.СебестоимостьБезНДС = Число(стрр.СебестоимостьБезНДС);
		стрр.СебестоимостьЗаедБезНДС = Число(стрр.СебестоимостьЗаедБезНДС);
		
		Если СокрЛП(Стрр.Операция)="1" тогда
			ОкрКоличество=Окр(стрр.Количество,3);
			//Если ОкрКоличество=0 Тогда
			//	Продолжить;
			//КонецЕсли;
			ххх=Тзз1.Добавить();
			ххх.Номер=стрр.НомерДок;
			Дата = Стрр.Дата;
			ххх.Дата = ПолучитьДату(Дата);
			ххх.Номенклатура=НайтиНоменклатуру(стрр.НКодИИКО, стрр.Ставкандс, стрр.ГруппаучетаНазвание).Номенклатура;
			ххх.Склад = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование",Стрр.СкладНаименование))[0].Склад;
			ххх.ЮЛОтправительнаименование=стрр.ЮЛнаименование;
			ххх.ТорговоеПредприятиеКод=стрр.ТорговоеПредприятиеКод;
			ххх.ЮЛИНН=стрр.ЮЛИнн;
			ххх.СтатьяРасходовИИКО = стрр.СтатьяРасходов;
			ххх.Количество=ОкрКоличество;
			ххх.СебестоимостьЗаедБезНДС=стрр.СебестоимостьЗаедБезНДС;
			ххх.СтавкаНДС=стрр.СтавкаНДС;
			ххх.СебестоимостьБезНДС=стрр.СебестоимостьБезНДС;
			Если Стрр.СебестоимостьбезНДС>0 Тогда
			Иначе
				Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в акте списания № "+стрр.НомерДок+" от "+стрр.Дата +
				" не задана себестоимость!!!");
			КонецЕсли;
		КонецЕсли;

		
		Если (СокрЛП(Стрр.ТипСписания)="2")или(СокрЛП(Стрр.Операция)="2")  тогда  
			Если Стрр.Количество>0 Тогда
				Если  (стрр.СебестоимостьзаедбезНДС)=0 тогда
					Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в акте списания № "+стрр.НомерДок+" от "+стрр.Дата +
					" не задана себестоимость!!!");
				КонецЕсли;	
				Стр=тзз3.Добавить();
				Дата = Стрр.Дата;
				Стр.Дата=ПолучитьДату(Дата);
				Стр.Номер=стрр.НомерДок;
				скл = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стрр.СкладНаименование));
				Стр.СкладСписания=скл[0].Склад;
				Стр.СкладПрихода=скл[0].Склад;
				Стр.СкладПодразделение=скл[0].Подразделение;
				Если СокрЛП(Стрр.ТипСписания)="2" тогда 
					Стр.Знакоперации=1;
					Стр.СебестоимостьбезНДС=стрр.СебестоимостьбезНДС;
					Стр.СебестоимостьзаедбезНДС=стрр.СебестоимостьзаедбезНДС;
				Иначе	
					Стр.Знакоперации=2;
					Стр.СебестоимостьзаедбезНДС=стрр.СебестоимостьзаедбезНДС;
					Стр.СебестоимостьбезНДС=стрр.СебестоимостьбезНДС;
				КонецЕсли;	
				Стр.Номенклатура=НайтиНоменклатуру(стрр.НКодИИКО, стрр.Ставкандс, стрр.ГруппаучетаНазвание).Номенклатура;
				Стр.Количество=стрр.Количество;
				Стр.Торговоепредприятиекод=стрр.Торговоепредприятиекод;
				Стр.ЮЛИНН=ИсправленныйЮЛИНН(стрр.ЮЛИНН);
				Стр.ЮЛнаименование=стрр.ЮЛнаименование;
			Иначе
				Сообщить("Для номенклатуры "+стрр.ННаименованиеИИКО+" в акте списания № "+стрр.НомерДок+" от "+стрр.Дата +
				" не задано количество!!!");
			КонецЕсли;
		КонецЕсли;

	 КонецЦикла;
	СвернутьПриготовления(тзз3);
	СоздатьПриготовлениеСписания(тзз3,Объект.ДеньАС_ОПЗСПрефикс,Объект.ДеньАС_ОПЗСПрефикс,1, Истина,"Акт Списания");
			
	СоздатьАктыСписания(тзз1,Объект.АС_СТПрефикс,2);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьАктыСписания(строки,префикс,порядок)
	
	Доки=строки.Скопировать();
	Доки.Свернуть("Номер,Дата,Склад,ТорговоеПредприятиеКод,ЮЛИНН, СтатьяРасходовИИКО,ЮЛОтправительнаименование");
	
	СтарыйНомер="";
	ПрошлыйЮЛ = "";
	Для каждого докСтр из Доки цикл
		номернаклиико=СокрЛП(докСтр.Номер)+"!"+"Акт Списания";
		Если (докСтр.Номер = СтарыйНомер) и (ДокСТр.ЮЛОтправительнаименование = ПрошлыйЮЛ)тогда
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+докСтр.Дата+" имеется 2 документа Требование-накладная, либо используется 2 склада!");
			Продолжить;
		Иначе
			СтарыйНомер=докСтр.Номер;
			ПрошлыйЮЛ = ДокСтр.ЮЛОтправительнаименование;
		КонецЕсли;
		д=Объект.Докум.НайтиСтроки(Новый Структура("Документ",номернаклиико));
		Если д.Количество() = 0 или не д[0].Выбор тогда
			Продолжить;
		КонецЕсли;
		
		НомерДокумента=НомерНакладной(докСтр,докСтр.Номер,Префикс,Объект.ДеньПрефикс,"Акт Списания");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли; 		
		
		Док = Документы.ТребованиеНакладная.НайтиПоНомеру(НомерДокумента,докСтр.Дата);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ТребованиеНакладная.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Требование-накладная № "+НомерДокумента+" от "+докСтр.Дата+" существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		
		//Шапка документа
		Док.Организация=НайтиОгранизациюПоИНН(ИсправленныйЮЛИНН(СокрЛП(докСтр.ЮЛИНН)), истина);
		Док.Дата = докСтр.Дата;
		//Получим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Истина;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;
		Док.Номер = НомерДокумента;
		Док.Склад = докСтр.Склад;
		Док.ПодразделениеЗатрат = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;;
		Док.ПодразделениеОрганизации = Док.ПодразделениеЗатрат;

		//Настройка списания
		Док.СчетаУчетаЗатратВТаблице = Ложь;
				//Настройка НДС
		Если НДСВСтоимости тогда 		
			Док.НДСВСтоимостиТоваров = перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
		Иначе
			Док.НДСВСтоимостиТоваров = перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
		КонецЕсли;
		
		Док.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = Истина;
		
		Отб = Новый Структура("Номер",докСтр.Номер);
		НСтр = строки.НайтиСтроки(Отб);	
		Док.СчетЗатрат = Объект.Статьи.НайтиСТроки(Новый Структура("СтатьяРасходовИИКО", НСтр[0].СтатьяРасходовИИКО))[0].СчетЗатрат1С;
		
		КолСубконто=ПланыСчетов.Хозрасчетный.НайтиПоКоду(Док.СчетЗатрат.Код).ВидыСубконто.Количество();
		Если КолСубконто=1 Тогда
			Док.Субконто1 = Объект.Статьи.НайтиСТроки(Новый Структура("СтатьяРасходовИИКО", НСтр[0].СтатьяРасходовИИКО))[0].СтатьяЗатрат1С; 
		ИначеЕСли КолСубконто=2 Тогда
			Док.Субконто1 = Объект.Статьи.НайтиСТроки(Новый Структура("СтатьяРасходовИИКО", НСтр[0].СтатьяРасходовИИКО))[0].СтатьяЗатрат1С;//Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Основная номенклатурная группа");
			//Док.Субконто2 =Объект.Статьи.НайтиСТроки(Новый Структура("СтатьяРасходовИИКО", НСтр[0].СтатьяРасходовИИКО))[0].СтатьяЗатрат1С;
		КонецЕСли;
		
		ТабЧасть = Новый ТаблицаЗначений;
		Табчасть = Строки.Скопировать(НСтр);
		Табчасть.Свернуть("Номенклатура","СебестоимостьБезНДС, Количество");
		
		// Позиции документа
		Док.Материалы.Очистить();     			
		Для каждого стрр из Табчасть Цикл
			Если стрр.Количество=0 Тогда
				Продолжить;
			КонецЕсли;
			стр2 = Док.Материалы.Добавить();
			стр2.Номенклатура = стрр.Номенклатура;
			стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
			Если не СуммовойУчет тогда 
				стр2.Количество = стрр.Количество;
			Иначе
				стр2.Количество = стрр.Себестоимостьбезндс;;
			КонецЕсли;
			
			//Считаем себестоимость в 1С
			Если СебестоимостьВ1С тогда 
				стрр.СебестоимостьБезНДС = 0;
			КонецЕсли;
			
			стр2.Себестоимость = стрр.СебестоимостьБезНДС;
			Стр2.ПодразделениеЗатрат = Док.ПодразделениеЗатрат;
			стр2.Коэффициент = 1;			
			Стр2.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(Стрр.Номенклатура);
			
			строкк = НайтиСчетаДляНоменклатуры(стр2.Номенклатура,ТаблицаЗапроса,Док.Склад);
			Если строкк <> неопределено тогда
				стр2.Счет = строкк.СчетУчета;				
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + стр2.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;
		//СохранитьДокумент1С(Док, "Акт списания", Порядок, номернаклиико);
		ВремяДокумента = Документы.ТребованиеНакладная.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		Если Не Проводить тогда 
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Запись);  
				Сообщить("Записан документ Требование-накладная № "+Док.Номер+" от "+Док.Дата);
				
				СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));			
				Если СтрокиДокумента.Количество() <> 0 тогда 
					СтрокиДокумента[0].Док = Док.Ссылка;					
				КонецЕсли;
				
			Исключение
				Сообщить("Не удалось записать документ Требование-накладная № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
		Иначе
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);  
				Сообщить("Проведен документ Требование-накладная № "+Док.Номер+" от "+Док.Дата);			
				СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
				
				Если СтрокиДокумента.Количество() <> 0 тогда 
					СтрокиДокумента[0].Док = Док.Ссылка;					
				КонецЕсли;
				
			Исключение
				Сообщить("Не удалось провести документ Требование-накладная № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;    
		КонецЕсли;       	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВозвратныеНакладные(табз,префикс,ДеньПрефикс,порядок)
	Табз = ПолучитьИзВременногоХранилища(АдресВН);
	Доки = табз.Скопировать();			
	
	Доки.Свернуть("НомерДок,Дата,КкодИИКО,ЮЛнаименование,СкладНаименование,СчетФактура,ПриходнаяНакладнаяНомер,ПриходнаяНакладнаяДата,Торговоепредприятиекод,ЮЛИНН");
	Доки.Сортировать("Дата");
	СтарыйНомер = "";
	
	Для Каждого Стр из Доки Цикл
		Если Стр.НомерДок = СтарыйНомер тогда
			ДатаДокум = Стр.Дата;
			Сообщить("В iiko с номером " + СтарыйНомер + " от " + ДатаДокум + " имеется 2 накладные, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер = Стр.НомерДок;
		КонецЕсли;	
	КонецЦикла;	
	
	Для каждого Стр из Доки цикл
		номернаклиико = СокрЛП(Стр.НомерДок) + "!" + "Возвратная Накладная";
		д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
		Если д.Количество() = 0 или не д[0].Выбор тогда
			Продолжить;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Юрлицо) тогда
			Если Стр.ЮЛнаименование <>  Юрлицо тогда
				Продолжить;
			КонецЕСли;
		КонецЕСли;	
		Отб = Новый Структура("НомерДок,Дата,СкладНаименование",Стр.НомерДок,Стр.Дата,Стр.СкладНаименование);
		НСтр = табз.НайтиСтроки(Отб);
		Дата = Стр.Дата;
		ДатаДокум = ПолучитьДату(Дата); 
		НомерДокумента = НомерНакладной(Стр,Стр.НомерДок,Префикс,ДеньПрефикс,"Возвратная Накладная");
		Если НомерДокумента = Неопределено Тогда
			продолжить;
		КонецЕсли;
		Док = Документы.ВозвратТоваровПоставщику.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Возвратная накладная № " + Стр.НомерДок + " от " + Стр.Дата + " существует!");
				Продолжить
			КОнецЕсли;
		КОнецЕсли;
		Если ОрганизацияИзДокумента = Истина тогда 
			Если Стр.ЮЛИНН = "" тогда 
				Сообщить ("Сопоставление не удалось: организация с ИНН " + Стр.ЮЛИНН + " не найдена");
				Продолжить;				
			Иначе
				Док.Организация = НайтиОгранизациюПоИНН(Стр.ЮЛИНН, Ложь);
			КонецЕсли;
		Иначе 
			Док.Организация = НайтиОгранизациюПоИНН(Стр.ЮЛИНН, Ложь);
		КонецЕсли;
		Док.Дата = ДатаДокум;
		Док.Номер = НомерДокумента;
		//Получим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Истина;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;
		
		Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		Док.КурсВзаиморасчетов = 1;
		Док.КратностьВзаиморасчетов = 1;
		Док.СуммаВключаетНДС = УчитыватьНДС;
		Док.НДСВключенВСтоимость = НДСВСтоимости;		
		
		Заполнять = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", Док.Метаданные());
		Если Заполнять тогда 
			Док.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия; 
		иначе  			
		КонецЕсли;

		Контр = Объект.Контрагенты.НайтиСтроки(Новый Структура("КкодИИКО", Стр.КкодИИКО));
		Док.Контрагент = Контр[0].Контрагент;
		
				
		Док.ДоговорКонтрагента = НайтиДоговор(Док.Организация, Док.Контрагент,		
		Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "Основной договор");
		НомНак = НомерНакладной(Стр,Стр.ПриходнаяНакладнаяНомер,Префикс,ДеньПрефикс,"Возвратная Накладная");
		
		Если НомНак = Неопределено Тогда
			продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Стр.Приходнаянакладнаядата) тогда
			Док.Сделка = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(НомНак);
		Иначе
			Док.Сделка = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(НомНак,ПолучитьДату(Стр.Приходнаянакладнаядата));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Док.Сделка) тогда
			Сообщить("Не найдена накладная № " + НомНак + "от " +  Стр.Приходнаянакладнаядата + " для возвратной накладной № " + Стр.НомерДок + " от " + Стр.Дата);
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
			Сообщить("У контрагента " + Док.Контрагент + " не заполнен основной договор! Возвратная накладная № " + СокрЛП(Док.Номер) + " от " + ДатаДокум + " проведена не будет");
		КОнецЕсли;
		
		Склл = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", СокрЛП(Стр.СкладНаименование)));
		
		Если ЗначениеЗаполнено(Склл) тогда
			Док.Склад = Склл[0].Склад;
			Док.ПодразделениеОрганизации = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;
		КонецЕСли;	
		
		Док.Товары.Очистить();
		
		
		// ALEXV: TODO: Брать из справочника "Счета учета расчетов с контрагентами
		СтрокиК = ТаблицаЗапросаК.НайтиСтроки(Новый Структура("Контрагент",Док.Контрагент));
		Если СтрокиК.Количество() = 0 Тогда 
			Док.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
			//Док.СчетУчетаРасчетовПоАвансам=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");
		Иначе 
			Док.СчетУчетаРасчетовСКонтрагентом=СтрокиК.Хозрасчетный.СчетУчетаРасчетовСПоставщиком;
			//Док.СчетУчетаРасчетовПоАвансам=СтрокиК.Хозрасчетный.СчетУчетаАвансовВыданных;
		КонецЕсли;
		Док.СчетУчетаРасчетовПоПретензиям = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.02");//Док.СчетУчетаРасчетовСКонтрагентом;
		
		ТабЧасть = Новый ТаблицаЗначений;
		Табчасть = Табз.Скопировать(НСтр);
		Табчасть.Свернуть("НКодИИКО,ННаименованиеИИКО,СтавкаНДСспродаж,СтавкаНДС,ГруппаУчетаНазвание","СуммаПродажисНДС,СуммаНДСспродаж,Количество");
		
		Для каждого стрр из Табчасть Цикл 
			Ном = НайтиНоменклатуру(стрр.НКодИИКО, стрр.Ставкандс, стрр.ГруппаучетаНазвание);
			ОкрКоличество = Окр(стрр.Количество,3);
			Если ОкрКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;
			Стр2 = Док.Товары.Добавить();
			Стр2.Номенклатура = ном.Номенклатура;
			Стр2.ЕдиницаИзмерения = Стр2.Номенклатура.ЕдиницаИзмерения;
			Стр2.Коэффициент = 1;
			Если не СуммовойУчет тогда 
				Стр2.Количество = ОкрКоличество; 						
				Стр2.Цена = стрр.СуммапродажисНДС/ОкрКоличество;
				Стр2.Сумма = стрр.СуммапродажисНДС;
				Стр2.СуммаНДС = стрр.СуммаНДСспродаж;
			Иначе
				Стр2.Количество = стрр.СуммапродажисНДС - стрр.СуммаНДСспродаж; 						
				Стр2.Цена = 1;
				Стр2.Сумма = стрр.СуммапродажисНДС;
				Стр2.СуммаНДС = стрр.СуммаНДСспродаж;
			КОнецЕсли;
		
			СттНДС = Число(СокрЛП(Стрр.СтавкаНДСспродаж));
			Стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,Стр2.Сумма,Стр2.СуммаНДС);
			Строкк = НайтиСчетаДляНоменклатуры(ном.Номенклатура,ТаблицаЗапроса,Док.Склад);			
			Если Строкк <>  неопределено тогда				
				Стр2.СчетУчетаНДС = Строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
				Стр2.СчетУчета = Строкк.СчетУчета;			
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + ном.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецЦикла;		
		
		ВремяДокумента = Документы.ВозвратТоваровПоставщику.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		
		Если НЕ Проводить тогда 
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Запись);  
				Сообщить("Записан" + "а накладная № " + Док.Номер + " от " + Док.Дата);
				Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док.Ссылка;
				СтрокаДоков = СписокДокументов.Добавить();
				СтрокаДоков.Док = Док.Ссылка;
				СтрокаДоков.Дата = Док.Дата;
				СтрокаДоков.Порядок = Порядок;
			Исключение
				Сообщить("Не удалось записать накладную № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
		Иначе
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);  
				Сообщить("Проведен" + "а накладная № " + Док.Номер + " от " + Док.Дата);
				Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док.Ссылка;
				СтрокаДоков = СписокДокументов.Добавить();
				СтрокаДоков.Док = Док.Ссылка;
				СтрокаДоков.Дата = Док.Дата;
				СтрокаДоков.Порядок = Порядок;
			Исключение
				Сообщить("Не удалось провести накладную № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла; 	
КонецПроцедуры	

&НаСервере
Функция ПолучитьСчетУчетаБУ(Док, Строкк)
	
	Если ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		Если Док.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Возврат Строкк.СчетУчетаЗабалансовыйБУ;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Строкк.СчетУчетаБУ;
	
КонецФункции

&НаСервере
Процедура СоздатьИнвентаризации(табз,префикс,порядок)
	
	Табз = ПолучитьИзВременногоХранилища(АдресИН);
	Доки = табз.Скопировать();
	//Доки.Колонки.Добавить("Наименование1С");
    ЗапускБЫЛ = ПолучитьИзВременногоХранилища(АдресЗапуска);
	
	Доки.Свернуть("НомерДок,Дата,ЮЛнаименование,СкладНаименование,Торговоепредприятиекод,ЮЛИНН");
	Доки.Сортировать("Дата");
	СтарыйНомер = "";
	
	Для Каждого Стр из Доки Цикл
		Если Стр.НомерДок = СтарыйНомер тогда
			ДатаДокум = Стр.Дата;
			Сообщить("В iiko с номером " + СтарыйНомер + " от " + ДатаДокум + " имеется 2 инвентаризации, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер = Стр.НомерДок;
		КонецЕсли;	
	КонецЦикла;	
	
	Для каждого Стр из Доки цикл
		
		номернаклиико = СокрЛП(Стр.НомерДок) + "!" + "Инвентаризация";
		д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
		Если д.Количество() = 0 или не д[0].Выбор тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Юрлицо) тогда
			Если Стр.ЮЛнаименование <>  Юрлицо тогда
				Продолжить;
			КонецЕСли;
		КонецЕСли;	
		
		Отб = Новый Структура("НомерДок,Дата,Складнаименование",Стр.НомерДок,Стр.Дата,Стр.Складнаименование);
		НСтр = табз.НайтиСтроки(Отб);
		Дата = Стр.Дата;
		ДатаДокум = ПолучитьДату(Дата);
		НомерДокумента = НомерНакладной(Стр,Стр.НомерДок,Префикс,Объект.ДеньПрефикс,"Инвентаризация");
		Если НомерДокумента = Неопределено Тогда
			продолжить;
		КонецЕсли;
		
		Док = Документы.ИнвентаризацияТоваровНаСкладе.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ИнвентаризацияТоваровНаСкладе.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Инвентаризация № " + Док.Номер + " от " + Док.Дата   + " существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		
		Если ОрганизацияИзДокумента = Истина тогда 
			Если Стр.ЮЛИНН = "" тогда 
				Сообщить ("Сопоставление не удалось: организация с ИНН " + Стр.ЮЛИНН + " не найдена");
				Продолжить;				
			Иначе
				Док.Организация = НайтиОгранизациюПоИНН(Стр.ЮЛИНН, Ложь);
			КонецЕсли;
		Иначе 
			Док.Организация = НайтиОгранизациюПоИНН(Стр.ЮЛИНН, Ложь);
		КонецЕсли;
		
		
		Док.Дата = ДатаДокум;
		Док.Номер = НомерДокумента;
		//НужныйСклад = Справочники.Склады.НайтиПоНаименованию(СокрЛП(Стр.СкладНаименование));
		Склл = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стр.СкладНаименование));
		Если ЗначениеЗаполнено(Склл) тогда
			Док.Склад = Склл[0].Склад;
		КонецЕСли;
		Док.Товары.Очистить();
		Для каждого стрр из НСтр Цикл 
			//Если стрр.ИзлишкиНедостачаСумма = 0 Тогда 
			//	Продолжить;
			//КонецЕсли;
			Ном = НайтиНоменклатуру(стрр.НКодИИКО, стрр.Ставкандс, стрр.ГруппаучетаНазвание);
			ОкрКоличество = Окр(стрр.ИзлишкиНедостачаКоличество,3);
			Стр2 = Док.Товары.Добавить();
			Стр2.Номенклатура = ном.Номенклатура;
			Стр2.Цена = стрр.СебестоимостьзаедБезНДС;
			Если Стр2.Цена = 0 тогда
				Стр2.Цена = 0.01;
			Иначе
				//Стр2.Сумма = стрр.СебестоимостьБезНДС;
			КонецЕСли;	
			Строкк = НайтиСчетаДляНоменклатуры(ном.Номенклатура,ТаблицаЗапроса,Док.Склад);
			
			Если Строкк <>  неопределено тогда
				счетУчета = Строкк.СчетУчета;
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + ном.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;
			
			КолСубконто = ПланыСчетов.Хозрасчетный.НайтиПоКоду(счетУчета.Код).ВидыСубконто.Количество();
			Если КолСубконто=1 Тогда
				Отбор=Новый Структура ("Субконто1,Организация,Счет",стр2.Номенклатура,Док.Организация,счетУчета);
			ИначеЕСли КолСубконто=2 Тогда
				Отбор=Новый Структура ("Субконто1,Субконто2,Организация,Счет",стр2.Номенклатура,Док.Склад,Док.Организация,счетУчета);
			Иначе
				Если ПланыСчетов.Хозрасчетный.НайтиПоКоду(счетУчета.Код).ВидыСубконто[1].ВидСубконто.Наименование = "Склады" тогда 
					Отбор=Новый Структура ("Субконто1,Субконто2,Организация,Счет",стр2.Номенклатура,Док.Склад,Док.Организация,счетУчета);
				Иначе
					Отбор=Новый Структура ("Субконто1,Субконто3,Организация,Счет",стр2.Номенклатура,Док.Склад,Док.Организация,счетУчета);
				КонецЕсли; 			
			КонецЕСли;	

			Тостатки = РегистрыБухгалтерии.Хозрасчетный.Остатки(Док.Дата,,Отбор,,"Сумма,Количество");
			Стр2.КоличествоУчет = 0;
			Стр2.СуммаУчет = 0;
			Стр2.СчетУчета = СчетУчета;
			ТОстатки.Свернуть("Субконто1","КоличествоОстатокДТ, СуммаОстатокДТ"); 
			Если не СуммовойУчет тогда 
				Если Тостатки.Количество()>0 Тогда
					Стр2.КоличествоУчет=Тостатки[0].КоличествоОстатокДТ;
					Стр2.СуммаУчет=Тостатки[0].СуммаОстатокДТ;
					стр2.Количество = стрр.Количество; 				
					Если Стр2.КоличествоУчет <> 0 тогда 
						Стр2.Цена = Стр2.СуммаУчет / Стр2.КоличествоУчет;
						стр2.Сумма = стр2.Количество * Стр2.Цена;
					КонецЕсли;
				Иначе
					стр2.Количество = стрр.Количество;
					Стр2.Цена = Стрр.СебестоимостьЗаЕдБезНДС;
				КонецЕсли;	 	
			Иначе
				Если Тостатки.Количество() > 0 Тогда					
					Стр2.СуммаУчет = Тостатки[0].СуммаОстатокДТ;
					Стр2.КоличествоУчет = Стр2.СуммаУчет; 					
					Стр2.Сумма = Стрр.СебестоимостьБезНДС;
					Стр2.Количество = Стрр.СебестоимостьБезНДС;
					Стр2.Цена = 1;
				Иначе
					Стр2.Сумма = стрр.СебестоимостьБезНДС;
					Стр2.Количество =  Стрр.СебестоимостьБезНДС;
					Стр2.Цена = 1;
				КонецЕсли;	 				
			КонецЕсли;
		КонецЦикла;
		
		//Если СуммовойУчет тогда 
		//	   Док.Товары.Свернуть("Номенклатура,СчетУчета,КоличествоУчет,СуммаУчет","Количество,Сумма");
		//   иначе
		//	    Док.Товары.Свернуть("Номенклатура,СчетУчета,Цена,КоличествоУчет,СуммаУчет","Количество,Сумма");
		//КонецЕсли;
		
		ВремяДокумента = Документы.ИнвентаризацияТоваровНаСкладе.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		
		Если Проводить тогда 
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение); 
				Сообщить("Проведена Инвентаризация № " + Док.Номер + " от " + Док.Дата);
				Объект.Докум.НайтиСтроки(Новый Структура("Документ",номернаклиико))[0].Док = Док.Ссылка;
				//СтрокаДоков = СписокДокументов.Добавить();
				//СтрокаДоков.Док = Док.Ссылка;
				//СтрокаДоков.Дата = Док.Дата;
				//СтрокаДоков.Порядок = Порядок;
				СоздатьСписаниеНаОснованииИнвентаризации(Док, Стр, номернаклиико, порядок);
				СоздатьОприходываниеНаОснованииИнвентаризации(Док, Стр, номернаклиико, порядок);
			Исключение
				Сообщить("Не удалось провести Инвентаризацию № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		Иначе
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Запись); 
				Сообщить("Записана Инвентаризация № " + Док.Номер + " от " + Док.Дата);
				Объект.Докум.НайтиСтроки(Новый Структура("Документ",номернаклиико))[0].Док = Док.Ссылка;
				//СтрокаДоков = СписокДокументов.Добавить();
				//СтрокаДоков.Док = Док.Ссылка;
				//СтрокаДоков.Дата = Док.Дата;
				//СтрокаДоков.Порядок = Порядок;
				СоздатьСписаниеНаОснованииИнвентаризации(Док, Стр, номернаклиико, порядок);
				СоздатьОприходываниеНаОснованииИнвентаризации(Док, Стр, номернаклиико, порядок);
			Исключение
				Сообщить("Не удалось записать Инвентаризацию № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;

		КонецЕсли;
	КонецЦикла;
	
	АдресЗапуска = ПоместитьВоВременноеХранилище(ЗапускБЫЛ, УИДФормы);
КонецПроцедуры	

&НаСервере
Процедура СоздатьСписаниеНаОснованииИнвентаризации(ДокИнв, докСтр, номерБазовый, порядок)
	
	НомерДокумента = ДокИнв.Номер; 	
	
	Нужно = Ложь;
	Для каждого СТр из ДокИнв.Товары цикл
		Если (Стр.КоличествоУчет - Стр.Количество) > 0 тогда
			Нужно = Истина;
			Прервать;
		Иначе	
			Нужно = Ложь;
		КонецЕсли; 		
	КонецЦикла;
	
	Если Нужно тогда
		Док = Документы.СписаниеТоваров.НайтиПоНомеру(НомерДокумента,ДокИнв.Дата);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.СписаниеТоваров.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("СписаниеТоваров № " + НомерДокумента + " от " + ДокИнв.Дата + " существует!");
				Возврат;					
			КОнецЕсли;
		КОнецЕсли;
		
		// Шапка документа
		
		Заполнять = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", Док.Метаданные());
		
		Если Заполнять тогда 
			Док.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;
		иначе
			
		КонецЕсли;
		
		Док.Организация = НайтиОгранизациюПоИНН(ИсправленныйЮЛИНН(СокрЛП(докСтр.ЮЛИНН)), Истина);
		Док.Дата = докСтр.Дата;	
		Док.Номер = НомерДокумента;
		Док.Склад = ДокИнв.Склад;
		Док.ПодразделениеОрганизации = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;
		Док.Основание = "Инвентаризация " + ДокИнв.Номер;
		Док.ИнвентаризацияТоваровНаСкладе = ДокИнв.Ссылка;
		
		
		Док.Товары.Очистить();	
		Для каждого Стр из ДокИнв.Товары цикл  		
			Если (Стр.КоличествоУчет - Стр.Количество) > 0 тогда 
				Стр2 = Док.Товары.Добавить();
				Стр2.Номенклатура = Стр.Номенклатура;	
				Стр2.Количество = (Стр.КоличествоУчет - Стр.Количество);
				Стр2.Себестоимость = Стр2.Количество * Стр.Цена;
				Стр2.СчетУчета = Стр.СчетУчета; 
			КонецЕсли;          		
		КонецЦикла;
		
		ВремяДокумента = Документы.СписаниеТоваров.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		
		Если Проводить тогда 
			Попытка
				Док.Записать(РежимЗаписиДокумента.Проведение); 
				Сообщить("Проведено Списание товаров на основании Инвентаризация № " + Док.Номер + " от " + Док.Дата);
				Элементы.ДокумДок2.Видимость = Истина;
				СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, Дата", номерБазовый, НачалоДня(Док.Дата)));
				
				Если СтрокиДокумента.Количество() <> 0 тогда 
					СтрокиДокумента[0].Док2 = Док.Ссылка;
					НужнаКолонка = Истина;
				КонецЕсли;
			Исключение
				Сообщить("Не удалось провести Списание товаров на основании Инвентаризация № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		Иначе
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись); 
				Сообщить("Записано Списание товаров на основании Инвентаризация № " + Док.Номер + " от " + Док.Дата);
				Элементы.ДокумДок2.Видимость = Истина;
				СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, Дата", номерБазовый, НачалоДня(Док.Дата)));
				
				Если СтрокиДокумента.Количество() <> 0 тогда 
					СтрокиДокумента[0].Док2 = Док.Ссылка;
					НужнаКолонка = Истина;
				КонецЕсли;
			Исключение
				Сообщить("Не удалось записать Списание товаров на основании Инвентаризация № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
		КонецЕсли;
 КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьОприходываниеНаОснованииИнвентаризации(ДокИнв, докСтр, номерБазовый, порядок)
	
	НомерДокумента = ДокИнв.Номер;
	Док = Документы.ОприходованиеТоваров.НайтиПоНомеру(НомерДокумента,ДокИнв.Дата);
	
	Для каждого СТр из ДокИнв.Товары цикл
		Если (Стр.КоличествоУчет - Стр.Количество) < 0 тогда
			Нужно = Истина;
			Прервать;
		Иначе	
			Нужно = Ложь;
		КонецЕсли; 		
	КонецЦикла;       	
	
	Если Нужно тогда 
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ОприходованиеТоваров.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("ОприходованиеТоваров № " + НомерДокумента + " от " + ДокИнв.Дата + " существует!");
				Возврат;					
			КОнецЕсли;
		КОнецЕсли;
		
		// Шапка документа
		Док.Организация = НайтиОгранизациюПоИНН(ИсправленныйЮЛИНН(СокрЛП(докСтр.ЮЛИНН)), Истина);
		Док.Дата = докСтр.Дата;
		Док.Номер = НомерДокумента;
		Док.Склад = ДокИнв.Склад;
		Док.ПодразделениеОрганизации = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;
		Док.Основание = "Инвентаризация " + ДокИнв.Номер;
		Док.ИнвентаризацияТоваровНаСкладе = ДокИнв.Ссылка;
		Док.СтатьяПрочихДоходовРасходов = СтатьиПрочихДоходовИРасходов;
		
		Док.Товары.Очистить();
		
		Для каждого Стр из ДокИнв.Товары цикл
			Если (Стр.КоличествоУчет - Стр.Количество) < 0 тогда
				Стр2 = Док.Товары.Добавить();
				Стр2.Номенклатура = Стр.Номенклатура;
				Стр2.Количество = - (Стр.КоличествоУчет - Стр.Количество); 			
				Стр2.Цена = Стр.Цена;
				Стр2.Сумма = Стр2.Количество * Стр2.Цена;
				Стр2.СчетУчета = Стр.СчетУчета;
			КонецЕсли;		
		КонецЦикла;
		
		ВремяДокумента = Документы.ОприходованиеТоваров.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		
		Если Проводить тогда
			Попытка
				Док.Записать(РежимЗаписиДокумента.Проведение); 
				Сообщить("Проведено Оприходование товаров на основании Инвентаризация № " + Док.Номер + " от " + Док.Дата);
				Элементы.ДокумДок3.Видимость = Истина;
				СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, Дата", номерБазовый, НачалоДня(Док.Дата)));				
				Если СтрокиДокумента.Количество() <> 0 тогда 
					СтрокиДокумента[0].Док3 = Док.Ссылка;
					НужнаКолонка = Истина;
				КонецЕсли;  				
			Исключение
				Сообщить("Не удалось провести Оприходование товаров  на основании Инвентаризация № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				Док.Записать(РежимЗаписиДокумента.Запись); 
			КонецПопытки;
		Иначе
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись); 
				Сообщить("Записано Оприходование товаров на основании Инвентаризация № " + Док.Номер + " от " + Док.Дата);
				Элементы.ДокумДок3.Видимость = Истина;
				СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, Дата", номерБазовый, НачалоДня(Док.Дата))); 				
				Если СтрокиДокумента.Количество() <> 0 тогда 
					СтрокиДокумента[0].Док3 = Док.Ссылка;
					НужнаКолонка = Истина;  
				КонецЕсли; 				
			Исключение
				Сообщить("Не удалось записать Оприходование товаров на основании Инвентаризация № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки; 
		КонецЕсли; 		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура СоздатьПереработки(табз,префикс,ДеньПрефикс,порядок, БазовыйДокумент)
	
	строки = ПодготовитьАктПереработки(табз);
	Если строки = неопределено тогда
		возврат;
	КонецЕсли;
	
	Доки = строки.Скопировать();
	Доки2 = строки.Скопировать();
	Доки.Свернуть("Номер,Дата,ЮЛнаименование,ЮЛИНН,ЮЛнаименование,ТорговоеПредприятиеКод");
	Доки2.Свернуть("Номер,Дата,СкладСписания,СкладПрихода,ЮЛнаименование,ЮЛИНН,ТорговоеПредприятиеКод");	
	
	СтарыйНомер="";
	Для каждого докСтр из Доки цикл
		номернаклиико=СокрЛП(докСтр.Номер)+"!"+"Акт Переработки";
		
		Если ПустаяСтрока(базовыйДокумент) Тогда
			д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
			Если д.Количество() = 0 или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;	
		Иначе
			номерБазовый = СокрЛП(ДокСтр.Номер)+"!" + базовыйДокумент;
			д = Объект.Докум.НайтиСТроки(Новый Структура("Документ", номерБазовый));
			Если д.Количество() = 0 или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если докСтр.Номер=СтарыйНомер тогда
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+докСтр.Дата+" имеется 2 Акта Пераработки, либо используется 2 склада!");
			Продолжить;
		Иначе
			СтарыйНомер=докСтр.Номер;
		КонецЕсли;
		
		НомерДокумента=НомерНакладной(докСтр,докСтр.Номер,Префикс,ДеньПрефикс,"Акт Переработки");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		Док = Документы.ОтчетПроизводстваЗаСмену.НайтиПоНомеру(НомерДокумента,докСтр.Дата);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Отчет производства за смену № "+Док.Номер+" от "+Док.Дата+" существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		
		// Шапка документа
		Док.Дата = докСтр.Дата - 600;
		Док.Организация=НайтиОгранизациюПоИНН(ИсправленныйЮЛИНН(СокрЛП(докСтр.ЮЛИНН)), истина);
					
		//Поулчим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Истина;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;     		
		Док.СчетЗатрат= ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");
		Док.НДСвСтоимостиТоваров = НДСвСтоимости;
		Док.Номер = НомерДокумента;
		
		//Заполнение склада
		Отбор = Новый Структура("Номер, Дата, ЗнакОперации", ДокСтр.Номер, докСтр.Дата, Число("2"));		
		Нашли = Строки.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(Нашли) тогда
			Док.Склад = Нашли[0].СкладСписания;
			Док.ПодразделениеЗатрат = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;
		КонецЕсли;

		
		// Позиции документа
		Док.Продукция.Очистить();
		Док.Материалы.Очистить();
		Отб = Новый Структура("Номер",докСтр.Номер);
		НСтр = строки.НайтиСтроки(Отб);
		ТабЧасть = Новый ТаблицаЗначений;
		Табчасть = Строки.Скопировать(НСтр);
		Табчасть.Свернуть("Номенклатура, ЗнакОперации","СебестоимостьБезНДС, Количество");
		Для каждого стрр из Табчасть Цикл
			Если СокрЛП(стрр.ЗнакОперации)="1" Тогда
				стр2 = Док.Продукция.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;				
				стр2.Коэффициент = 1;
				стр2.ПлановаяСтоимость = стрр.СебестоимостьБезНДС/Стрр.Количество;
				Если Стр2.ПлановаяСтоимость = 0 Тогда
					стр2.ПлановаяСтоимость = 0.01;
					стр2.СуммаПлановая = стр2.ПлановаяСтоимость*Стрр.Количество;
				Иначе
					стр2.СуммаПлановая = стрр.СебестоимостьБезНДС;
				КонецЕсли;
				Если не СуммовойУчет тогда 
					стр2.Количество = стрр.Количество;
				Иначе
					стр2.Количество = стр2.СуммаПлановая;
					стр2.ПлановаяСтоимость = 1;
				КонецЕсли;
				
				стр2.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(стр2.Номенклатура);
				строкк=НайтиСчетаДляНоменклатуры(стр2.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если строкк<>неопределено тогда
					стр2.Счет = строкк.СчетУчета;
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стр2.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
			Иначе              // Знак операции = 2 = списание
				стр2 = Док.Материалы.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;				
				стр2.Коэффициент = 1;
				
				Если не СуммовойУчет тогда 
					стр2.Количество = стрр.Количество;
					//Считаем себестоимость в 1С
					Если СебестоимостьВ1С тогда 
						стрр.СебестоимостьБезНДС = 0;
					КонецЕсли; 
					стр2.Себестоимость = стрр.СебестоимостьБезНДС;
					
				Иначе
					//Считаем себестоимость в 1С
					Если СебестоимостьВ1С тогда 
						стрр.СебестоимостьБезНДС = 0;
					КонецЕсли; 
					стр2.Себестоимость = стрр.СебестоимостьБезНДС;
					//стр2.Количество = стрр.СебестоимостьЗаедБезНДС*стрр.Количество;
					стр2.Количество = стр2.Себестоимость;
				КонецЕсли;
				
				стр2.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
				строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если строкк <> неопределено тогда
					стр2.Счет = строкк.СчетУчета;
					Если ЗначениеЗаполнено(СтатьяЗатрат) тогда
						стр2.СтатьяЗатрат = СтатьяЗатрат;
					Иначе
						стр2.СтатьяЗатрат = стр2.Номенклатура.СтатьяЗатрат;
					КонецЕсли;	  
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		ВремяДокумента = Документы.ОтчетПроизводстваЗаСмену.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		
		Если НЕ Проводить тогда
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Запись); 
				Сообщить("Записан"+" Отчет производства за смену № "+Док.Номер+" от "+Док.Дата);
				Если ПустаяСтрока(базовыйДокумент) Тогда
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док=Док.Ссылка;
				Иначе
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номерБазовый))[0].Док2=Док.Ссылка;	
					НужнаКолонка = Истина;
				КонецЕсли;
				базовыйДокумент = номернаклиико;
			Исключение
				Сообщить("Не удалось записать Отчет производства за смену № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
		Иначе
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение); 
				Сообщить("Проведен"+" Отчет производства за смену № "+Док.Номер+" от "+Док.Дата);
				Если ПустаяСтрока(базовыйДокумент) Тогда
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док=Док.Ссылка;
				Иначе
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номерБазовый))[0].Док2=Док.Ссылка;	
					НужнаКолонка = Истина;
				КонецЕсли;
				базовыйДокумент = номернаклиико;
			Исключение
				Сообщить("Не удалось провести Отчет производства за смену № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		КонецЕсли;
		
		
		//Проверим склады
		Отбор = Новый Структура("Номер, Дата, ЗнакОперации", ДокСтр.Номер, Док.Дата, Число("2"));		
		Нашли = Строки.НайтиСтроки(Отбор);
		Отбор = Новый Структура("Номер, Дата, ЗнакОперации", ДокСтр.Номер, Док.Дата, Число("1"));		
		Нашли1 = Строки.НайтиСтроки(Отбор);
		Если Нашли.Количество()<>0 и Нашли1.Количество()<>0 тогда 
			Если Нашли[0].СкладСписания = Нашли1[0].СкладПрихода тогда 
				базовыйДокумент = "";
				Продолжить;
			Иначе
				// Создаем перемещение	
				Док1 = Документы.ПеремещениеТоваров.НайтиПоНомеру(НомерДокумента, ДокСтр.Дата);
				Если не ЗначениеЗаполнено(Док1) Тогда
					Док1 = Документы.ПеремещениеТоваров.СоздатьДокумент();
					Док1.Номер = НомерДокумента;
				Иначе
					Если зд Тогда
						Док1 = Док1.ПолучитьОбъект();
						Док1.УстановитьПометкуУдаления(Ложь);
						Док1.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						Сообщить("Отчет производства за смену № " + Док1.Номер + " от " + Док1.Дата + " существует!");
						Продолжить;					
					КОнецЕсли;
				КОнецЕсли;
				
				// Шапка документа
				Заполнять = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", Док.Метаданные());
				
				Если Заполнять тогда 
					Док1.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
				КонецЕсли;
				
				Док1.Дата = Док.Дата;
				Док1.Номер = НомерДокумента; 
				Док1.Организация = Док.Организация;
				//Поулчим систему налогооблажения
				УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док1.Организация, Док1.Дата);
				
				Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
					//НДСВСтоимости = Истина;
					УчитыватьНДС = Истина;
				Иначе
					//НДСВСтоимости = Ложь;
					УчитыватьНДС = Истина;
				КонецЕсли;
				
				Если НДСВСтоимости тогда 		
					Док.НДСВСтоимостиТоваров = перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
				Иначе
					Док.НДСВСтоимостиТоваров = перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
				КонецЕсли;
				
				Док1.СкладОтправитель = Нашли[0].СкладСписания;
				Док1.ПодразделениеОтправитель = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док1.СкладОтправитель))[0].Подразделение;
				
				Док1.СкладПолучатель = Нашли1[0].СкладПрихода;
				Док1.ПодразделениеПолучатель = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док1.СкладПолучатель))[0].Подразделение;	
				
				Док1.Товары.Очистить();
				
				//Заполнение ТЧ		
				Для каждого стрр из Табчасть Цикл 
					ОкрКоличество = Окр(стрр.Количество,3);
					Если ОкрКоличество = 0 Тогда
						Продолжить;
					КонецЕсли;
					Если СокрЛП(стрр.ЗнакОперации) = "1" Тогда
						
						стр2 = Док1.Товары.Добавить();
						стр2.Номенклатура = стрр.Номенклатура; 				
						стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
						стр2.Коэффициент = 1;
						
						Если не СуммовойУчет тогда  							
							//Считаем себестоимость в 1С
							Если СебестоимостьВ1С тогда 
								стрр.СебестоимостьБезНДС = 0;
							КонецЕсли; 							
							стр2.Себестоимость = стрр.СебестоимостьБезНДС;
							стр2.Количество = ОкрКоличество;
						Иначе
							стр2.Количество = стр2.СебестоимостьБезНДС;
							//Считаем себестоимость в 1С
							Если СебестоимостьВ1С тогда 
								стрр.СебестоимостьБезНДС = 0;
							КонецЕсли; 							
							стр2.Себестоимость = стрр.СебестоимостьБезНДС;							
						КонецЕсли;
						
						строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
						Если строкк <> неопределено тогда
							стр2.СчетУчета = строкк.СчетУчета;
							Стр2.НовыйСчетУчета = Строкк.СчетУчета;
						Иначе
							Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
						КонецЕсли;	
						
					КонецЕсли;		
				КонецЦикла;
				
				ВремяДокумента = Документы.ПеремещениеТоваров.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Док1,ВремяДокумента);
				
				Если НЕ Проводить тогда 
					Попытка 
						Док1.Записать(РежимЗаписиДокумента.Запись); 
						Сообщить("Записано перемещение товаров № "+Док1.Номер+" от "+Док1.Дата);
						Если ПустаяСтрока(базовыйДокумент) Тогда
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док1.Ссылка;
						Иначе
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док2 = Док1.Ссылка;	
							НужнаКолонка = Истина;
						КонецЕсли;
					Исключение
						Сообщить("Не удалось записать перемещение товаров № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
					КонецПопытки;
				Иначе
					Попытка 
						Док1.Записать(РежимЗаписиДокумента.Проведение); 
						Сообщить("Проведено перемещение товаров № "+Док1.Номер+" от "+Док1.Дата);
						Если ПустаяСтрока(базовыйДокумент) Тогда
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док1.Ссылка;
						Иначе
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док2 = Док1.Ссылка;	
							НужнаКолонка = Истина;
						КонецЕсли;
					Исключение
						Сообщить("Не удалось провести перемещение товаров № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
					КонецПопытки;
				КонецЕсли;
				базовыйДокумент = ""; 				
			КонецЕсли;
		Иначе
			базовыйДокумент = "";
		КонецЕсли; 		
	КонецЦикла; 	
КонецПроцедуры	

&НаСервере
Функция ПодготовитьАктПереработки(табз)
	
	Тзз1 = Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
	Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("СкладСписания"); 
	Тзз1.Колонки.Добавить("СкладПрихода"); 
	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз1.Колонки.Добавить("ЗнакОперации");
	
	Табз = ПолучитьИзВременногоХранилища(АдресАпер);
	
	Для Каждого Стр из табз Цикл
		ОкрКоличество = Окр(Стр.Количество,3);
		Если ОкрКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ххх = Тзз1.Добавить();
		ххх.Номер = Стр.НомерДок;
		Дата = Стр.Дата;
		ххх.Дата = ПолучитьДату(Дата);
		ххх.Номенклатура = НайтиНоменклатуру(Стр.НКодИИКО, Стр.Ставкандс, Стр.ГруппаучетаНазвание).Номенклатура;
		
		СкладСписания = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стр.СкладСписанияНаименование));
		Если ЗначениеЗаполнено(СкладСписания) тогда 
			ххх.СкладСписания = СкладСписания[0].Склад;
		Иначе
			ххх.СкладСписания = "";
		КОнецЕсли;
		
		СкладПрихода = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стр.СкладПриходаНаименование));
		Если ЗначениеЗаполнено(СкладПрихода) тогда 
			ххх.СкладПрихода = СкладПрихода[0].Склад;
		Иначе
			ххх.СкладПрихода = "";
		КонецЕсли;
		
		ххх.ЮЛнаименование = Стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод = Стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН = Стр.ЮЛИнн;
		ххх.Количество = ОкрКоличество;
		ххх.СебестоимостьЗаедБезНДС = Стр.СебестоимостьЗаедБезНДС;
		ххх.СебестоимостьБезНДС = Стр.СебестоимостьБезНДС;
		ххх.ЗнакОперации = Стр.ЗнакОперации;
	КонецЦикла;	
	
	Возврат Тзз1;
	
КонецФункции	

&НаСервере
Функция ПолучитьПКОПоДокументуОснования(ДокОбъект)
	ЗапросПКО = Новый Запрос("ВЫБРАТЬ
	                         |	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка
	                         |ИЗ
	                         |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	                         |ГДЕ
	                         |	ПриходныйКассовыйОрдер.ДокументОснование.Ссылка = &СсылкаООРП");
	ЗапросПКО.УстановитьПараметр("СсылкаООРП", ДокОбъект.Ссылка);
	ТЗПКО = ЗапросПКО.Выполнить().Выгрузить();
	Если ТЗПКО.Количество()>0 Тогда
		Возврат ТЗПКО[0].Ссылка.ПолучитьОбъект();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СоздатьПКВ(табз,префикс,порядок, тз1, ТЗ10)	
	
	Доки = Тз1.Скопировать();
	Если ТЗ10 <> Неопределено тогда
		ДокиАУ = ТЗ10.Скопировать();
		//ДокиАУ.Свернуть("Дата,НомерКассы,НомерСмены,НомерДок");
		Для каждого Стр из ДокиАУ цикл
			Если ЗначениеЗаполнено(Стр.НомерКассы) тогда 
				Стр.НомерКассы = Число(Стр.НомерКассы);
				Стр.НомерСмены = Число(Стр.НомерСмены);
			Иначе
				Сообщить("Невозможно распределить безналичную выручку. Отсутствует информация о номере кассы. Попробуйте загрузку через файлы.");
				Прервать;
			КонецЕсли;
			Строка = Доки.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,Стр);
		КонецЦикла;
	КонецЕсли;
	Доки.Свернуть("Дата,НомерКассы,НомерСмены,НомерДок");
	Доки.Сортировать("Дата");
	//Для каждого Стр из ДокиАУ цикл
	//	Строка = Доки.Добавить();
	//	ЗаполнитьЗначенияСвойств(Строка,Стр);
	//КонецЦикла;
	
	Доки.Сортировать("Дата");
	
	Доки2 = Доки.Скопировать();
	Для каждого Стр из Доки2 цикл 
		Стр.Дата =  НачалоДня(ПолучитьДату(Стр.Дата));
	КонецЦикла;     	
	
	Доки2.Свернуть("Дата,НомерСмены,НомерКассы");
	Доки2.Сортировать("Дата");
	
	Для каждого стр из Доки цикл
		Стр.НомерДок=СокрЛП(Стр.НомерДок)+"!"+"Акт Реализации";
		Стр.Дата = НачалоДня(ПолучитьДату(Стр.Дата));
	КонецЦикла; 	
	
	ООРП = ПолучитьООРП();
	ОбъектООРП = ООРП.ПолучитьОбъект();
	ЕстьРеквизит = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Контрагент", ОбъектООРП.Метаданные(),"Оплата");
	//ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", ОбъектООРП.Метаданные().ТабличныеЧасти.Оплата);
	
	Для каждого стр из Доки2 цикл
		
		//Выбираем нужные кассы и смены из ТЗ1
		Отб = Новый Структура("Дата,НомерКассы,НомерСмены",Стр.Дата,Стр.НомерКассы,Стр.НомерСмены);
		НСтр = Доки.НайтиСтроки(Отб);
		
		//Выбираем нужные документы из ПКВ
		//Отб1 = Новый Структура("Дата,НомерКассы,НомерСмены",НСтр[0].Дата,НСтр[0].НомерКассы,НСтр[0].НомерСмены);
		НСтр1 = Табз.НайтиСтроки(Отб);   
		
		Для каждого строка из Нстр1 цикл			
			 //Проверяем нал или безнал
			Если (строка.Видоплатынаименование = "Наличные") Или 
				  (строка.Видоплатынаименование = "Рубли") Тогда 
				Продолжить;
			Иначе  		
				//Нахдоим на вкладке соответствий 
				Видопл = Объект.ВидыОплаты.НайтиСтроки(Новый Структура("КодИИКО", Строка.ВидОплатыКод));
				// Сопоставленный вид оплаты 1С
				Во = Видопл[0].ВидОплаты;
				
				//Если Во.Наименование = "Не грузить" тогда 
				//	Для каждого стрр из Нстр цикл
				//		Пока Строка.Сумма > 0 цикл
				//			Д = Объект.Докум.НайтиСтроки(Новый Структура("Документ",Стрр.НомерДок));
				//			Док = Д[0].Док.ПолучитьОбъект();
				//			НН = Док.Товары.Количество() - 1;							
				//			Если Док.Товары.Итог("Сумма")<Строка.Сумма тогда 
				//				Строка.Сумма = Строка.Сумма - Док.Товары.Итог("Сумма");
				//				Док.УстановитьПометкуУдаления(Истина);
				//				Продолжить;
				//			Иначе
				//				Пока НН >= 0 цикл
				//					Если Док.Товары[НН].Сумма > Строка.Сумма тогда 
				//						Док.Товары[НН].Сумма = Док.Товары[НН].Сумма - Строка.Сумма;
				//						Док.Товары[НН].Цена = Док.Товары[НН].Сумма;
				//						Строка.Сумма = 0;
				//						НН = -1;
				//						Док.Записать();
				//					Иначе
				//						Строка.Сумма = Строка.Сумма - Док.Товары[НН].Сумма;
				//						Док.Товары.Удалить(НН);
				//						НН = НН - 1;
				//						//Продолжить;
				//					КонецЕсли; 									
				//				КонецЦикла;								
				//			КонецЕсли;							
				//		КонецЦикла;						
				//	КонецЦикла;				
				//Иначе
					//Ходить по докам пока не кончится безнал
					СуммаБезнала = Строка.Сумма;
					Для каждого СТр3 из НСтр цикл
						Итерация = 0;
						Пока СуммаБезнала>0 цикл
							Итерация = Итерация + 1;
							Если Итерация = 100 тогда 
								Прервать;
							КонецЕсли;
							Д = Объект.Докум.НайтиСтроки(Новый Структура("Документ",Стр3.НомерДок));
							Если Д.Количество() > 0 тогда 
								Если ЗначениеЗаполнено(Д[0].Док) тогда 
									Док = Д[0].Док.ПолучитьОбъект();
								Иначе
									Сообщить("Невозможно распределить оплаты в документе " + Стр3.НомерДок);
									Прервать;
								КонецЕсли;
								РазностьТоварыОплата = Док.Товары.Итог("Сумма")- Док.Оплата.Итог("СуммаОплаты");
								Если РазностьТоварыОплата>=СуммаБезнала тогда								
									ххх = Док.Оплата.Добавить();
									ххх.ВидОплаты = Во;									
									ххх.СуммаОплаты = СуммаБезнала;
									Если ЕстьРеквизит тогда 
										ххх.Контрагент = ххх.ВидОплаты.Контрагент;
										ххх.ДоговорКонтрагента = ххх.ВидОплаты.ДоговорКонтрагента;
										ххх.СчетУчетаРасчетов = Во.СчетУчетаРасчетов;
									КонецЕсли;
									Док.Оплата.Свернуть("ВидОплаты","СуммаОплаты");
									Док.Записать(РежимЗаписиДокумента.Запись);
									СуммаБезнала = 0;
								ИначеЕсли РазностьТоварыОплата>0 И РазностьТоварыОплата<Строка.Сумма тогда 
									ххх = Док.Оплата.Добавить();
									ххх.ВидОплаты = Во;
									ххх.СуммаОплаты = (Док.Товары.Итог("Сумма")- Док.Оплата.Итог("СуммаОплаты"));   // нужно всю сумму
									Если ЕстьРеквизит тогда 
										ххх.Контрагент = ххх.ВидОплаты.Контрагент;
										ххх.ДоговорКонтрагента = ххх.ВидОплаты.ДоговорКонтрагента;
										ххх.СчетУчетаРасчетов = Во.СчетУчетаРасчетов;
									КонецЕсли;
									СуммаБезнала = СуммаБезнала - ххх.СуммаОплаты;
									Док.Оплата.Свернуть("ВидОплаты","СуммаОплаты");
									Док.Записать(РежимЗаписиДокумента.Запись); 									
									Прервать;
								Иначе
									Прервать;
								КонецЕсли;
							Иначе
								Сообщить("Невозможно распределить оплаты в документе " + Стр3.НомерДок);
								Прервать; 
							КонецЕсли;
							Если Проводить тогда
								Док.Оплата.Свернуть("ВидОплаты","СуммаОплаты");
								Док.Записать(РежимЗаписиДокумента.Проведение);
							КонецЕсли;							
						КонецЦикла;
					КонецЦикла;
				//КонецЕсли;
			КонецЕсли; 			
		КонецЦикла; 		
	КонецЦикла;     	
	
	Доки2 = Табз.Скопировать();
	Доки2.Свернуть("Дата");
	Доки2.Сортировать("Дата");
	
	Если ПКО_АР тогда 
		Элементы.Докум.ПодчиненныеЭлементы.ДокумДок3.Видимость = Истина;
		Для каждого Стр из Доки2 цикл		
			ДатаДокум = ПолучитьДату(Стр.Дата);
			
			Отбор = Новый Структура("Дата, ВидДок", НачалоДня(ДатаДокум), "Акт Реализации");
			МассивОтчетов = Объект.Докум.НайтиСтроки(Отбор);
			
			Для каждого Стр из МассивОтчетов цикл
				Если ЗначениеЗаполнено(Стр.Док) тогда 
					Док = Стр.Док.ПолучитьОбъект();  			
					//	Если Док.Оплата.Количество() > 0 тогда
					ПКООбъект = ПолучитьПКОПоДокументуОснования(Док);
					ВсегоБезнала = Док.Оплата.Итог("СуммаОплаты");
					Если Док.СуммаДокумента > ВсегоБезнала тогда
						Если ПКООбъект = Неопределено Тогда
							Док1 = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
						Иначе
							Если зд Тогда
								Док1 = ПКООбъект;
								Док1.УстановитьПометкуУдаления(Ложь);
								Док1.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							Иначе
								Сообщить("Поступление наличных № " + Док1.Номер + " от " + Док1.Дата   + " существует!");
								Продолжить;					
							КонецЕсли;
						КонецЕсли;
						Док1.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка;
						Док1.Заполнить(Док);
						Док1.ВалютаДокумента =  Константы.ВалютаРегламентированногоУчета.Получить();
						Док1.Дата = Док.Дата ; 
						Док1.Организация = Док.Организация;
						Док1.Комментарий = ""+Док.Номер + Док.Дата+""; 
						Док1.СуммаДокумента = Док.СуммаДокумента - ВсегоБезнала; 
						Док1.СчетКасса = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
						Док1.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.2");
						Док1.ДокументОснование= Док.Ссылка; 
						Док1.Контрагент = док.Склад;
						Док1.ПринятоОт = "Частное лицо";
						
						//Заполняем ТЧ	
						Док1.РасшифровкаПлатежа.Очистить();
						//СтрокаООРП = Док.Товары.Свернуть("СтавкаНДС","СуммаНДС");
						СтрокаООРП = Док.Товары.Выгрузить();
						СтрокаООРП.Свернуть("СтавкаНДС","СуммаНДС,Сумма");
						
						Для каждого Стр из СтрокаООРП цикл
							Строка = Док1.РасшифровкаПлатежа.Добавить();
							Строка.СуммаПлатежа = Стр.Сумма;//Док.СуммаДокумента - ВсегоБезнала;
							Строка.СтавкаНДС =  Стр.СтавкаНДС;
							Строка.СуммаНДС = СТр.СуммаНДС;
							Строка.СтатьяДвиженияДенежныхСредств = СтатьяДДС;							
						КонецЦикла;
						Док1.РасшифровкаПлатежа.Свернуть("СтавкаНДС,СтатьяДвиженияДенежныхСредств","СуммаПлатежа,СуммаНДС");
						////Заполняем ТЧ	
						//Док1.РасшифровкаПлатежа.Очистить();
						//Строка = Док1.РасшифровкаПлатежа.Добавить();
						//Строка.СуммаПлатежа = Док.СуммаДокумента - ВсегоБезнала;
						//Строка.СтавкаНДС =  Перечисления.СтавкиНДС.БезНДС;
						//Строка.СтатьяДвиженияДенежныхСредств = СтатьяДДС;

						
						ВремяДокумента = Документы.ПриходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
						УстановитьВремяПоУмолчанию(Док1,ВремяДокумента);
						
						Если Проводить тогда
							Попытка    							 
								Док1.Записать(РежимЗаписиДокумента.Проведение);  
								Сообщить("Проведен"+" ПКО № "+Док1.Номер+" от "+Док1.Дата);								
								СТрокаДокумента = Объект.Докум.НайтиСТроки(Новый Структура("Док", Док.Ссылка));
								СТрокаДокумента[0].Док3=Док1.Ссылка
							Исключение
								Сообщить("Не удалось провести ПКО № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
								Док1.Записать(РежимЗаписиДокумента.Запись);
							КонецПопытки;
						Иначе
							Попытка    							 
								Док1.Записать(РежимЗаписиДокумента.Запись);  
								Сообщить("Записан"+" ПКО № "+Док1.Номер+" от "+Док1.Дата);								
								СТрокаДокумента = Объект.Докум.НайтиСТроки(Новый Структура("Док", Док.Ссылка));
								СТрокаДокумента[0].Док3=Док1.Ссылка
							Исключение
								Сообщить("Не удалось записать ПКО № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
							КонецПопытки;							
						КонецЕсли;
					ИначеЕсли ПКООбъект <> Неопределено Тогда
						// При повторной загрузке реализация стала целиком по эквайрингу
						// помечаем ПКО с предыдущей загрузки на удаление
						ПКООбъект.УстановитьПометкуУдаления(Истина);
					КонецЕсли;				  
				КонецЕсли;  			 
			КонецЦикла;   			
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура СоздатьАвансовыйОтчет(докСтр,строки,НомерДокумента, Порядок, номернаклиико, ВидДок)
	
	Док = Документы.АвансовыйОтчет.НайтиПоНомеру(НомерДокумента, докСтр.Дата);
	
	Если не ЗначениеЗаполнено(Док) Тогда
		Док = Документы.АвансовыйОтчет.СоздатьДокумент();
		Док.Номер = НомерДокумента;
	Иначе
		Если зд Тогда
			Док = Док.ПолучитьОбъект();
			Док.УстановитьПометкуУдаления(Ложь);
			Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Сообщить("Авансовый отчет № " + докСтр.Номер + " от " + докСтр.Дата + " существует!");
			Возврат;
		КОнецЕсли;
	КОнецЕсли;
	
	// Шапка документа
	
	Док.Организация = НайтиОгранизациюПоИНН(докСтр.ЮЛИНН, Ложь);
	Док.Дата = докСтр.Дата;
	//Получим систему налогооблажения
	УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
	
	Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
		//НДСВСтоимости = Истина;
		УчитыватьНДС = Истина;
	Иначе
		//НДСВСтоимости = Ложь;
		УчитыватьНДС = Истина;
	КонецЕсли;
	Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Док.КурсДокумента = 1;
	Док.СуммаВключаетНДС = Истина;
	Док.НДСВключенВСтоимость = НДСВСтоимости;	
	Док.Номер = НомерДокумента;
	Док.ФизЛицо = докСтр.Сотрудник;
	Док.Комментарий = "Приходная Накладная №" + докСтр.Номер + " от " + докСтр.Дата;
	
	Если ВидДок = "Приходная Накладная" тогда 
		Док.Склад = докСтр.Склад;
		Док.ПодразделениеОрганизации = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;
	КонецЕсли;

	//Товары
	Док.Товары.Очистить();
	Док.Прочее.Очистить();
	Если ВидДок = "Приходная Накладная" тогда
		Отб = Новый Структура("Номер, Склад",докСтр.Номер, ДокСтр.Склад);
	Иначе
		Отб = Новый Структура("Номер",докСтр.Номер);
	КОнецЕсли;
	НСтр = строки.НайтиСтроки(Отб);
	ТабЧасть = Новый ТаблицаЗначений;
	Табчасть = Строки.Скопировать(НСтр);
	Табчасть.Свернуть("Номенклатура,СтавкаНДС","СуммасНДС,СуммаНДС,Количество");
	
	Для каждого стрр из Табчасть Цикл
		Если ВидДок = "Приходная Накладная" и не стрр.Номенклатура.Услуга тогда
			Стр2 = Док.Товары.Добавить();
			Стр2.НомерВходящегоДокумента = докСтр.ВходНомер;
			Стр2.ДатаВходящегоДокумента = ПолучитьДату(докСтр.ВходДата);
			Стр2.Поставщик = докСтр.Контрагент;
			Стр2.СчетФактура = докСтр.СчетФактура; 
			Стр2.ОтражениеВУСН = НДСВСтоимости;
			Стр2.Номенклатура = стрр.Номенклатура;
			Если не СуммовойУчет тогда 
				Стр2.Количество = стрр.Количество;
				Стр2.Цена = стрр.СуммасНДС/стрр.Количество;
				Стр2.Сумма = стрр.СуммасНДС;
			Иначе
				Стр2.Количество = стрр.СуммасНДС;;
				Стр2.Цена = 1;
				Стр2.Сумма = стрр.СуммасНДС;
			КонецЕсли;
			Стр2.СуммаНДС = стрр.СуммаНДС;
			СттНДС = Число(СокрЛП(Стрр.СтавкаНДС));
			Стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,Стр2.Сумма,Стр2.СуммаНДС);
			Если не ПустаяСтрока(ДокСтр.СчетФактура) Тогда
				Стр2.ПредъявленСФ = Истина;
				Стр2.НомерСФ = докСтр.СчетФактура;
				Стр2.ДатаСФ = ПолучитьДату(докСтр.ВходДата);
			КонецЕсли;	
			Строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
			
			Если Строкк <>  неопределено тогда			
				Если Укр = 0 тогда
					Стр2.СчетУчетаНДС = Строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
					Стр2.СчетУчета = Строкк.СчетУчета;
				Иначе
					СчетУчета = ПолучитьСчетУчетаБУ(Док, Строкк);	
					Стр2.СчетУчета = СчетУчета;
				КонецЕСли;	
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;
		Иначе
			Стр2 = Док.Прочее.Добавить();
			Стр2.НомерВходящегоДокумента = докСтр.ВходНомер;
			Стр2.ДатаВходящегоДокумента = ПолучитьДату(докСтр.ВходДата);
			Стр2.Поставщик = докСтр.Контрагент;
			Стр2.СчетФактура = докСтр.СчетФактура; 
			Стр2.ОтражениеВУСН = РасходыНУ;
			Стр2.Номенклатура = стрр.Номенклатура;
			Стр2.Содержание = Стр2.Номенклатура.Наименование;
			Стр2.Сумма = стрр.СуммасНДС;
			Стр2.СуммаНДС = стрр.СуммаНДС;
			СттНДС = Число(СокрЛП(Стрр.СтавкаНДС));
			Стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,Стр2.Сумма,Стр2.СуммаНДС);
			Если не ПустаяСтрока(ДокСтр.СчетФактура) Тогда
				Стр2.ПредъявленСФ = Истина;
				Стр2.НомерСФ = докСтр.СчетФактура;
				Стр2.ДатаСФ = ПолучитьДату(докСтр.ВходДата);
			КонецЕсли;	
			Строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);			
			Если Строкк <>  неопределено тогда			
				Стр2.СчетУчетаНДС = Строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
				Стр2.СчетЗатрат = Строкк.СчетУчета; 
				Если ЗначениеЗаполнено(Стр2.Номенклатура.СтатьяЗатрат) тогда 
					Стр2.Субконто1 = Стр2.Номенклатура.СтатьяЗатрат;
				Иначе
					Стр2.Субконто1 = СтатьяЗатратУслуги;
				КонецЕсли;
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;			
		КонецЕсли;   		
	КонецЦикла;
	
	//СохранитьДокумент1С(Док, "Авансовый отчет", Порядок, номернаклиико);
	ВремяДокумента = Документы.АвансовыйОтчет.ВремяДокументаПоУмолчанию();
	УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
	Попытка
		Если Проводить тогда 
			Док.Записать(РежимЗаписиДокумента.Проведение); 
			Сообщить("Проведен Авансовый Отчет № "+Док.Номер+" от "+Док.Дата);
			ОБъект.Докум.НайтиСТроки(Новый Структура("Документ, СуммаДок", номернаклиико, Док.СуммаДокумента))[0].Док=Док.Ссылка;						
		Иначе
			Док.Записать(РежимЗаписиДокумента.Запись); 
			Сообщить("Записан Авансовый Отчет № "+Док.Номер+" от "+Док.Дата);
			ОБъект.Докум.НайтиСТроки(Новый Структура("Документ, СуммаДок", номернаклиико, Док.СуммаДокумента))[0].Док=Док.Ссылка;						
		КонецЕсли;     					
	Исключение
		Сообщить("Не удалось записать Авансовый Отчет № " + Док.Номер + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьДокументыССервера()
	
	Если ПН Тогда
		Тз = Новый ТаблицаЗначений;  
		ПравильныеКолонки = Новый Массив(НачИменаКолонок.Количество());
		Для ии = 0 по УмныеИменаКолонок.Количество()-1 цикл
			ПравильныеКолонки[ии] =  СокрЛП(УмныеИменаКолонок[ии]);
			Тз.Колонки.Добавить(ПравильныеКолонки[ии]);		
		КонецЦикла;
		АдресПН = ПоместитьВоВременноеХранилище(Тз, УИДФормы);
	КонецЕсли;
	
	Если АР Тогда
		Тз1 = Новый ТаблицаЗначений;  
		ПравильныеКолонки1 = Новый Массив(НачИменаКолонок1.Количество());
		Для ии = 0 по УмныеИменаКолонок1.Количество()-1 цикл
			ПравильныеКолонки1[ии] = СокрЛП(УмныеИменаКолонок1[ии]);
			Тз1.Колонки.Добавить(ПравильныеКолонки1[ии]);		
		КонецЦикла;
		АдресАР = ПоместитьВоВременноеХранилище(Тз1, УИДФормы);
	КонецЕсли;
	
	Если ВП Тогда
		Тз2 = Новый ТаблицаЗначений;  
		ПравильныеКолонки2 = Новый Массив(НачИменаКолонок2.Количество());
		Для ии = 0 по УмныеИменаКолонок2.Количество()-1 цикл
			ПравильныеКолонки2[ии] = СокрЛП(УмныеИменаКолонок2[ии]);
			Тз2.Колонки.Добавить(ПравильныеКолонки2[ии]);		
		КонецЦикла;
		АдресВП = ПоместитьВоВременноеХранилище(Тз2, УИДФормы);
	КонецЕсли;
	
	Если АП Тогда
		Тз3 = Новый ТаблицаЗначений;  
		ПравильныеКолонки3 = Новый Массив(НачИменаКолонок3.Количество());
		Для ии = 0 по УмныеИменаКолонок3.Количество()-1 цикл
			ПравильныеКолонки3[ии] = СокрЛП(УмныеИменаКолонок3[ии]);
			Тз3.Колонки.Добавить(ПравильныеКолонки3[ии]);		
		КонецЦикла;
		АдресАП = ПоместитьВоВременноеХранилище(Тз3, УИДФормы);
	КонецЕсли;
	
	Если РН Тогда
		Тз8 = Новый ТаблицаЗначений;  
		ПравильныеКолонки8 = Новый Массив(НачИменаКолонок8.Количество());
		Для ии = 0 по УмныеИменаКолонок8.Количество()-1 цикл
			ПравильныеКолонки8[ии] = СокрЛП(УмныеИменаКолонок8[ии]);
			Тз8.Колонки.Добавить(ПравильныеКолонки8[ии]);		
		КонецЦикла;
		АдресРН = ПоместитьВоВременноеХранилище(Тз8, УИДФормы);
	КонецЕсли;
	
	Если АПЕР Тогда
		Тз5 = Новый ТаблицаЗначений;  
		ПравильныеКолонки3 = Новый Массив(НачИменаКолонок3.Количество());
		Для ии = 0 по УмныеИменаКолонок3.Количество()-1 цикл
			ПравильныеКолонки3[ии] = СокрЛП(УмныеИменаКолонок3[ии]);
			Тз5.Колонки.Добавить(ПравильныеКолонки3[ии]);		
		КонецЦикла;
		АдресАпер = ПоместитьВоВременноеХранилище(Тз5, УИДФормы);
	КонецЕсли;
	
	Если АС Тогда
		Тз6 = Новый ТаблицаЗначений;  
		ПравильныеКолонки6 = Новый Массив(НачИменаКолонок6.Количество());
		Для ии = 0 по УмныеИменаКолонок6.Количество()-1 цикл
			ПравильныеКолонки6[ии] = СокрЛП(УмныеИменаКолонок6[ии]);
			Тз6.Колонки.Добавить(ПравильныеКолонки6[ии]);		
		КонецЦикла;
		АдресАС = ПоместитьВоВременноеХранилище(Тз6, УИДФормы);
	КонецЕсли;
	
	Если ИН Тогда
		Тз7 = Новый ТаблицаЗначений;  
		ПравильныеКолонки7 = Новый Массив(НачИменаКолонок7.Количество());
		// В УмныеКолонки добавили 2 дублирующие колонки (себистоимость) для совместимости (убрали без НДС)
		// Их не добавляем
		Для ии = 0 по УмныеИменаКолонок7.Количество()-4 цикл      
			ПравильныеКолонки7[ии] = СокрЛП(УмныеИменаКолонок7[ии]);
			Тз7.Колонки.Добавить(ПравильныеКолонки7[ии]);	
		КонецЦикла;
		АдресИН = ПоместитьВоВременноеХранилище(Тз7, УИДФормы);
	КонецЕсли;
	
	Если АР и БезналичныеОплаты = "ИзПриемаКассовойВыручки" Тогда
		Тз4 = Новый ТаблицаЗначений;  
		ПравильныеКолонки4 = Новый Массив(НачИменаКолонок4.Количество());
		Для ии = 0 по УмныеИменаКолонок4.Количество()-1 цикл
			ПравильныеКолонки4[ии]  = СокрЛП(УмныеИменаКолонок4[ии]);
			Тз4.Колонки.Добавить(ПравильныеКолонки4[ии]);	
		КонецЦикла;
		АдресАРИБезнал = ПоместитьВоВременноеХранилище(Тз4, УИДФормы);
	КонецЕсли;
	
	Если ВН Тогда
		Тз9 = Новый ТаблицаЗначений;  
		ПравильныеКолонки9 = Новый Массив(НачИменаКолонок9.Количество());
		Для ии = 0 по УмныеИменаКолонок9.Количество()-1 цикл
			ПравильныеКолонки9[ии] =  СокрЛП(УмныеИменаКолонок9[ии]);
			Тз9.Колонки.Добавить(ПравильныеКолонки9[ии]);	
		КонецЦикла;
		АдресВН = ПоместитьВоВременноеХранилище(Тз9, УИДФормы);
	КонецЕсли;
	
	Если АУ тогда 
		Тз10 = Новый ТаблицаЗначений;
		ПравильныеКолонки10 = Новый массив(НачИменаКолонок10.Количество());
		Для ии = 0 по УмныеИменаКолонок10.Количество()-1 цикл
			ПравильныеКолонки10[ии] = СокрЛП(УмныеИменаКолонок10[ии]);
			ТЗ10.Колонки.Добавить(ПравильныеКолонки10[ии]);			
		КонецЦикла;
		АдресАУ = ПоместитьВоВременноеХранилище(Тз10, УИДФормы);
	КонецЕсли;
	
	Если АПУ Тогда
		Тз11=Новый ТаблицаЗначений;  
		ПравильныеКолонки11 = Новый Массив(НачИменаКолонок11.Количество());
		Для ии=0 по УмныеИменаКолонок11.Количество()-1 цикл
			ПравильныеКолонки11[ии]= СокрЛП(УмныеИменаКолонок11[ии]);
			Тз11.Колонки.Добавить(ПравильныеКолонки11[ии]);	
		КонецЦикла;
		АдресАПУ = ПоместитьВоВременноеХранилище(Тз11, УИДФормы);
	КонецЕсли;
	
	Если Араз Тогда
		Тз12=Новый ТаблицаЗначений;  
		ПравильныеКолонки12 = Новый Массив(НачИменаКолонок12.Количество());
		Для ии=0 по УмныеИменаКолонок12.Количество()-1 цикл
			ПравильныеКолонки12[ии]= СокрЛП(УмныеИменаКолонок12[ии]);
			Тз12.Колонки.Добавить(ПравильныеКолонки12[ии]);	
		КонецЦикла;
		АдресАРаз = ПоместитьВоВременноеХранилище(Тз12, УИДФормы);
	КонецЕсли;

	Естьче = 0;
	Попытка 
		к=Новый COMОбъект("iiko1CInterface.Version"); 
		в=к.ProtocolVersion;
		ВерсияАйко=Число(в);
	Исключение   
		Сообщить("Не удалось подкючить библиотеку! " + ОписаниеОшибки());
	КонецПопытки;	
	
	
	o = Новый COMОбъект("iiko1CInterface.DocumentLoader");
	
	Если ПН тогда
		
		Попытка 			
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина;
			фильтр.CutDownDishes=0;
			
			фильтр.IncludeUnprocessed=истина;			 
			
			oInvoces = o.LoadInvoiceData("http://" + СокрЛП(ПутьКсерверу) + ":" + XMLстрока(Порт) + "/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе = 1;
			oInvoce = oInvoces.GetFirstInvoiceData();
		Исключение  
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьНакладную(oInvoce) = Истина Цикл
			Попытка
				oInvoce = oInvoces.GetNextInvoiceData();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли;
	
	Если АР тогда
		ВерсияАйко = 0;
		Попытка 
			к = Новый COMОбъект("iiko1CInterface.Version"); 
			в = к.ProtocolVersion;
			ВерсияАйко = Число(в);
		Исключение   
			//Сообщить("В данном периоде акты реализации не обнаружены! " + ОписаниеОшибки());
		КонецПопытки;	
		Если ВерсияАйко > 2 Тогда
			//o = Новый COMОбъект("iiko1CInterface.DocumentLoader");
			Попытка                               
				//Состояние("Подключаемся к серверу iiko!");
				фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
				фильтр.DateFrom = НачПериода;
				фильтр.DateTo = КонПериода;
				фильтр.UseOnlyDate = Истина;
				фильтр.CutDownDishes = 0;
				
				oSales = o.LoadSalesData("http://" + СокрЛП(ПутьКсерверу) + ":" + XMLстрока(Порт) + "/resto/",СокрЛП(Логин),СокрЛП(Пароль), фильтр);
				ЕстьЧе = 1;
				oSale = oSales.GetFirstSaleData();
			Исключение   
				Сообщение = ОписаниеОшибки();
				Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
					Сообщить("Неверные логин или пароль!");
					Возврат 0;
				ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
					Сообщить("Неверные параметры доступа к базе!!!");
					Возврат 0; 
				Иначе
					Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
					Возврат 0; 
				КонецЕсли;
			КонецПопытки;
		Иначе
			o = Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
			Попытка                         
				
				oSales = o.LoadSalesData("http://" + СокрЛП(ПутьКсерверу) + ":" + XMLстрока(Порт) + "/resto/",СокрЛП(Логин),СокрЛП(Пароль), НачПериода,КонПериода + 86400);
				ЕстьЧе = 1;
				oSale = oSales.GetFirstSaleData();
			Исключение   
				Сообщение = ОписаниеОшибки();
				Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
					Сообщить("Неверные логин или пароль!");
					Возврат 0;
				ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
					Сообщить("Неверные параметры доступа к базе!!!");
					Возврат 0; 
				Иначе
					Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
					Возврат 0; 
				КонецЕсли;				
			КонецПопытки;
		КонецЕсли;
		Пока ЗаписатьПродажу(oSale) = Истина Цикл
			Попытка
				oSale = oSales.GetNextSaleData();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла; 
		АдресВерсииАйко = ПоместитьВоВременноеХранилище(ВерсияАйко, УИДФормы);
	КонецЕсли;
	
	Если ВП тогда
		//o = Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
		Попытка                               
			//Состояние("Подключаемся к серверу iiko!");
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина;
			фильтр.CutDownDishes=0;
			
			oDocuments = o.LoadInternalTransfersData("http://" + СокрЛП(ПутьКсерверу) + ":" + XMLстрока(Порт) + "/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе = 1;
			oDocument = oDocuments.GetFirstInternalTransfer();
		Исключение   
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьПеремещение(oDocument) = Истина Цикл
			Попытка
				oDocument = oDocuments.GetNextInternalTransfer();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если АП тогда
		//o = Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
		Попытка                               
			//Состояние("Подключаемся к серверу iiko!");
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина;
			фильтр.CutDownDishes=0;
			

			oDocuments = o.LoadProductionsData("http://" + СокрЛП(ПутьКсерверу) + ":" + XMLстрока(Порт) + "/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе = 1;
			oDocument = oDocuments.GetFirstProduction();
		Исключение   
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьПриготовление(oDocument) = Истина Цикл
			Попытка
				oDocument = oDocuments.GetNextProduction();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если РН тогда
		//o = Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
		Попытка                               
			//Состояние("Подключаемся к серверу iiko!");
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина;
			фильтр.CutDownDishes=0;
			
			oDocuments = o.LoadOutgoingInvoicesData("http://" + СокрЛП(ПутьКсерверу) + ":" + XMLстрока(Порт) + "/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе = 1;
			oDocument = oDocuments.GetFirstOutgoingInvoice();
		Исключение   
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьРНакладную(oDocument) = Истина Цикл
			Попытка
				oDocument = oDocuments.GetNextOutgoingInvoice();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если АПЕР тогда
		//o = Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
		Попытка                               
			//Состояние("Подключаемся к серверу iiko!");
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина;
			фильтр.CutDownDishes=0;
			
			oDocuments = o.LoadTransformationsData("http://" + СокрЛП(ПутьКсерверу) + ":" + XMLстрока(Порт) + "/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе = 1;
			oDocument = oDocuments.GetFirstTransformation();
		Исключение   
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьПереработку(oDocument) = Истина Цикл
			Попытка
				oDocument = oDocuments.GetNextTransformation();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если АС тогда
		//o = Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
		Попытка                               
			//Состояние("Подключаемся к серверу iiko!");
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина;
			фильтр.CutDownDishes=0;
			
			oDocuments = o.LoadWriteoffsData("http://" + СокрЛП(ПутьКсерверу) + ":" + XMLстрока(Порт) + "/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе = 1;
			oDocument = oDocuments.GetFirstWriteoff();
		Исключение   
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьСписание(oDocument) = Истина Цикл
			Попытка
				oDocument = oDocuments.GetNextWriteoff();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;
	
	Если ИН тогда
		//o = Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
		Попытка                               
			//Состояние("Подключаемся к серверу iiko!");
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина;
			фильтр.CutDownDishes=0;
			

			oDocuments = o.LoadInventoriesData("http://" + СокрЛП(ПутьКсерверу) + ":" + XMLстрока(Порт) + "/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе = 1;
			oDocument = oDocuments.GetFirstInventory();
		Исключение   
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьИнвентаризацию(oDocument) = Истина Цикл
			Попытка
				oDocument = oDocuments.GetNextInventory();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла; 	
	КонецЕсли;
	
	Если БезналичныеОплаты = "ИзПриемаКассовойВыручки" и АР тогда
		//o = Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
		Попытка                               
			//Состояние("Подключаемся к серверу iiko!");
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
 			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина;
			фильтр.CutDownDishes=0;
			

			oDocuments = o.LoadProfitTakingData("http://" + СокрЛП(ПутьКсерверу) + ":" + XMLстрока(Порт) + "/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе = 1;
			oDocument = oDocuments.GetFirstProfitTaking();
		Исключение   
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьПКВ(oDocument) = Истина Цикл
			Попытка
				oDocument = oDocuments.GetNextProfitTaking();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли;
	
	Если ВН тогда
		//o = Новый COMОбъект("iiko1CInterface.InvoiceDataLoader");
		Попытка                               
			//Состояние("Подключаемся к серверу iiko!");
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина;
			фильтр.CutDownDishes=0;
			

			oDocuments = o.LoadReturnedInvoicesData("http://" + СокрЛП(ПутьКсерверу) + ":" + XMLстрока(Порт) + "/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе = 1;
			oDocument = oDocuments.GetFirstReturnedInvoice();
		Исключение   
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьВН(oDocument) = Истина Цикл
			Попытка
				oDocument = oDocuments.GetNextReturnedInvoice();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли;
	
	Если АУ тогда
		//o=Новый COMОбъект("iiko1CInterface.DocumentLoader");
		Попытка  
			ВерсияАйко=0;
					Попытка 
						к=Новый COMОбъект("iiko1CInterface.Version"); 
						в=к.ProtocolVersion;
						ВерсияАйко=Число(в);
					Исключение   
						//Сообщить("В данном периоде акты реализации не обнаружены! " + ОписаниеОшибки());
					КонецПопытки;	

			//Состояние("Подключаемся к серверу iiko!");
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина;
			фильтр.CutDownDishes=0;
			
			oInvoces=o.LoadOutgoingServiceData("http://"+СокрЛП(ПутьКсерверу)+":"+XMLстрока(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе=1;
			oInvoce = oInvoces.GetFirstInvoiceData();
		Исключение   
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьАУ(oInvoce)=истина Цикл
			Попытка
				oInvoce = oInvoces.GetNextInvoiceData();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если АПУ тогда
		//o=Новый COMОбъект("iiko1CInterface.DocumentLoader");
		Попытка                               
			//Состояние("Подключаемся к серверу iiko!");
			
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина;
			фильтр.CutDownDishes=0;
			 	
			oInvoces=o.LoadIncomingServiceData("http://"+СокрЛП(ПутьКсерверу)+":"+XMLстрока(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе=1;
			oInvoce = oInvoces.GetFirstInvoiceData();
		Исключение   
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьАктПриемаУслуг(oInvoce) = истина Цикл
			Попытка
				oInvoce = oInvoces.GetNextInvoiceData();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если Араз тогда
		o=Новый COMОбъект("iiko1CInterface.DocumentLoader");
		Попытка                               
			//Состояние("Подключаемся к серверу iiko!");
			фильтр = Новый COMОбъект("iiko1CInterface.DocumentFilter");
			фильтр.DateFrom=НачПериода;
			фильтр.DateTo=КонПериода;
			фильтр.UseOnlyDate=истина; 			
			Dis=o.LoadDisassembleData("http://"+СокрЛП(ПутьКсерверу)+":"+XMLстрока(Порт)+"/resto/",СокрЛП(Логин),СокрЛП(Пароль), Фильтр);
			ЕстьЧе=1;
			oDis = Dis.DocumentsGetFirstElement ();
		Исключение   
			Сообщение = ОписаниеОшибки();
			Если СтрНайти(Сообщение,"AUTH_FAILED") > 0 тогда 
				Сообщить("Неверные логин или пароль!");
				Возврат 0;
			ИначеЕсли СтрНайти(Сообщение,"CONNECTION_ERROR") > 0 тогда 			
				Сообщить("Неверные параметры доступа к базе!!!");
				Возврат 0; 
			Иначе
				Сообщить("Неизвестная ошибка" + ОписаниеОшибки());
				Возврат 0; 
			КонецЕсли;
		КонецПопытки;
		Пока ЗаписатьАРаз(oDis)=истина Цикл
			Попытка
				oDis = Dis.DocumentsGetNextElement();
			Исключение 
				Прервать;
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли;

	
	Возврат Естьче;
	
КонецФункции

&НаКлиенте
Процедура БухгалтерскаяКатегорияАналитикаПриИзменении(Элемент)
	
	ОбновитьГруппировку();
	
КонецПроцедуры

&НаСервере
Процедура ПанельГрупировкаГрупировкаСоздать(Кнопка)
	
КонецПроцедуры
 
&НаКлиенте
Процедура ГруппировкаСоздать(Команда)   
	
	Если (Элементы.ГруппаГруппировка.ПодчиненныеЭлементы.Группировка.ТекущиеДанные) = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Создать элемент номенклатуры с названием: " + 
	Элементы.ГруппаГруппировка.ПодчиненныеЭлементы.Группировка.ТекущиеДанные.СтавкаНДС + "?", РежимДиалогаВопрос.ДаНет); 
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Ном = СоздатьНоменклатуру(,Элементы.ГруппаГруппировка.ПодчиненныеЭлементы.Группировка.ТекущиеДанные.СтавкаНДС, 
	Элементы.ГруппаГруппировка.ПодчиненныеЭлементы.Группировка.ТекущиеДанные.Категория, 
	Элементы.ГруппаГруппировка.ПодчиненныеЭлементы.Группировка.ТекущиеДанные.НДС);
	Если Ном <>  Неопределено Тогда
		Элементы.ГруппаГруппировка.ПодчиненныеЭлементы.Группировка.ТекущиеДанные.Номенклатура = Ном;
		Форма = ПолучитьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", Ном));
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичныеОплатыПриИзменении()
	
	Элементы.ГруппаВидыОплаты.Видимость = (АР и БезналичныеОплаты = "ИзПриемаКассовойВыручки");
	Элементы.ГруппаВидыОплатыСчета.Видимость = (АР и БезналичныеОплаты = "ПоСчету");
	
КонецПроцедуры

&НаКлиенте
Процедура Поле12ПриИзменении(Элемент)
	
	ВидимостьПодразделения();	
	ДоступностьПКВ();	
	ВидимостьСДДС();
	ВидимостьСтатьиЗатрат();
	Элементы.ПКО_АР.Видимость = АР;
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияИзДокументаПриИзменении(Элемент)
	
	Элементы.Организация.Видимость = (ОрганизацияИзДокумента = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура Поле15ПриИзменении(Элемент)
	
	ВидимостьПодразделения();
	
КонецПроцедуры

&НаКлиенте
Процедура Поле19ПриИзменении(Элемент)
	
	ВидимостьПодразделения();
	ВидимостьСтатьиЗатрат();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(АдресПН) тогда 
		
		УдалитьИзВременногоХранилища(АДресПН);	
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресАП) тогда 
		
		УдалитьИзВременногоХранилища(АдресАП);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресАПЕР) тогда
		
		УдалитьИзВременногоХранилища(АдресАПЕР);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресАР) тогда
		
		УдалитьИзВременногоХранилища(АдресАР);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресАРиБезнал) тогда
		
		УдалитьИзВременногоХранилища(АдресАРиБезнал);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресАС) тогда 
		
		УдалитьИзВременногоХранилища(АдресАС);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресВерсииАйко) тогда 
		
		УдалитьИзВременногоХранилища(АдресВерсииАйко);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресВН) тогда 
		
		УдалитьИзВременногоХранилища(АдресВН);		
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресВП) тогда 
		
		УдалитьИзВременногоХранилища(АдресВП);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресИН) тогда 
		
		УдалитьИзВременногоХранилища(АдресИН);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресНомАйко) тогда 
		
		УдалитьИзВременногоХранилища(АдресНомАйко);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресРН) тогда 
		
		УдалитьИзВременногоХранилища(АдресРН);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресТекН) тогда 
		
		УдалитьИзВременногоХранилища(АдресТекН);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресАУ) тогда 
		
		УдалитьИзВременногоХранилища(АдресАУ);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресАПУ) тогда 
		
		УдалитьИзВременногоХранилища(АдресАПУ);
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(АдресАРаз) тогда 
		
		УдалитьИзВременногоХранилища(АдресАРаз);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПодготовитьЮрЛицо ()
	
	Если Юр = 0 Тогда
		Возврат "";
	КонецЕсли;	   
	СписокЮрлиц = Новый СписокЗначений;
	
	Если ПН и ЗначениеЗаполнено(АдресПН)Тогда
		Тз = ПолучитьИзВременногоХранилища(АдресПН);
		Для каждого Стр из Тз Цикл   
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресПН = ПоместитьВоВременноеХранилище(ТЗ, УИДФормы);
	КонецЕсли;
	
	Если ВП и ЗначениеЗаполнено(АдресВП) Тогда
		Тз2 = ПолучитьИзВременногоХранилища(АдресВП);
		Для каждого Стр из  Тз2 Цикл   
			Если ЗначениеЗаполнено(Стр.ЮЛотправительнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛотправительнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛотправительнаименование);   
				КонецЕсли;  
			КонецЕсли;   
		КонецЦикла;
		АдресВП = ПоместитьВоВременноеХранилище(Тз2, УИДФормы);
	КонецЕсли;
	
	Если РН и ЗначениеЗаполнено(АдресРН) Тогда
		Тз8 = ПолучитьИзВременногоХранилища(АдресРН);
		Для каждого Стр из  Тз8 Цикл  
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
		АдресРН = ПоместитьВоВременноеХранилище(Тз8, УИДФормы);
	КонецЕсли;
	
	Если АП и ЗначениеЗаполнено(АдресАП) Тогда
		Тз3 = ПолучитьИзВременногоХранилища(АдресАП);
		Для каждого Стр из  Тз3 Цикл  
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресАП = ПоместитьВоВременноеХранилище(Тз3, УИДФормы);
	КонецЕсли;
	
	Если АР и ЗначениеЗаполнено(АдресАР) Тогда
		Тз1 = ПолучитьИзВременногоХранилища(АдресАР);
		Для каждого Стр из  Тз1 Цикл 
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);     
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресАР = ПоместитьВоВременноеХранилище(Тз1, УИДФормы);
	КонецЕсли;
	
	Если АС и ЗначениеЗаполнено(АдресАС) Тогда
		Тз6 = ПолучитьИзВременногоХранилища(АдресАС);
		Для каждого Стр из  Тз6 Цикл  
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;  
			КонецЕсли;   
		КонецЦикла;
		АдресАС = ПоместитьВоВременноеХранилище(Тз6, УИДФормы);
	КонецЕсли;
	
	Если ИН и ЗначениеЗаполнено(АдресИН) Тогда
		Тз7 = ПолучитьИзВременногоХранилища(АдресИН);
		Для каждого Стр из  Тз7 Цикл    
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
		АдресИН = ПоместитьВоВременноеХранилище(Тз7, УИДФормы);
	КонецЕсли; 
	
	Если ВН и ЗначениеЗаполнено(АдресВН) Тогда
		Тз9 = ПолучитьИзВременногоХранилища(АдресВН);
		Для каждого Стр из  Тз9 Цикл    
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
		АдресВН = ПоместитьВоВременноеХранилище(Тз9, УИДФормы);
	КонецЕсли; 
	
	Если АПЕР и ЗначениеЗаполнено(АдресАПЕР) Тогда
		Тз5 = ПолучитьИзВременногоХранилища(АдресАпер);
		Для каждого Стр из  Тз5 Цикл    
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
		АдресАПЕР = ПоместитьВоВременноеХранилище(Тз5, УИДФормы);
	КонецЕсли;
	
	Если (БезналичныеОплаты = "ИзПриемаКассовойВыручки") и ЗначениеЗаполнено(АдресАРиБезнал) Тогда
		Тз4 = ПолучитьИзВременногоХранилища(АдресАРиБезнал);
		Для каждого Стр из  Тз4 Цикл    
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
		АдресАРиБезнал = ПоместитьВоВременноеХранилище(Тз4, УИДФормы);
	КонецЕсли; 
	
	Если АУ и ЗначениеЗаполнено(АдресАУ) Тогда
		Тз10 = ПолучитьИзВременногоХранилища(АдресАУ);
		Для каждого Стр из  Тз10 Цикл    
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
		АдресАУ = ПоместитьВоВременноеХранилище(Тз10, УИДФормы);
	КонецЕсли;
	
	Если АПУ и ЗначениеЗаполнено(АдресАПУ) Тогда
		Тз11 = ПолучитьИзВременногоХранилища(АдресАПУ);
		Для каждого Стр из  Тз11 Цикл    
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
		АдресАПУ = ПоместитьВоВременноеХранилище(Тз11, УИДФормы);
	КонецЕсли;
	
	Если Араз и ЗначениеЗаполнено(АдресАРаз) Тогда
		Тз12 = ПолучитьИзВременногоХранилища(АдресАРаз);
		Для каждого Стр из  Тз12 Цикл    
			Если ЗначениеЗаполнено(Стр.ЮЛнаименование) Тогда
				Если СписокЮрлиц.НайтиПоЗначению(Стр.ЮЛнаименование) = неопределено Тогда
					СписокЮрлиц.Добавить(Стр.ЮЛнаименование);  
				КонецЕсли;   
			КонецЕсли;   
		КонецЦикла;
		АдресАРаз = ПоместитьВоВременноеХранилище(Тз12, УИДФормы);
	КонецЕсли;
	Возврат СписокЮрЛиц;	
	
КонецФункции

&НаСервере
Функция ПодготовитьЮрЛицо2(юл)
	
	Если ВП и ЗначениеЗаполнено(АдресВП) Тогда
		Тз2 = ПолучитьИзВременногоХранилища(АдресВП);
		ФильтрПоЮрЛицамПеремещение(Тз2, юл);
		АдресВП = ПоместитьВоВременноеХранилище(Тз2, УИДФормы);
	КонецЕсли;   
	
	Если ПН и ЗначениеЗаполнено(АдресПН) Тогда
		Тз = ПолучитьИзВременногоХранилища(АдресПН);
		ФильтрПоЮрЛицам(Тз, юл);
		АдресПН = ПоместитьВоВременноеХранилище(Тз, УИДФормы);
	КонецЕсли; 
	
	Если АР и ЗначениеЗаполнено(АдресАР) Тогда
		Тз1 = ПолучитьИзВременногоХранилища(АдресАР);
		ФильтрПоЮрЛицам(Тз1, юл);  
		АдресАр = ПоместитьВоВременноеХранилище(Тз1, УИДФормы);
	КонецЕсли;  
	
	Если АП и ЗначениеЗаполнено(АдресАП) Тогда
		Тз3 = ПолучитьИзВременногоХранилища(АдресАП);
		ФильтрПоЮрЛицам(Тз3, юл);   
		АдресАП = ПоместитьВоВременноеХранилище(Тз3, УИДФормы);
	КонецЕсли;
	
	Если РН и ЗначениеЗаполнено(АдресРН) Тогда
		Тз8 = ПолучитьИзВременногоХранилища(АдресРН);
		ФильтрПоЮрЛицам(Тз8, юл);   
		АдресРН = ПоместитьВоВременноеХранилище(Тз8, УИДФормы);
	КонецЕсли;
	
	Если АС и ЗначениеЗаполнено(АдресАС) Тогда
		Тз6 = ПолучитьИзВременногоХранилища(АдресАС);
		ФильтрПоЮрЛицам(Тз6, юл);   
		АдресАС = ПоместитьВоВременноеХранилище(Тз6, УИДФормы);
	КонецЕсли; 
	
	Если ИН и ЗначениеЗаполнено(АдресИН) Тогда
		Тз7 = ПолучитьИзВременногоХранилища(АдресИН);
		ФильтрПоЮрЛицам(Тз7, юл);   
		АдресИН = ПоместитьВоВременноеХранилище(Тз7, УИДФормы);
	КонецЕсли;  
	
	Если ВН и ЗначениеЗаполнено(АдресВН) Тогда
		Тз9 = ПолучитьИзВременногоХранилища(АдресВН);
		ФильтрПоЮрЛицам(Тз9, юл);   
		АдресВН = ПоместитьВоВременноеХранилище(Тз9, УИДФормы);
	КонецЕсли;
	
	Если АПЕР и ЗначениеЗаполнено(АдресАПЕР) Тогда
		Тз5 = ПолучитьИзВременногоХранилища(АдресАПЕР);
		ФильтрПоЮрЛицам(Тз5, юл);   
		АдресАПЕР = ПоместитьВоВременноеХранилище(Тз5, УИДФормы);
	КонецЕсли; 
	
	Если (БезналичныеОплаты = "ИзПриемаКассовойВыручки") и ЗначениеЗаполнено(АдресАРиБезнал) Тогда
		Тз4 = ПолучитьИзВременногоХранилища(АдресАРиБезнал);
		ФильтрПоЮрЛицам(Тз4, юл);   
		АдресАРиБезнал = ПоместитьВоВременноеХранилище(Тз4, УИДФормы);
	КонецЕсли; 
	
	Если АУ и ЗначениеЗаполнено(АдресАУ) Тогда
		Тз10 = ПолучитьИзВременногоХранилища(АдресАУ);
		ФильтрПоЮрЛицам(Тз10, юл);   
		АдресАУ = ПоместитьВоВременноеХранилище(Тз10, УИДФормы);
	КонецЕсли;
	
	Если АПУ и ЗначениеЗаполнено(АдресАПУ) Тогда
		Тз11 = ПолучитьИзВременногоХранилища(АдресАПУ);
		ФильтрПоЮрЛицам(Тз11, юл);   
		АдресАПУ = ПоместитьВоВременноеХранилище(Тз11, УИДФормы);
	КонецЕсли;
	
	Если АРаз и ЗначениеЗаполнено(АдресАРаз) Тогда
		Тз12 = ПолучитьИзВременногоХранилища(АдресАРаз);
		ФильтрПоЮрЛицам(Тз12, юл);   
		АдресАРаз = ПоместитьВоВременноеХранилище(Тз12, УИДФормы);
	КонецЕсли;
	
	Возврат СокрЛП(НужноеЮрЛицо);
	
	
КонецФункции

/// сохранение/загрузка таблиц соответствия

&НаСервере
Процедура КнопкаСохранитьНажатие(Элемент)
	
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН); 
	ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Очистить();
	
	Для каждого Стр из ТаблицаЕдиницыИзмерений цикл
		старая = ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Найти(Стр.ЕдиницаИзмеренияАйко, "НазваниеАйко");
		Если ЗначениеЗаполнено(Стр.ЕдиницаИзмерения1С) и не ЗначениеЗаполнено(старая) Тогда 
			изм = ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Добавить();	
			изм.НазваниеАйко = СокрЛП(Стр.ЕдиницаИзмеренияАйко);
			изм.Значение = Стр.ЕдиницаИзмерения1С;
		КонецЕсли;
	КонецЦикла;
	
	ТекущаяНастройка.СохраненнаяНастройка.ОбщиеНастройки.ЕдиницаИзмренияДефолтная = ЕдиницаИзмеренияДефолтная;
	СохранениеНастроек(ТекущаяНастройка);
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СохранитьСклады() 
	
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);
	Ошибок = 0;
	
	Для каждого Стр из Объект.Склады цикл
		Если не ЗначениеЗаполнено(Стр.Склад) Тогда
			Сообщить("Для загруженного склада " + Стр.СкладНаименование +  " не сопоставлен склад в 1с", СтатусСообщения.ОченьВажное);
			Ошибок = Ошибок  + 1;
		Иначе
			Код = (Стр.СкладКод);
			Если ПустаяСтрока(Код) Тогда
				Код = Стр.СкладНаименование;
			КонецЕсли;
			строка = ТекущаяНастройка.СохраненнаяНастройка.Склады.Найти(Код, "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				строка.Значение = Стр.Склад;
				строка.Подразделение = Стр.Подразделение;
			Иначе
				новаяСтрока = ТекущаяНастройка.СохраненнаяНастройка.Склады.Добавить();
				новаяСтрока.КодАйко = Код;
				новаяСтрока.Значение = Стр.Склад;
				новаяСтрока.Подразделение = Стр.Подразделение;
			КонецЕсли;
		КонецЕсли
	КонецЦИкла;
	
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);
	Возврат Ошибок;
	
КонецФункции

&НаСервере
Функция СохранитьГруппировку() 
	
	Ошибок = 0;
	
	Для каждого Стр из Объект.Группировка цикл
		Если не ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Сообщить("Для ставки НДС " + Стр.СтавкаНДС + " не сопоставлена номенклатура в 1с!", СтатусСообщения.ОченьВажное);
			Ошибок = Ошибок  + 1;
			продолжить;
		КонецЕсли;
		
		кодАйко = СокрЛП(Стр.СтавкаНДС) + "-" + СокрЛП(Стр.Категория);
		строка = ТекущаяНастройка.СохраненнаяНастройка.Группировка.Найти(кодАйко, "КодАйко");
		
		Если ЗначениеЗаполнено(строка) Тогда
			строка.Значение = Стр.Номенклатура;
		Иначе
			новаяСтрока = ТекущаяНастройка.СохраненнаяНастройка.Группировка.Добавить();
			новаяСтрока.КодАйко = кодАйко;
			новаяСтрока.Значение = Стр.Номенклатура;
		КонецЕсли;
	КонецЦИкла;
	
	Возврат Ошибок;
	
КонецФункции

&НаСервере
Функция СохранитьНоменклатуру() 
	
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);
	Ошибок = 0;
	
	Для каждого Стр из Объект.Номенклатура цикл
		Если не ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Сообщить("Для загруженной номенклатуры " + Стр.ННаименованиеИИКО + " не сопоставлена номенклатура в 1с", СтатусСообщения.ОченьВажное);
			Ошибок = Ошибок + 1;
			Продолжить;
		КонецЕсли;;
		
		Если ПустаяСтрока(Стр.НКодИИКО) Тогда
			продолжить;
		КонецЕсли;
		
		кодАйко = СокрЛП(Стр.НКодИИКО);
		строка = ТекущаяНастройка.СохраненнаяНастройка.Номенклатура.Найти(кодАйко, "КодАйко");
		Если ЗначениеЗаполнено(строка) Тогда
			строка.Значение = Стр.Номенклатура;
		Иначе
			новаяСтрока = ТекущаяНастройка.СохраненнаяНастройка.Номенклатура.Добавить();
			новаяСтрока.КодАйко = кодАйко;
			новаяСтрока.Значение = Стр.Номенклатура;
		КонецЕсли;
		
	КонецЦикла;
	
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);
	Возврат  Ошибок;
	
КонецФункции

&НаСервере
Функция СохранитьФизЛица()  
	
	Если Объект.ФизЛица.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Ошибок = 0;
	
	Для каждого Стр из Объект.ФизЛица цикл
		Если не ЗначениеЗаполнено(Стр.Название1С) Тогда
			Сообщить("Для физ лица " + Стр.НазваниеАйко + " не сопоставлено физ. лицо в 1С!", СтатусСообщения.ОченьВажное);
			//Ошибок = Ошибок  + 1;
			продолжить;
		КонецЕсли;
		Если ПустаяСтрока(Стр.КодАйко) Тогда
			продолжить;
		КонецЕсли;
		
		кодАйко = СокрЛП(Стр.КодАйко);
		строка = ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Найти(кодАйко, "КодАйко");
		Если ЗначениеЗаполнено(строка) Тогда
			строка.Значение = Стр.Название1С;
		Иначе
			новаяСтрока = ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Добавить();
			новаяСтрока.КодАйко = кодАйко;
			новаяСтрока.Значение = Стр.Название1С;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ошибок;
	
КонецФункции

&НаСервере
Функция СохранитьТипыОплат() 
	Ошибок = 0;
	Если БезналичныеОплаты = "НеГрузить" Тогда
		Возврат 0;
	КонецЕсли;
	
	Если БезналичныеОплаты = "ИзПриемаКассовойВыручки" Тогда	
		Для каждого Стр из Объект.ВидыОплаты цикл
			Если не ЗначениеЗаполнено(Стр.ВидОплаты) Тогда
				Сообщить("Для Вида оплаты " + Стр.ВидОплатыИИКО + " не сопоставлен вид оплаты в 1с!", СтатусСообщения.ОченьВажное);
				Ошибок = Ошибок + 1;
				продолжить;
			КонецЕсли;
			Если ПустаяСтрока(Стр.КодИИКО) Тогда
				продолжить;
			КонецЕсли;
			
			кодАйко = СокрЛП(Стр.КодИИКО);
			строка = ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Найти(кодАйко, "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				строка.Значение = Стр.ВидОплаты;
			Иначе
				//новаяСтрока = ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Добавить();
				новаяСтрока = ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Добавить();
				новаяСтрока.КодАйко = кодАйко;
				новаяСтрока.Значение = Стр.ВидОплаты;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Если БезналичныеОплаты = "ПоСчету" Тогда	
		//хб4.индексы.Добавить("IDXCODE","CODEIAC",Истина);
		Для каждого Стр из ОБъект.ВидыОплатыСчета цикл
			Если не ЗначениеЗаполнено(Стр.ВидОплаты) Тогда
				Сообщить("Для счета " + Стр.НазваниеАйко + " не сопоставлен вид оплаты в 1с!", СтатусСообщения.ОченьВажное);
				//Ошибок = Ошибок  + 1;
				продолжить;
			КонецЕсли;
			
			кодАйко = СокрЛП(Стр.КодАйко);
			строка = ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Найти(кодАйко, "КодАйкоСчет");
			Если ЗначениеЗаполнено(строка) Тогда
				строка.Значение = Стр.ВидОплаты;
			Иначе
				//новаяСтрока = ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Добавить();
				//новаяСтрока.КодАйко = кодАйко;
				новаяСтрока = ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Добавить();
				новаяСтрока.КодАйкоСчет = кодАйко;
				новаяСтрока.Значение = Стр.ВидОплаты;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
	
	Возврат Ошибок;
КонецФункции

&НаСервере
Процедура ЗагрузитьЕденицыИзмеренийИзДбф()
	
	Путькфайлу = КаталогБазы + "\eizm.dbf";
	файл = новый файл(Путькфайлу);
	
	Если файл.Существует() Тогда
		хб4 = новый xbase;
		Путькиндексу = КаталогБазы + "\eizm.cdx";
		хб4.ОткрытьФайл(Путькфайлу,Путькиндексу);
		Если хб4.Открыта() Тогда
			хб4.Переиндексировать();
			хб4.ТекущийИндекс = хб4.индексы.idxcode;
			хб4.Первая(); 
			Пока хб4.ВКонце() = 0 Цикл 
				код = СокрЛП(хб4.ПолучитьЗначениеПоля("CODEIIKO"));
				измерение = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(
				СокрЛП(хб4.ПолучитьЗначениеПоля("CODE1C")));
				Если не ПустаяСтрока(код) и ЗначениеЗаполнено(измерение) тогда
					изм = ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Добавить();	
					изм.НазваниеАйко = код;
					изм.Значение = измерение;
				КонецЕсли;
				хб4.Следующая();
			КонецЦикла;	
			хб4.ЗакрытьФайл();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранениеНастроек(ТекущаяНастройка)
	
	Попытка
		МенеджерЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
		МенеджерЗаписей.Отбор.Объект.Значение = Неопределено;
		МенеджерЗаписей.Отбор.Объект.Использование = Истина;
		МенеджерЗаписей.Прочитать();
		
		Если МенеджерЗаписей.Количество() = 0 тогда 
			МенеджерЗаписи = МенеджерЗаписей.Добавить();
		Иначе 
			МенеджерЗаписи = МенеджерЗаписей.Получить(0);
		КонецЕсли;
				
		МенеджерЗаписи.Объект = Неопределено;
		МенеджерЗаписи.ВерсияОбъекта = Новый ХранилищеЗначения(ТекущаяНастройка);
		МенеджерЗаписей.ОбменДанными.Загрузка = Истина;
		МенеджерЗаписей.Записать();
		
	Исключение
		Сообщить("Не удалось сохранить настройки: " + ОписаниеОшибки());
	КонецПопытки;

	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройки()
	
	Фильтр = Новый Структура("Объект, НомерВерсии", "iiko->БП30", 0);
	//НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьМенеджерЗаписи();
	ХранилищеЗаписи = РегистрыСведений.ВерсииОбъектов.Получить(Фильтр);
	
	Возврат ХранилищеЗаписи;
	
КонецФункции

&НаСервере
Процедура ВосстановтьНастройки()
	соединение = СтрокаСоединенияИнформационнойБазы();
	КаталогБазы = Прав(соединение,СтрДлина(СтрокаСоединенияИнформационнойБазы())-6);
	КаталогБазы = Лев(КаталогБазы,СтрДлина(КаталогБазы)-2);
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);
	ВостановленнаяНастройка = ТекущаяНастройка;
	
	Если не ЗначениеЗаполнено(ВостановленнаяНастройка) Тогда
		//ЗагрузитьЕденицыИзмеренийИзДбф();
		//ЗагрузитьПоставщиковИзДбф();
		//ЗагрузитьСкладыИзДбф();
		//ЗагрузитьКатегорииИзДбф();
		//ЗагрузитьГруппировкуИзДбф();
		//ЗагрузитьНоменклатуруИзДбф();
		//ЗагрузитьФизЛицаИзДбф();
		//ЗагрузитьТипыОплатИзДбф();
		СохранениеНастроек(ТекущаяНастройка);
		Возврат;
	КонецЕсли;	
	
	СохраненнаяНастойка = ВостановленнаяНастройка.СохраненнаяНастройка;
	
	Попытка
		ВостановитьЕденицыИзмерений(СохраненнаяНастойка);
	Исключение
		//ЗагрузитьЕденицыИзмеренийИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьПоставщиков(СохраненнаяНастойка);
	Исключение
		//ЗагрузитьПоставщиковИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьСклады(СохраненнаяНастойка);
	Исключение
		//ЗагрузитьСкладыИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьКатегории(СохраненнаяНастойка);
	Исключение
		//ЗагрузитьКатегорииИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьГруппировку(СохраненнаяНастойка);
	Исключение
		//ЗагрузитьГруппировкуИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьНоменклатуру(СохраненнаяНастойка);
	Исключение
		//ЗагрузитьНоменклатуруИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьФизЛица(СохраненнаяНастойка);
	Исключение
		//ЗагрузитьФизЛицаИзДбф();
	КонецПопытки;
	
	Попытка
		ВостановитьТипыОплат(СохраненнаяНастойка);
	Исключение
		//ЗагрузитьТипыОплатИзДбф();
	КонецПопытки;
	
	СохранениеНастроек(ТекущаяНастройка);
	
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройку()
	
	Результат = Неопределено;
	
	МенеджерЗаписи = РегистрыСведений.ВерсииОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = "iiko->БП30";
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() тогда
		Результат = МенеджерЗаписи.ВерсияОбъекта.Получить();
		Возврат Результат;
	Иначе
		Сообщить("Сохраненные настройки не обнаружены!");
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПоставщиковИзДбф()
	
	хб1 = новый xbase;
	Путькфайлу = КаталогБазы + "\kontr.dbf";
	Путькиндексу = КаталогБазы + "\kontr.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	Пока хб1.ВКонце() = 0 Цикл
		Код1С = СокрЛП(хб1.CODES);
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(Код1С, Истина);
		Если ЗначениеЗаполнено(Контрагент) Тогда 
			изм = ТекущаяНастройка.СохраненнаяНастройка.Поставщики.Добавить();	
			изм.КодАйко = СокрЛП(хб1.CODE);
			изм.Значение = Контрагент;
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	
	хб1.ЗакрытьФайл();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСкладыИзДбф()
	
	хб1 = новый xbase;
	Путькфайлу = КаталогБазы + "\sklad.dbf";
	Путькиндексу = КаталогБазы + "\sklad.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	Пока хб1.ВКонце() = 0 Цикл
		Код1С = СокрЛП(хб1.CODES);
		Склад = Справочники.Склады.НайтиПоКоду(Код1С, Истина);
		
		Если не ЗначениеЗаполнено(Склад) Тогда
			Склад = Справочники.Склады.НайтиПоНаименованию(Код1С, Истина);	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Склад) Тогда 
			изм = ТекущаяНастройка.СохраненнаяНастройка.Склады.Добавить();	
			изм.КодАйко = СокрЛП(хб1.CODE);
			изм.Значение = Склад;
			Если хб1.поля.Количество() = 3 Тогда
				Подр = СокрЛП(хб1.ПолучитьЗначениеПоля("DEP"));
				Если ЗначениеЗаполнено(Подр) Тогда
					изм.Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Подр, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		хб1.Следующая();
	КонецЦикла;
	
	хб1.ЗакрытьФайл();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКатегорииИзДбф()
	
	хб1 = новый xbase;
	Путькфайлу = КаталогБазы + "\categ.dbf";
	Путькиндексу = КаталогБазы + "\categ.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	
	Пока хб1.ВКонце() = 0 Цикл
		Код1С = СокрЛП(хб1.CODE1C);
		Группа = Справочники.Номенклатура.НайтиПоКоду(Код1С, Истина);
		Если ЗначениеЗаполнено(Группа) и Группа.ЭтоГруппа тогда
			Стр = ТекущаяНастройка.СохраненнаяНастройка.Категории.Добавить();
			Стр.КодАйко = СокрЛП(хб1.CODEIIKO);
			Стр.Значение = Группа;
			Стр.Аналитика = СокрЛП(хб1.ANALIT);
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	
	хб1.ЗакрытьФайл();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьГруппировкуИзДбф()
	
	хб1 = новый xbase;
	Путькфайлу = КаталогБазы + "\grupp.dbf";
	Путькиндексу = КаталогБазы + "\grupp.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	
	Пока хб1.ВКонце() = 0 Цикл
		Код1С = СокрЛП(хб1.CODES);
		Товар = Справочники.Номенклатура.НайтиПоКоду(Код1С, Истина);
		Если ЗначениеЗаполнено(Товар) и не Товар.ЭтоГруппа тогда
			Стр = ТекущаяНастройка.СохраненнаяНастройка.Группировка.Добавить();
			Стр.КодАйко = СокрЛП(хб1.CODE);
			Стр.Значение = Товар;
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	
	хб1.ЗакрытьФайл();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНоменклатуруИзДбф()
	
	хб1 = новый xbase;
	
	Путькфайлу = КаталогБазы + "\nomendl.dbf";
	Путькиндексу = КаталогБазы + "\nomendl.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	
	Пока хб1.ВКонце() = 0 Цикл
		Код1С = СокрЛП(хб1.CODES);
		Товар = Справочники.Номенклатура.НайтиПоКоду(Код1С, Истина);
		Если ЗначениеЗаполнено(Товар) и не Товар.ЭтоГруппа тогда
			Стр = ТекущаяНастройка.СохраненнаяНастройка.Номенклатура.Добавить();
			Стр.КодАйко = СокрЛП(хб1.CODE);
			Стр.Значение = Товар;
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	
	хб1.ЗакрытьФайл();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФизЛицаИзДбф()
	хб1 = новый xbase;
	Путькфайлу = КаталогБазы + "\fislicho.dbf";
	Путькиндексу = КаталогБазы + "\fislicho.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	Пока хб1.ВКонце() = 0 Цикл
		Код1С = СокрЛП(хб1.CODE1C);
		Значение = Справочники.ФизическиеЛица.НайтиПоКоду(Код1С, Истина);
		Если ЗначениеЗаполнено(Значение) тогда
			Стр = ТекущаяНастройка.СохраненнаяНастройка.ФизЛица.Добавить();
			Стр.КодАйко = СокрЛП(хб1.CODEIIKO);
			Стр.Значение = Значение;
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	хб1.ЗакрытьФайл();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТипыОплатИзДбф()
	хб1 = новый xbase;
	Путькфайлу = КаталогБазы + "\pkv2.dbf";
	Путькиндексу = КаталогБазы + "\pkv2.cdx";
	хб1.ОткрытьФайл(Путькфайлу,Путькиндексу);
	Если не хб1.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	хб1.Первая();
	Пока хб1.ВКонце() = 0 Цикл
		Код1С = СокрЛП(хб1.CODE1C);
		Значение = Справочники.ВидыОплатОрганизаций.НайтиПоКоду(Код1С, Истина);
		Если ЗначениеЗаполнено(Значение) тогда
			Стр = ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат.Добавить();
			Стр.КодАйко = СокрЛП(хб1.CODEIPT);
			Стр.Значение = Значение;
			Стр.КодАйкоСчет = СокрЛП(хб1.CODEIAC);
			Стр.Игнорировать = СокрЛП(хб1.IGN);
		КонецЕсли;	
		хб1.Следующая();
	КонецЦикла; 
	хб1.ЗакрытьФайл();
КонецПроцедуры

&НаСервере
Процедура ВостановитьЕденицыИзмерений(СохраненнаяНастойка)
	
	Если СохраненнаяНастойка.ЕдиницыИзмерений.Количество() = 0 Тогда
		//ЗагрузитьЕденицыИзмеренийИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений = СохраненнаяНастойка.ЕдиницыИзмерений;
		ТекущаяНастройка.СохраненнаяНастройка.ОбщиеНастройки.ЕдиницаИзмренияДефолтная = СохраненнаяНастойка.ОбщиеНастройки.ЕдиницаИзмренияДефолтная;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВостановитьПоставщиков(СохраненнаяНастойка)
	Если СохраненнаяНастойка.Поставщики.Количество() = 0 Тогда
		ЗагрузитьПоставщиковИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.Поставщики = СохраненнаяНастойка.Поставщики;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ВостановитьСклады(СохраненнаяНастойка)
	Если СохраненнаяНастойка.Склады.Количество() = 0 Тогда
		ЗагрузитьСкладыИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.Склады = СохраненнаяНастойка.Склады;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ВостановитьКатегории(СохраненнаяНастойка)
	Если СохраненнаяНастойка.Категории.Количество() = 0 Тогда
		ЗагрузитьКатегорииИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.Категории = СохраненнаяНастойка.Категории;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ВостановитьГруппировку(СохраненнаяНастойка)
	Если СохраненнаяНастойка.Группировка.Количество() = 0 Тогда
		ЗагрузитьГруппировкуИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.Группировка = СохраненнаяНастойка.Группировка;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ВостановитьНоменклатуру(СохраненнаяНастойка)
	Если СохраненнаяНастойка.Номенклатура.Количество() = 0 Тогда
		ЗагрузитьНоменклатуруИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.Номенклатура = СохраненнаяНастойка.Номенклатура;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ВостановитьФизЛица(СохраненнаяНастойка)
	
	Если СохраненнаяНастойка.ФизЛица.Количество() = 0 Тогда
		ЗагрузитьФизЛицаИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.ФизЛица = СохраненнаяНастойка.ФизЛица;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВостановитьТипыОплат(СохраненнаяНастойка)
	
	Если СохраненнаяНастойка.ТипыОплат.Количество() = 0 Тогда
		ЗагрузитьТипыОплатИзДбф();
	Иначе
		ТекущаяНастройка.СохраненнаяНастройка.ТипыОплат = СохраненнаяНастойка.ТипыОплат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);
	ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Очистить();
	Для каждого стр из ТаблицаЕдиницыИзмерений цикл
		старая = ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Найти(Стр.ЕдиницаИзмеренияАйко, "НазваниеАйко");
		Если ЗначениеЗаполнено(Стр.ЕдиницаИзмерения1С) и не ЗначениеЗаполнено(старая) Тогда 
			изм = ТекущаяНастройка.СохраненнаяНастройка.ЕдиницыИзмерений.Добавить();	
			изм.НазваниеАйко = СокрЛП(Стр.ЕдиницаИзмеренияАйко);
			изм.Значение = Стр.ЕдиницаИзмерения1С;
		КонецЕсли;
	КонецЦикла;
	ТекущаяНастройка.СохраненнаяНастройка.ОбщиеНастройки.ЕдиницаИзмренияДефолтная=ЕдиницаИзмеренияДефолтная;
	СохранениеНастроек(ТекущаяНастройка);
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВидимостьПодразделения();
	ДоступностьПКВ();
	ВидимостьСДДС();
    Элементы.Кнопка6.Доступность = ложь;
	элементы.Кнопка7.доступность = ложь;
	Элементы.НоменклатураСоздать.Доступность = Ложь;
	Элементы.НоменклатураСоздатьВсе.Доступность = Ложь;
	Элементы.СкладыСоздать.Доступность = Ложь;
	Элементы.СкладыСоздатьВсе.Доступность = Ложь;
	Элементы.ГруппировкаСоздать.Доступность = Ложь;
	Элементы.ГруппировкаСоздатьВсе.Доступность = Ложь;
	Элементы.ПКО_АР.Видимость = АР;
	АналитикаДокументов = "По Документам";
	ВидимостьРКО();
	ВидимостьПКО();
	Если не ЗначениеЗаполнено(Объект.ПНПрефикс) тогда		
		Объект.ПНПрефикс = "!А";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.АР_ООРППрефикс) тогда		
		Объект.АР_ООРППрефикс = "!А";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.АР_ОПЗСПрефикс) тогда		
		Объект.АР_ОПЗСПрефикс = "!А";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.АС_СТПрефикс) тогда		
		Объект.АС_СТПрефикс = "!АС";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.АС_ОПЗСПрефикс) тогда		
		Объект.АС_ОПЗСПрефикс = "!С";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.РН_РТУПрефикс) тогда		
		Объект.РН_РТУПрефикс = "!РН";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.РН_ОПЗСПрефикс) тогда		
		Объект.РН_ОПЗСПрефикс = "!Р";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.ВППрефикс) тогда		
		Объект.ВППрефикс = "!А";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.АПерараоткиПрефикс) тогда		
		Объект.АПерараоткиПрефикс = "!АП";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.АПриготовленияПрефикс) тогда		
		Объект.АПриготовленияПрефикс = "!АПР";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.ИНВПрефикс) тогда		
		Объект.ИНВПрефикс = "!И";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.ВНПрефикс) тогда		
		Объект.ВНПрефикс = "!А";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.АПУ_Префикс) тогда		
		Объект.АПУ_Префикс = "!АУ";
	КонецЕсли;
	Если не ЗначениеЗаполнено(ОБъект.АУ_Префикс) тогда		
		ОБъект.АУ_Префикс = "!АУ";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.ДеньАРаз_Префикс) тогда		
		Объект.ДеньАРаз_Префикс = "!АР";
	КонецЕсли;	
	Если не ЗначениеЗаполнено(Объект.ДеньАС_ОПЗСПрефикс) тогда		
		Объект.ДеньАС_ОПЗСПрефикс = "!С";
	КонецЕсли; 
	Если Объект.НеИспользоватьПрефикс тогда 
		Объект.ПНПрефикс = "";
		Объект.АР_ООРППрефикс = "";
		Объект.АР_ОПЗСПрефикс = "";
		Объект.АС_СТПрефикс = "";
		Объект.АС_ОПЗСПрефикс = "";
		Объект.РН_РТУПрефикс = "";
		Объект.РН_ОПЗСПрефикс = "";
		Объект.ВППрефикс = "";
		Объект.АПерараоткиПрефикс = "";
		Объект.АПриготовленияПрефикс = "";
		Объект.ИНВПрефикс = "";
		Объект.ВНПрефикс = "";
		Объект.АПУ_Префикс = "";
		ОБъект.АУ_Префикс = "";
		Объект.ДеньАРаз_Префикс = "";
		Объект.ДеньАС_ОПЗСПрефикс = "";
	КонецЕсли;		
	
	Элементы.СтатьяЗатратУслуги.Видимость = ПН или АПУ;
	ВидимостьСтатьиЗатрат();	
	Элементы.Поле2.Видимость = ИН;
	Элементы.Статьи.Видимость = АС;
	Элементы.Организация.Видимость = НЕ ОрганизацияИзДокумента;
	Элементы.РасходыНУ.Видимость = ПН;
	//Элементы.ОрганизацияИзДокумента.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьСДДС()
	
	   Элементы.СтатьяДДС.Видимость = АР или АУ;
	   
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаименование1СПриИзменении(Элемент)
	
	Номенклатура = Элементы.Номенклатура.ТекущиеДанные.Номенклатура;
	ТекущаяСтрока = Этаформа.ТекущийЭлемент.ТекущиеДанные;
	ТекущаяСтрока.Код1С = ЗаполнитьНоменклатуруИндивидуально(Номенклатура);
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНоменклатуруИндивидуально(Номенклатура)
	              
	Возврат Номенклатура.код;
	
КонецФункции

&НаКлиенте
Процедура КонтрагентыКонтрагентПриИзменении(Элемент)
	
	Контрагент = Элементы.Контрагенты.ТекущиеДанные.Контрагент;
	ТекущаяСтрока = Этаформа.ТекущийЭлемент.ТекущиеДанные;
    ДанныеКонтрагента = ЗаполнитьКонтрагентаИндивидуально(Контрагент);
	ТекущаяСтрока.Код1с = ДанныеКонтрагента.Код;
	ТекущаяСтрока.Инн1с = ДанныеКонтрагента.Инн;
	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьКонтрагентаИндивидуально(Контрагент)
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("Инн", Контрагент.ИНН);
	ДанныеКонтрагента.Вставить("Код", Контрагент.Код);
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

&НаКлиенте
Процедура СкладыОчистить(Команда)
	
	Если Вопрос("Очистить таблицу соответствий?",РежимДиалогаВопрос.ДаНет,0) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	
	Для Каждого Стр из Объект.Склады Цикл
		Стр.Склад = "";
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура СохранитьКатегории()
	
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);
	
	Для каждого стр из Объект.БухгалтерскаяКатегория цикл
		Если не ЗначениеЗаполнено(Стр.Группа1С) Тогда
			продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Стр.КатегорияАйкоКод) Тогда
			продолжить;
		КонецЕсли;
		
		строка = ТекущаяНастройка.СохраненнаяНастройка.Категории.Найти(СокрЛП(Стр.КатегорияАйкоКод), "КодАйко");
		Если ЗначениеЗаполнено(строка) Тогда
			строка.Значение = Стр.Группа1С;
			строка.Аналитика = СокрЛП(Стр.Аналитика);
		Иначе
			новаяСтрока = ТекущаяНастройка.СохраненнаяНастройка.Категории.Добавить();
			новаяСтрока.КодАйко = СокрЛП(Стр.КатегорияАйкоКод);
			новаяСтрока.Значение = Стр.Группа1С;
			новаяСтрока.Аналитика = СокрЛП(Стр.Аналитика);
		КонецЕсли;
	КонецЦикла;
	
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНоменклатуруНаКлиенте ()
	
	Для каждого Строка из Объект.Номенклатура цикл
		Если ЗначениеЗаполнено(строка.Номенклатура) тогда
			Строка.Код1С = Строка.Номенклатура.Код;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СохранитьКонтрагентов() 
	
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);
	Ошибок = 0;
	Для каждого стр из Объект.Контрагенты цикл
		Если не ЗначениеЗаполнено(Стр.Контрагент) Тогда
			Сообщить("Для загруженного контрагента "+стр.КНаименованиеИИКО+" не сопоставлен контрагент в 1с", СтатусСообщения.ОченьВажное);
			Ошибок = Ошибок +1;
		Иначе
			Если ПустаяСтрока(Стр.ККодИИКО) Тогда
				продолжить;
			КонецЕсли;
			строка = ТекущаяНастройка.СохраненнаяНастройка.Поставщики.Найти(СокрЛП(Стр.ККодИИКО), "КодАйко");
			Если ЗначениеЗаполнено(строка) Тогда
				строка.Значение = Стр.Контрагент;
			Иначе
				новаяСтрока = ТекущаяНастройка.СохраненнаяНастройка.Поставщики.Добавить();
				новаяСтрока.КодАйко = СокрЛП(Стр.ККодИИКО);
				новаяСтрока.Значение = Стр.Контрагент;
			КонецЕсли;
		КонецЕсли
	КонецЦИкла;
	
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);
	возврат Ошибок;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьГруппировка(Команда)
	
	Если Вопрос("Заполнить соответствия по названию?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	
	 ЗаполнитьГруппировкуНаСервере();
	 
	 Элементы.ГруппировкаСоздать.Доступность = Истина;
	 Элементы.ГруппировкаСоздатьВсе.Доступность = Истина;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьГруппировкуНаСервере()
	
	Для Каждого Стр из Объект.Группировка Цикл
        Элемм = Справочники.Номенклатура.ПустаяСсылка();
		Если не ЗначениеЗаполнено(Стр.Номенклатура) тогда   
			катег = Объект.БухгалтерскаяКатегория.НайтиСтроки(Новый Структура("КатегорияАйко", Стр.Категория));
			Если катег.количество() <> 0  и ЗначениеЗаполнено(катег[0].Группа1С) Тогда
				Элемм  =Справочники.Номенклатура.НайтиПоНаименованию(Стр.СтавкаНДС,истина, катег[0].Группа1С);
				Если Элемм.ЭтоГруппа тогда
					Элемм = Справочники.Номенклатура.ПустаяСсылка();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемм) тогда
			Стр.Номенклатура = Элемм.Ссылка;
			Стр.Код1С = Элемм.Код;
		КонецЕСли;	
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура СкладыСкладПриИзменении(Элемент)
	
	Склад = Элементы.Склады.ТекущиеДанные.Склад;
	ТекущаяСтрока = Этаформа.ТекущийЭлемент.ТекущиеДанные;
    ТекущаяСтрока.Наименование1с = СкладыПриИзмененииНаСервере(Склад);
	
КонецПроцедуры

&НаСервере
Функция СкладыПриИзмененииНаСервере(Склад)
	
	возврат склад.наименование
	
КонецФункции

&НаКлиенте
Процедура ГруппировкаСоздатьВсе(Команда)
	Если Вопрос("Создать все номенклатурные позиции?",РежимДиалогаВопрос.ДаНет,0) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	
	СоздатьВсеГруппировкиНаСервере();

КонецПроцедуры

&НаСервере
Процедура СоздатьВсеГруппировкиНаСервере()
	
	  Для Каждого Стр из Объект.Группировка Цикл
		Если не ЗначениеЗаполнено(Стр.ГруппаНаименование) тогда
			Ном = СоздатьНоменклатуру(Неопределено, Стр.СтавкаНДС, Стр.Категория, Стр.НДС);
			Если Ном <> Неопределено Тогда
				
			 	Стр.Номенклатура = Ном.Ссылка;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция ЕстьСчетФактура(Документ)
	
	ВходНомер = Документ.СчетФактура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	СчетФактураПолученный.Ссылка,
	                |	СчетФактураПолученный.НомерВходящегоДокумента
	                |ИЗ
	                |	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	                |ГДЕ
	                |	СчетФактураПолученный.НомерВходящегоДокумента = &ВходНомер";  
					
					
	Запрос.УстановитьПараметр("ВходНомер", ВходНомер);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СоздатьАУ(табз,префикс,ДеньПрефикс,порядок)
	
	Тзз = Табз.скопировать();
	Тзз.Очистить();
	
	Для каждого стрр из тз10 цикл
		
		Стр = Тзз.Добавить();
		Стр.Дата =  Стрр.Дата;
		Стр.НомерДок =  Стрр.НомерДок;
		Стр.НКодИИКО =  Стрр.НКодИИКО;    
		Стр.ННаименованиеИИКО =  Стрр.ННаименованиеИИКО;    
		Стр.Группаучетаназвание =  Стрр.Группаучетаназвание;
		Стр.Количество =  Стрр.Количество;    
		Стр.ЦенасНДС =  Стрр.ЦенасНДС;    
		Стр.СуммапродажисНДС =  Стрр.СуммапродажисНДС;    
		Стр.СуммаНДС =  Стрр.СуммаНДС;    
		Стр.СтавкаНДСспродаж =  Стрр.СтавкаНДСспродаж;
		Стр.СтавкаНДС =  Стрр.СтавкаНДС;    
		Стр.Торговоепредприятиекод =  Стрр.Торговоепредприятиекод; 
		Стр.Торговоепредприятиенаименование =  Стрр.Торговоепредприятиенаименование; 
		Стр.ЮЛИНН =  ИсправленныйЮЛИНН(Стрр.ЮЛИНН);
		Стр.ЮЛнаименование =  Стрр.ЮЛнаименование;
		Стр.Движениеденежныхсредствкод =  Стрр.Движениеденежныхсредствкод;
		Стр.Движениеденежныхсредств =  Стрр.Движениеденежныхсредств;
		Стр.КИННИИКО =  ИсправленныйЮЛИНН(Стрр.КИННИИКО);
		Стр.ККодИИКО =  Стрр.ККодИИКО;
		Стр.КНаименованиеИИКО =  Стрр.КНаименованиеИИКО;    
		Стр.Комментарий = Стрр.Комментарий;
		Стр.КонцепцияКод = Стрр.КонцепцияКод;
		Стр.КонцепцияНазвание = Стрр.КонцепцияНазвание;
		Стр.ТипНоменклатурыКод = Стрр.ТипНоменклатурыКод;
		Стр.ТипНоменклатурыНазвание = Стрр.ТипНоменклатурыНазвание;
	КонецЦикла;
	
	Строки = ПодготовитьУслуги(Тзз);
	
	Доки = строки.Скопировать();
	Доки.Свернуть("Номер,Дата,ТорговоеПредприятиеКод,ЮЛИНН,Контрагент");
	СтарыйНомер = "";
	
	
	Для каждого ДокСтр из Доки Цикл	
		Если не ЗначениеЗаполнено(ДокСтр.Контрагент) тогда 
			номернаклиико = СокрЛП(докСтр.Номер) + "!" + "Акт Реализации";
			Если докСтр.Номер = СтарыйНомер тогда
				Сообщить("В iiko с номером " + СтарыйНомер + " от " + докСтр.Дата + " имеется акта оказания услуг, либо используется 2 склада!");
				Возврат;
			Иначе
				СтарыйНомер = докСтр.Номер;
			КонецЕсли;
			д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
			Если д.количество() = 0  или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;
			
			НомерДокумента = НомерНакладной(докСтр,докСтр.Номер,Префикс,ДеньПрефикс,"Расходная Накладная");
			Если НомерДокумента = Неопределено Тогда
				продолжить;
			КонецЕсли;
			
			
			Док = Документы.ОтчетОРозничныхПродажах.НайтиПоНомеру(НомерДокумента,докСтр.Дата);
			Если не ЗначениеЗаполнено(Док) Тогда
				Док = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
				Док.Номер = НомерДокумента;
			Иначе
				Если зд Тогда
					Док = Док.ПолучитьОбъект();
					Док.УстановитьПометкуУдаления(Ложь);
					Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					Сообщить("Отчет о розничных продажах № " + докСтр.Номер + " от " + докСтр.Дата + " существует!");
					Продолжить
				КОнецЕсли;
			КОнецЕсли;
			Док.Организация = НайтиОгранизациюПоИНН(ИсправленныйЮЛИНН(СокрЛП(Стр.ЮЛИНН)), истина);
			Док.Дата = докСтр.Дата;
			//Получим систему налогооблажения
			УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
			
			Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
				//НДСВСтоимости = Истина;
				УчитыватьНДС = Ложь;
			Иначе
				//НДСВСтоимости = Ложь;
				УчитыватьНДС = Истина;
			КонецЕсли;
			
			Док.Номер = НомерДокумента;			
			Док.ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
			Док.КурсДокумента=1;
			Док.СуммаВключаетНДС=истина;    		
			Док.ВидОперации=Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
			Док.СтатьяДвиженияДенежныхСредств=СтатьяДДС;		   			
			Док.СчетКасса= ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
			Док.ПодразделениеОрганизации = Подразделение;
			
			Док.Товары.Очистить();
			Док.Оплата.Очистить();			
			
			Выборка = Справочники.Склады.Выбрать(,,,); 		
			Пока Выборка.Следующий() цикл
				Если не Выборка.ПометкаУдаления и Выборка.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад и не Выборка.ЭтоГруппа Тогда
					Док.Склад = Выборка.Ссылка;
					Прервать; 				
				КонецЕсли;
			КонецЦикла;		
			
			
			Отб = Новый Структура("Номер",докСтр.Номер);
			НСтр = строки.НайтиСтроки(Отб);	
			
			ТабЧасть = Новый ТаблицаЗначений;
			Табчасть = Строки.Скопировать(НСтр);
			Табчасть.Свернуть("Номенклатура,СтавкаНДСспродаж","СуммаПродажисНДС,СуммаНДС,Количество");
			
			Для каждого стрр из Табчасть Цикл   			
				Стр2 = Док.Товары.Добавить(); 		 
				Стр2.Номенклатура = стрр.Номенклатура;  			
				Стр2.Количество = стрр.Количество;
				Стр2.Цена = стрр.СуммаПродажисНДС/Стрр.Количество;
				Стр2.Сумма = стрр.СуммаПродажисНДС;
				Стр2.СуммаНДС = стрр.СуммаНДС;   			
				Стр2.Субконто = ПолучитьНоменклатурнуюГруппу(Стрр.Номенклатура);
				СттНДС = Число(СокрЛП(Стрр.СтавкаНДСспродаж));
				Стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,Стр2.Сумма,Стр2.СуммаНДС);
				Строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если Строкк <>  неопределено тогда
					Стр2.СчетУчета = Строкк.СчетУчета;
					Стр2.СчетРасходов = Строкк.СчетРасходовОтРеализации;
					Стр2.СчетДоходов = Строкк.СчетДоходовОтРеализации;
					Стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
					//Заполним статью затрат. Если Заполненно в карточке элемента номенклатура, то заполняем так
					Если ЗначениеЗаполнено(Стрр.Номенклатура.СтатьяЗатрат) тогда
						Стр2.Субконто = Стрр.Номенклатура.СтатьяЗатрат;
					Иначе
						// Если нигде не заполненно, то ставим с первой вкладки
						Стр2.Субконто = СтатьяЗатрат; 					
					КонецЕсли;
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + докСтр.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
			КонецЦикла;
			//СохранитьДокумент1С(Док, "Акт реализации", Порядок, номернаклиико);
			ВремяДокумента = Документы.ОтчетОРозничныхПродажах.ВремяДокументаПоУмолчанию();
			УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
			
			Если Проводить тогда 
				Попытка 
					Док.Записать(РежимЗаписиДокумента.Проведение);  
					Сообщить("Проведен"+" Акт оказания услуг № "+Док.Номер+" от "+Док.Дата);
					//Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
					СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, СуммаДок, Дата", номернаклиико, док.СуммаДокумента, НачалоДня(Док.Дата)));						
					Если СтрокиДокумента.Количество() <> 0 тогда 
						СтрокиДокумента[0].Док = Док.Ссылка;
						НужнаКолонка = Истина;
					КонецЕсли;						
				Исключение
					Сообщить("Не удалось провести Акт оказания услуг № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
					Док.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
			Иначе
				Попытка 
					Док.Записать(РежимЗаписиДокумента.Запись);  
					Сообщить("Записан"+" Акт оказания услуг № "+Док.Номер+" от "+Док.Дата);
					//Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
					СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, СуммаДок, Дата", номернаклиико, док.СуммаДокумента, НачалоДня(Док.Дата)));						
					Если СтрокиДокумента.Количество() <> 0 тогда 
						СтрокиДокумента[0].Док = Док.Ссылка;
						НужнаКолонка = Истина;
					КонецЕсли;						
				Исключение
					Сообщить("Не удалось записать Акт оказания услуг № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				КонецПопытки;
			КОнецЕсли;

			Если СоздатьПКО тогда 
				//Док1 = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
				ПКООбъект = ПолучитьПКОПоДокументуОснования(Док);
				Если ПКООбъект = Неопределено Тогда
					Док1 = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
				Иначе
					Если зд Тогда
						Док1 = ПКООбъект;
						Док1.УстановитьПометкуУдаления(Ложь);
						Док1.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						Сообщить("Поступление наличных № " + Док1.Номер + " от " + Док1.Дата   + " существует!");
						Продолжить;					
					КонецЕсли;
				КонецЕсли;
				Док1.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка;
				Док1.Заполнить(Док);		
				Док1.ВалютаДокумента =  Константы.ВалютаРегламентированногоУчета.Получить();
				Док1.Дата = док.Дата ; 
				Док1.Организация = док.Организация;
				Док1.Комментарий ="Отчет о розничных продажах № " + док.Номер + " от " +  док.Дата+""; 
				Док1.СуммаДокумента = Док.СуммаДокумента; 
				Док1.СчетКасса = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
				Док1.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.1");
				Док1.ДокументОснование= Док; 
				Док1.Контрагент = док.Склад;
				Док1.ПринятоОт = "Гость";
				//Док1.СтатьяДвиженияДенежныхСредств = Док.СтатьяДвиженияДенежныхСредств;
				
				Док1.РасшифровкаПлатежа.Очистить();
				Строка = Док1.РасшифровкаПлатежа.Добавить();
				Строка.СуммаПлатежа = Док.СуммаДокумента;
				Строка.СтавкаНДС =  Перечисления.СтавкиНДС.БезНДС;
				Строка.СтатьяДвиженияДенежныхСредств = Док.СтатьяДвиженияДенежныхСредств;
				
				ВремяДокумента = Документы.ПриходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Док1,ВремяДокумента);
				
				Если Проводить тогда 
					Попытка 
						Док1.Записать(РежимЗаписиДокумента.Проведение);  
						Сообщить("Проведен"+" ПКО № "+Док1.Номер+" от "+Док1.Дата);
						//Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
						СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, СуммаДок, Дата", номернаклиико, док.СуммаДокумента, НачалоДня(Док.Дата)));						
						Если СтрокиДокумента.Количество() <> 0 тогда 
							СтрокиДокумента[0].Док2 = Док1.Ссылка;
							НужнаКолонка = Истина;
						КонецЕсли;						
					Исключение
						Сообщить("Не удалось провести ПКО № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
						Док1.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки;
				Иначе
					Попытка 
						Док1.Записать(РежимЗаписиДокумента.Запись);  
						Сообщить("Записан"+" ПКО № "+Док1.Номер+" от "+Док1.Дата);
						//Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
						СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, СуммаДок, Дата", номернаклиико, док.СуммаДокумента, НачалоДня(Док.Дата)));						
						Если СтрокиДокумента.Количество() <> 0 тогда 
							СтрокиДокумента[0].Док2 = Док1.Ссылка;
							НужнаКолонка = Истина;
						КонецЕсли;						
					Исключение
						Сообщить("Не удалось записать ПКО № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
					КонецПопытки;
				КОнецЕсли;
			КонецЕсли;
		Иначе
			номернаклиико = СокрЛП(докСтр.Номер) + "!" + "Акт оказания услуг";
			Если докСтр.Номер = СтарыйНомер тогда
				Сообщить("В iiko с номером " + СтарыйНомер + " от " + докСтр.Дата + " имеется акта оказания услуг, либо используется 2 склада!");
				Возврат;
			Иначе
				СтарыйНомер = докСтр.Номер;
			КонецЕсли;
			д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
			Если д.количество() = 0  или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;
			
			НомерДокумента = НомерНакладной(докСтр,докСтр.Номер,Префикс,ДеньПрефикс,"Расходная Накладная");
			Если НомерДокумента = Неопределено Тогда
				продолжить;
			КонецЕсли;
			
			
			Док = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(НомерДокумента,докСтр.Дата);
			Если не ЗначениеЗаполнено(Док) Тогда
				Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Док.Номер = НомерДокумента;
			Иначе
				Если зд Тогда
					Док = Док.ПолучитьОбъект();
					Док.УстановитьПометкуУдаления(Ложь);
					Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					Сообщить("Расходная Накладная № " + докСтр.Номер + " от " + докСтр.Дата + " существует!");
					Продолжить
				КОнецЕсли;
			КОнецЕсли;
			
			Если ОрганизацияИзДокумента = Истина тогда 
				Если докСтр.ЮЛИНН = "" тогда 
					Сообщить ("Сопоставление не удалось: организация с ИНН " + докСтр.ЮЛИНН + " не найдена");
					Продолжить;				
				Иначе
					Док.Организация = НайтиОгранизациюПоИНН(докСтр.ЮЛИНН, Ложь);
				КонецЕсли;
			Иначе 
				Док.Организация = НайтиОгранизациюПоИНН(докСтр.ЮЛИНН, Ложь);
			КонецЕсли;
			Док.Дата = докСтр.Дата;
			//Получим систему налогооблажения
			УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
			Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
				//НДСВСтоимости = Истина;
				УчитыватьНДС = Истина;
			Иначе
				//НДСВСтоимости = Ложь;
				УчитыватьНДС = Истина;
			КонецЕсли;
			
			Док.Контрагент = ДокСТР.Контрагент;
				
			Заполнять = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", Док.Метаданные());
			Если Заполнять тогда 
				Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
			иначе
				
			КонецЕсли;
			
			//Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
			Док.ДоговорКонтрагента = НайтиДоговор(Док.Организация, Док.Контрагент, 
			Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "Основной договор");
			Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
						Док.Номер = НомерДокумента;
			// ALEXV: TODO: Брать из справочника "Счета учета расчетов с контрагентами
			Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
			Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
			
			
			// Позиции документа
			Док.Товары.Очистить();
			Док.Услуги.Очистить();
			Отб = Новый Структура("Номер",докСтр.Номер);
			НСтр = строки.НайтиСтроки(Отб);	
			
			ТабЧасть = Новый ТаблицаЗначений;
			Табчасть = Строки.Скопировать(НСтр);
			Табчасть.Свернуть("Номенклатура,СтавкаНДСспродаж","СуммаПродажисНДС,СуммаНДС,Количество"); 
			
			Для каждого стрр из ТабЧасть Цикл
				Если стрр.Номенклатура.Услуга = Ложь  тогда
					Сообщить("Номенклатура: " + Стрр.Номенклатура.Наименование + " не является услугой!!", СтатусСообщения.Внимание );
					Продолжить; 
				Иначе
					услуга = Истина;
					Стр2 = Док.Услуги.Добавить();
				КонецЕсли;
				Стр2.Номенклатура = стрр.Номенклатура;
				Если услуга = Ложь тогда					
					Стр2.ЕдиницаИзмерения = Стр2.Номенклатура.ЕдиницаИзмерения;
					Стр2.Коэффициент = 1;
				КонецЕсли;
				Стр2.Количество = стрр.Количество;
				
				Стр2.Цена = стрр.СуммаПродажисНДС/стрр.Количество;
				Стр2.Сумма = стрр.СуммаПродажисНДС;
				Стр2.СуммаНДС = стрр.СуммаНДС;
				СттНДС = Число(СокрЛП(Стрр.СтавкаНДСспродаж));
				Стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,Стр2.Сумма,Стр2.СуммаНДС);
				Строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если Строкк <>  неопределено тогда
					Стр2.СчетРасходов = Строкк.СчетРасходовОтРеализации;
					Стр2.СчетДоходов = Строкк.СчетДоходовОтРеализации;
					Стр2.Субконто = ПолучитьНоменклатурнуюГруппу(стрр.Номенклатура);
					Стр2.СчетУчетаНДСПоРеализации = Строкк.СчетУчетаНДСПоРеализации;
					//Заполним статью затрат. Если Заполненно в карточке элемента номенклатура, то заполняем так
					Если ЗначениеЗаполнено(Стрр.Номенклатура.НоменклатурнаяГруппа) тогда
						Стр2.Субконто = Стрр.Номенклатура.НоменклатурнаяГруппа;
					Иначе// Проверим статью затрат на группе номенклатуры
						Если ЗначениеЗаполнено(Строкк.Субконто1) тогда 
							Стр2.Субконто = Строкк.Субконто1;
						КонецЕсли;
					КонецЕсли;  				
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + докСтр.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
			КонецЦикла;
			//СохранитьДокумент1С(Док, "Расходная Накладная", Порядок, номернаклиико);
			ВремяДокумента = Документы.РеализацияТоваровУслуг.ВремяДокументаПоУмолчанию();
			УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
			
			Если НЕ Проводить тогда 
				Попытка 
					Док.Записать(РежимЗаписиДокумента.Запись);  
					Сообщить("Записан" + "а расходная накладная № " + Док.Номер + " от " + Док.Дата);
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док.Ссылка;				
				Исключение
					Сообщить("Не удалось записать расходную накладную № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				КонецПопытки;
			Иначе
				Попытка 
					Док.Записать(РежимЗаписиДокумента.Проведение);  
					Сообщить("Проведен" + "а расходная накладная № " + Док.Номер + " от " + Док.Дата);
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док.Ссылка; 				
				Исключение
					Сообщить("Не удалось провести расходную накладную № " + Док.Номер + " от " + Док.Дата + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
					Док.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
			КонецЕсли;
			
			Если СоздатьПКО тогда 	
				Док1 = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
				//Док1.Заполнить(Док);
				Док1.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход; 
				Док1.ВалютаДокумента =  Константы.ВалютаРегламентированногоУчета.Получить();
				//Док1.КратностьДокумента = ; 
				Док1.Дата = док.Дата ; 
				Док1.Организация = док.Организация;
				Док1.Комментарий = ""+док.Номер + док.Дата+""; 
				Док1.СуммаДокумента = док.СуммаДокумента; 
				Док1.СчетКасса = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
				Док1.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");  
				Док1.СубконтоКт1 = Док.Контрагент;
				Док1.СубконтоКт2 = Док.ДоговорКонтрагента;
				Док1.СубконтоКт3 = Док.Ссылка;
				
				Строка = Док1.РасшифровкаПлатежа.Добавить();
				Строка.СуммаПлатежа = док.СуммаДокумента;
				Строка.СтавкаНДС =  Перечисления.СтавкиНДС.БезНДС;
				СТрока.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
				
				ВремяДокумента = Документы.ПриходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Док1,ВремяДокумента);
				
				Если Проводить тогда 
					Попытка 
						Док1.Записать(РежимЗаписиДокумента.Проведение);  
						Сообщить("Проведен"+" ПКО № "+Док1.Номер+" от "+Док1.Дата);
						//Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
						СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, СуммаДок, Дата", номернаклиико, док.СуммаДокумента, НачалоДня(Док.Дата)));						
						Если СтрокиДокумента.Количество() <> 0 тогда 
							СтрокиДокумента[0].Док2 = Док1.Ссылка;
							НужнаКолонка = Истина;
						КонецЕсли;						
					Исключение
						Сообщить("Не удалось провести ПКО № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
						Док1.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки;
				Иначе
					Попытка 
						Док1.Записать(РежимЗаписиДокумента.Запись);  
						Сообщить("Записан"+" ПКО № "+Док1.Номер+" от "+Док1.Дата);
						//Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
						СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, СуммаДок, Дата", номернаклиико, док.СуммаДокумента, НачалоДня(Док.Дата)));						
						Если СтрокиДокумента.Количество() <> 0 тогда 
							СтрокиДокумента[0].Док2 = Док1.Ссылка;
							НужнаКолонка = Истина;
						КонецЕсли;						
					Исключение
						Сообщить("Не удалось записать ПКО № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
					КонецПопытки;
				КОнецЕсли; 
			КонецЕсли;
		КонецЕсли; 		
	КонецЦикла;
	 	 	
КонецПроцедуры

&НаСервере
Функция ПодготовитьУслуги(табз)
	
			Тзз1 = Новый ТаблицаЗначений;
			Тзз1.Колонки.Добавить("Номер"); 
			Тзз1.Колонки.Добавить("Дата");
			Тзз1.Колонки.Добавить("Номенклатура"); 
			Тзз1.Колонки.Добавить("Количество");
			Тзз1.Колонки.Добавить("ЮЛНаименование");
			Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
			Тзз1.Колонки.Добавить("ЮЛИНН");
			Тзз1.Колонки.Добавить("СтавкаНДСспродаж");
			Тзз1.Колонки.Добавить("Контрагент");
			Тзз1.Колонки.Добавить("ЦенаБезНДС");
			Тзз1.Колонки.Добавить("СуммаПродажисНДС");
			Тзз1.Колонки.Добавить("СуммаНДС");
			Тзз1.Колонки.Добавить("Комментарий");

			
		Для Каждого Стр из табз Цикл
		ОкрКоличество = Окр(Стр.Количество,3);
		Если ОкрКоличество = 0 ИЛИ Стр.СуммаПродажиСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		ххх = Тзз1.Добавить();
		ххх.Номер = Стр.НомерДок;
		ххх.Дата = ПолучитьДату(Стр.Дата);
		ххх.Номенклатура = НайтиНоменклатуру(Стр.НКодИИКО, Стр.Ставкандс, Стр.ГруппаучетаНазвание).Номенклатура;
		ххх.ЮЛНаименование = Стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод = Стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН = Стр.ЮЛИнн;
		ххх.Количество = ОкрКоличество;
		ххх.СтавкаНДСспродаж = Стр.СтавкаНДСспродаж;
		// Проверяем на неопределено
		Если ЗначениеЗаполнено(Стр.СтавкаНДСспродаж) тогда 
			ххх.СтавкаНДСспродаж = Стр.СтавкаНДСспродаж;
		Иначе
			ххх.СтавкаНДСспродаж = 0;
		КонецЕсли;
		
		//Если в Айко нет контрагента, то подставляем розничного покупателя
		Если стр.КкодИИКО = "" тогда 
		Иначе			 
			ххх.Контрагент = Объект.Контрагенты.НайтиСтроки(Новый Структура("КкодИИКО",Стр.КкодИИКО))[0].Контрагент;;
		КонецЕсли;
	    //

	//	ххх.Контрагент = Объект.Контрагенты.НайтиСтроки(Новый Структура("КкодИИКО", Стр.КкодИИКО))[0].Контрагент;
		ххх.ЦенаБезНДС = Стр.ЦенасНДС - Стр.СуммаНДС;
		ххх.СуммаПродажисНДС = Стр.СуммаПродажисНДС;
		ххх.СуммаНДС = Стр.СуммаНДС;
		Попытка
			ххх.Комментарий = Стр.Комментарий;
		Исключение 
			ххх.Комментарий = "";
		КонецПопытки;
	КонецЦикла;	
	
	//Если СуммовойУчет Тогда
	//	Тзз1.Свернуть("Номер,Дата,Номенклатура,ЮЛнаименование,ТорговоеПредприятиеКод,ЮЛИНН,СтавкаНДСспродаж,Контрагент,ЦенаБезНДС,Комментарий", "Количество,СуммаПродажисНДС,СуммаНДС");			
	//КонецЕсли;
	
	Возврат Тзз1;	
КонецФункции

&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ".") 
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СоздатьАПУ (табз,префикс,ДеньПрефикс,порядок)
	
	Тзз1 = Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
	Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СтавкаНДС");
	Тзз1.Колонки.Добавить("Контрагент");
	Тзз1.Колонки.Добавить("Сотрудник");
	Тзз1.Колонки.Добавить("СуммасНДС");
	Тзз1.Колонки.Добавить("СуммаНДС");
	Тзз1.Колонки.Добавить("ВходНомер");
	Тзз1.Колонки.Добавить("ВходДата");
	Тзз1.Колонки.Добавить("СчетФактура");
	Тзз1.Колонки.Добавить("ЦенасНДС");
	Тзз1.Колонки.Добавить("Комментарий");
	
	табз = ПолучитьИзВременногоХранилища(АдресАПУ);
	
	Для Каждого Стр из табз Цикл
		ОкрКоличество = Окр(Стр.Колво,3);
		Если ОкрКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ххх = Тзз1.Добавить();
		ххх.Номер = Стр.НомерДок;
		ххх.Дата = ПолучитьДату(Стр.Дата);
		НайденнаяСтрока = НайтиНоменклатуру(Стр.НКодИИКО, Стр.Ставкандс, Стр.ГруппаучетаНазвание);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			ххх.Номенклатура = НайденнаяСтрока.Номенклатура;
		Иначе
			Сообщить ("Неправильно заполнена номенклатура в IIKO, загрузка невозможна!");
			прервать;
		КонецЕсли;
		
		//ххх.Склад = Объект.Склады.НайтиСтроки(Новый Структура ("СкладНаименование",Стр.СкладНаименование))[0].Склад;
		ххх.ЮЛнаименование = Стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод = Стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН = ИсправленныйЮЛИНН(СокрЛП(Стр.ЮЛИНН));
		ххх.Количество = ОкрКоличество;
		ххх.СтавкаНДС = Стр.СтавкаНДС;
		ххх.Контрагент = Объект.Контрагенты.НайтиСтроки(Новый Структура("КкодИИКО", Стр.КкодИИКО))[0].Контрагент;
		ххх.СуммасНДС = Стр.СуммасНДС;
		ххх.СуммаНДС = Стр.СуммаНДС;
		ххх.ВходНомер = Стр.ВходНомер;
		ххх.ВходДата = Стр.ВходДата;
		ххх.СчетФактура = Стр.СчетФактура;
		ххх.ЦенасНДС = Стр.ЦенасНДС;
		
		Попытка
			ххх.Комментарий = Стр.Комментарий;
		Исключение 
			ххх.Комментарий = "";
		КонецПопытки;
		
		Если не ПустаяСтрока(Стр.СотрудникКод) Тогда
			фл = Объект.ФизЛица.НайтиСтроки(Новый Структура("КодАйко", Стр.СотрудникКод));
			Если не фл.Количество() = 0 Тогда
				ххх.Сотрудник = фл[0].Название1С;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если Тзз1 = неопределено тогда
		Возврат;
	КонецЕсли;
	
	Доки = Тзз1.Скопировать();     
	Доки.Свернуть("Номер,Дата,ТорговоеПредприятиеКод,ЮЛнаименование,ЮЛИНН,Контрагент,СчетФактура,ВходНомер,ВходДата,Сотрудник,Комментарий");
	
	 СтарыйНомер = "";
	 
	 Для каждого докСтр из Доки цикл
		//номернаклиико = СокрЛП(докСтр.Номер) + "!" + "Акт Реализации";
		номернаклиико = СокрЛП(докСтр.Номер) + "!" + "Акт приёма услуг";
		Если докСтр.Номер = СтарыйНомер тогда
			Сообщить("В iiko с номером " + СтарыйНомер + " от " + докСтр.Дата + " имеется 2 Акта приёма услуг, либо используется 2 склада!");
			Возврат;
		Иначе
			СтарыйНомер = докСтр.Номер;
		КонецЕсли;
		
		д = Объект.Докум.НайтиСтроки(Новый Структура ("Документ", номернаклиико));
		Если д.Количество() = 0 или не д[0].Выбор тогда
			Продолжить;
		КонецЕсли;
		
		НомерДокумента = НомерНакладной(докСтр,докСтр.Номер,Префикс,ДеньПрефикс,"Акт приёма услуг");
		Если НомерДокумента = Неопределено Тогда
			продолжить;
		КонецЕсли;
		
		// ALEXV: TODO: Добавить Авансовый отчет
		Если ЗначениеЗаполнено(докСтр.Сотрудник) Тогда
			СоздатьАвансовыйОтчет(докСтр,Тзз1,НомерДокумента, Порядок, номернаклиико, "Акт приёма услуг"); 			
			продолжить;
		КонецЕсли;
		
		// Поиск документа
		Док = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(НомерДокумента, докСтр.Дата);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Накладная № " + докСтр.Номер + " от " + докСтр.Дата + " существует!");
				Продолжить
			КОнецЕсли;
		КОнецЕсли;
		
		// Шапка документа
		Если ОрганизацияИзДокумента = Истина тогда 
			Если докСтр.ЮЛИНН = "" тогда 
				Сообщить ("Сопоставление не удалось: организация с ИНН " + докСтр.ЮЛИНН + " не найдена");
				Продолжить;				
			Иначе
				Док.Организация = НайтиОгранизациюПоИНН(докСтр.ЮЛИНН, Ложь);
			КонецЕсли;
		Иначе 
			Док.Организация = НайтиОгранизациюПоИНН(докСтр.ЮЛИНН, Ложь);
		КонецЕсли;
		Док.Дата = докСтр.Дата;
		//Получим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Истина;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;
		Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		Док.КурсВзаиморасчетов = 1;
		Док.СуммаВключаетНДС = Истина;
		Док.Контрагент = докСтр.Контрагент;
		Док.ДатаВходящегоДокумента = ПолучитьДату(докСтр.ВходДата);
		Док.НомерВходящегоДокумента = ДокСтр.ВходНомер;				
		Док.ДоговорКонтрагента = НайтиДоговор(Док.Организация, Док.Контрагент, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "Основной договор");		
				
		Заполнять = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", Док.Метаданные());
		Если Заполнять тогда 
			Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		КонецЕсли;	
		
		Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		Док.Номер = НомерДокумента;
		Док.Комментарий = докСтр.Комментарий; 		
		Док.НДСВключенВСтоимость = НДСВСтоимости;				
		Док.Грузоотправитель = Док.Контрагент;
		Док.Грузополучатель = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", докСтр.ЮЛИНН);
		СтрокиК = ТаблицаЗапросаК.НайтиСтроки(Новый Структура("Контрагент",Док.Контрагент));
		Если СтрокиК.Количество() = 0 Тогда 
			Док.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
			Док.СчетУчетаРасчетовПоАвансам=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");
		Иначе 
			Док.СчетУчетаРасчетовСКонтрагентом=СтрокиК.Хозрасчетный.СчетУчетаРасчетовСПоставщиком;
			Док.СчетУчетаРасчетовПоАвансам=СтрокиК.Хозрасчетный.СчетУчетаАвансовВыданных;
		КонецЕсли;
		Док.СчетУчетаРасчетовПоТаре = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.03");
		Док.ПодразделениеОрганизации = Подразделение;
		
		Если не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
			Сообщить("У контрагента " + Док.Контрагент + " не заполнен основной договор! Накладная № " + СокрЛП(Док.Номер) + " от " + докСтр.Дата + " проведена не будет", СтатусСообщения.ОченьВажное);
		КОнецЕсли;
				
		// Позиции документа
		Док.Товары.Очистить();
		Док.Услуги.Очистить();
		Отб = Новый Структура("Номер",докСтр.Номер);
		НСтр = Тзз1.НайтиСтроки(Отб);
		
		ТабЧасть = Новый ТаблицаЗначений;
		Табчасть = Тзз1.Скопировать(НСтр);
		Табчасть.Свернуть("Номенклатура,СтавкаНДС","СуммасНДС,СуммаНДС,Количество");
		
		Для каждого стрр из Табчасть Цикл
			
			Если стрр.Номенклатура.Услуга = Ложь  тогда
				Сообщить("Номенклатура: " + Стрр.Номенклатура.Наименование + " не является услугой!!", СтатусСообщения.Внимание );
				Продолжить;
			Иначе
				услуга = Истина;
				Стр2 = Док.Услуги.Добавить();
			КонецЕсли;
			
			Стр2.Номенклатура = стрр.Номенклатура;
			Стр2.Количество = стрр.Количество;
			Стр2.Цена = стрр.СуммасНДС/стрр.Количество;
			Стр2.Сумма = стрр.СуммасНДС;
			Стр2.СуммаНДС = стрр.СуммаНДС;
            СттНДС = Число(СокрЛП(Стрр.СтавкаНДС));
			Стр2.СтавкаНДС = ПолучитьСтавкуНДС(СттНДС,Стр2.Сумма,Стр2.СуммаНДС);
			
			Если Стр2.Количество = 0 Тогда
				Сообщить("В накладной № " + Док.Номер + " от " + Док.Дата + " в строке № " + Стр2.НомерСтроки + " не указано количество!!!");
			КонецЕСли;
			
												
			//Стр2.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			Стр2.ОтражениеВУСН = РасходыНУ;
									
			Строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
			Если Строкк <>  неопределено тогда
				Стр2.СчетУчетаНДС = Строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
				Стр2.СчетЗатрат = Строкк.СчетУчета;
				Стр2.СчетУчетаНДС = Строкк.СчетУчетаНДСПоПриобретеннымЦенностям;
				Стр2.СчетЗатрат = Строкк.СчетУчета;
				//Заполним статью затрат. Если Заполненно в карточке элемента номенклатура, то заполняем так
					Если ЗначениеЗаполнено(Стрр.Номенклатура.СтатьяЗатрат) тогда
						Стр2.Субконто1 = Стрр.Номенклатура.СтатьяЗатрат;
						Иначе // Если нигде не заполненно, то ставим с первой вкладки
							Стр2.Субконто1 = СтатьяЗатратУслуги;
					КонецЕсли;
				Стр2.ПодразделениеЗатрат = Подразделение;
				Стр2.СчетЗатратНУ = Строкк.СчетУчета;
				Стр2.СубконтоНУ1 = Стр2.Субконто1;				
			Иначе
				Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецЦикла;
		
		ВремяДокумента = Документы.ПоступлениеТоваровУслуг.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		Попытка
			Если Проводить тогда 
				Док.Записать(РежимЗаписиДокумента.Проведение); 
				Сообщить("Проведено Поступление товаров и услуг № "+Док.Номер+" от "+Док.Дата);
				ОБъект.Докум.НайтиСТроки(Новый Структура("Документ, СуммаДок", номернаклиико, Док.СуммаДокумента))[0].Док=Док.Ссылка;						
			Иначе
				Док.Записать(РежимЗаписиДокумента.Запись); 
				Сообщить("Записано Поступление товаров и услуг  № "+Док.Номер+" от "+Док.Дата);
				ОБъект.Докум.НайтиСТроки(Новый Структура("Документ, СуммаДок", номернаклиико, Док.СуммаДокумента))[0].Док=Док.Ссылка;						
			КонецЕсли;     					
		Исключение
			Сообщить("Не удалось записать Поступление товаров и услуг № " + Док.Номер + " " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		//СохранитьДокумент1С(Док, "Приходная Накладная", Порядок, номернаклиико);
		
		Есть = Новый ТаблицаЗначений;
		Есть = ЕстьСчетФактура(ДокСтр);
		
		Если ЗначениеЗаполнено(докСтр.СчетФактура) тогда
			Если Есть.Количество() = 0 тогда 		
								
								
				Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(
				Док.Ссылка, 
				докСтр.СчетФактура, 
				Док.ДатаВходящегоДокумента, 
				Неопределено);
				
			Иначе
				
			КонецЕсли;
		Иначе
			
		КонецЕсли;
	Если СоздатьРКО тогда 	
		Док1 = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
		//Док1.Заполнить(Док);
		Док1.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход; 
		Док1.ВалютаДокумента =  Константы.ВалютаРегламентированногоУчета.Получить();
		//Док1.КратностьДокумента = ; 
		Док1.Дата = док.Дата ; 
		Док1.Организация = док.Организация;
		Док1.Комментарий = ""+док.Номер + док.Дата+""; 
		Док1.СуммаДокумента = док.СуммаДокумента; 
		Док1.СчетКасса = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
		//Док1.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");  
		СтрокиК = ТаблицаЗапросаК.НайтиСтроки(Новый Структура("Контрагент",Док.Контрагент));
		Если СтрокиК.Количество() = 0 Тогда 
			Док1.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
		Иначе 
			Док1.СчетУчетаРасчетовСКонтрагентом=СтрокиК.Хозрасчетный.СчетУчетаРасчетовСПоставщиком;
		КонецЕсли;
		Док1.СубконтоДТ1 = Док.Контрагент;
		Док1.СубконтоДт2 = Док.ДоговорКонтрагента;
		Док1.СубконтоДт3 = Док.Ссылка;
		Док1.ПодразделениеОрганизации = Док.ПодразделениеОрганизации;
		Строка = Док1.РасшифровкаПлатежа.Добавить();
		Строка.СуммаПлатежа = док.СуммаДокумента;
		Строка.СтавкаНДС =  Перечисления.СтавкиНДС.БезНДС;
		СТрока.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
		
		ВремяДокумента = Документы.РасходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док1,ВремяДокумента);
		
		Попытка 
			Если Проводить тогда
				Док1.Записать(РежимЗаписиДокумента.Проведение);  
				Сообщить("Проведен"+" РКО № "+Док1.Номер+" от "+Док1.Дата);
				//Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
				СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, СуммаДок, Дата", номернаклиико, док.СуммаДокумента, Док.Дата));				
				Если СтрокиДокумента.Количество() <> 0 тогда 
					СтрокиДокумента[0].Док2 = Док1.Ссылка;
					НужнаКолонка = Истина;
				КонецЕсли;				
			Иначе				
				Док1.Записать(РежимЗаписиДокумента.Запись);  
				Сообщить("Записан"+" РКО № "+Док1.Номер+" от "+Док1.Дата);
				//Докум.Найти(номернаклиико,"Документ").Док=Док.Ссылка;
				СтрокиДокумента = Объект.Докум.НайтиСтроки(Новый Структура("Документ, СуммаДок, Дата", номернаклиико, док.СуммаДокумента, Док.Дата));				
				Если СтрокиДокумента.Количество() <> 0 тогда 
					СтрокиДокумента[0].Док2 = Док1.Ссылка;
					НужнаКолонка = Истина;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Сообщить("Не удалось провести РКО № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			Док1.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
	КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаписатьАУ(oInvoce)
	   Попытка
		oInvoiceItem = oInvoce.GetFirstInvoiceItem();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСтрокуАУ(oInvoce,oInvoiceItem);   
			oInvoiceItem = oInvoce.GetNextInvoiceItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ЗаписатьСтрокуАУ(Invoice,InvoiceItem)
	   Если ЗначениеЗаполнено(invoiceItem.Article)=Истина тогда
		Если Число(invoiceItem.Amount_DecimalAsString)<>0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(invoiceItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз10.Добавить();
			НоваяСтрока.Дата= invoice.Date;
			НоваяСтрока.НомерДок= invoice.Number;
			//Если invoice.CashRegNumber <> "" тогда 
			//	НоваяСтрока.НомерКассы = invoice.CashRegNumber;
			//	НоваяСтрока.НомерСмены = invoice.SessionNumber;
			//Иначе
			//	НоваяСтрока.НомерКассы = "";
			//	НоваяСтрока.НомерСмены = "";
			//КОнецЕсли;
		//	НоваяСтрока.Движениеденежныхсредствкод= invoice.RevenueAccountCode;
		//	НоваяСтрока.Движениеденежныхсредств= invoice.RevenueAccountName;
        //   	НоваяСтрока.Входномер= invoice.IncomingNumber;
			НоваяСтрока.Входдата= invoice.IncomingDate_DateTimeAsString;
		//	НоваяСтрока.КИННИИКО= invoice.SupplierINN;
		//	НоваяСтрока.ККодИИКО= invoice.SupplierCode;
			НоваяСтрока.КНаименованиеИИКО= invoice.SupplierName;
			//НоваяСтрока.СчетФактура= invoice.invoice;
			// ALEXV: Добавляем код и название сотрудника
			//НоваяСтрока.СотрудникКод= invoice.StaffCode;
			//НоваяСтрока.СотрудникНаименование= invoice.StaffName;			
			НоваяСтрока.НКодИИКО= invoiceItem.Article;    
			НоваяСтрока.ННаименованиеИИКО= invoiceItem.Nomenclature;    
			НоваяСтрока.ГруппаучетаНазвание= invoiceItem.AccountingCategory; 
			НоваяСтрока.ГруппаучетаКод= invoiceItem.AccountingCategoryCode;   
			//НоваяСтрока.СкладКод= invoiceItem.StoreCode;    
			//НоваяСтрока.СкладНаименование= invoiceItem.StoreName;    
			НоваяСтрока.Количество= invoiceItem.Amount_DecimalAsString;    
			НоваяСтрока.ЦенасНДС= invoiceItem.PriceWithNds_DecimalAsString;    
			НоваяСтрока.СуммаПродажисНДС= invoiceItem.SumWithNds_DecimalAsString;    
			НоваяСтрока.СуммаНДС= invoiceItem.Nds_DecimalAsString;    
			НоваяСтрока.СтавкаНДС= invoiceItem.NdsPercent_DecimalAsString; 
			НоваяСтрока.ЮЛИНН= invoiceItem.JuristicPersonINN;
			НоваяСтрока.ЮЛнаименование= invoiceItem.JuristicPersonName;
			// ALEXV: Добавляем код и название подразделения
			НоваяСтрока.Торговоепредприятиекод= invoiceItem.DepartmentCode;
			НоваяСтрока.Торговоепредприятиенаименование= invoiceItem.DepartmentName;
			НоваяСтрока.Единицаизмеренияназвание=invoiceItem.MeasureUnitName;
			НоваяСтрока.КонцепцияКод = invoice.ConceptionCode;
			НоваяСтрока.КонцепцияНазвание = invoice.ConceptionName;
			Попытка
				НоваяСтрока.Комментарий = invoice.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры "+invoiceItem.Nomenclature+" не задан код!!!");
	КонецЕсли;

	
КонецПроцедуры

Функция ЗаписатьАктПриемаУслуг(Invoice)
	
	Попытка
		oInvoiceItem = Invoice.GetFirstInvoiceItem();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуАктаПриемаУслуг(Invoice,oInvoiceItem);   
			oInvoiceItem = invoice.GetNextInvoiceItem();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;

	
КонецФункции

Процедура ЗаписатьСТрокуАктаПриемаУслуг(Invoice,InvoiceItem);
	  Если ЗначениеЗаполнено(invoiceItem.Article)=Истина тогда
		Если Число(invoiceItem.Amount_DecimalAsString)<>0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(invoiceItem.JuristicPersonName)<>СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз11.Добавить();
			НоваяСтрока.Дата= invoice.Date;
			НоваяСтрока.НомерДок= invoice.Number;
			НоваяСтрока.Входномер= invoice.IncomingNumber;
			НоваяСтрока.Входдата= invoice.IncomingDate_DateTimeAsString;
			НоваяСтрока.КИННИИКО= invoice.SupplierINN;
			НоваяСтрока.ККодИИКО= invoice.SupplierCode;
			НоваяСтрока.КНаименованиеИИКО= invoice.SupplierName;
			НоваяСтрока.СчетФактура= invoice.invoice;
			// ALEXV: Добавляем код и название сотрудника
			НоваяСтрока.СотрудникКод= invoice.StaffCode;
			НоваяСтрока.СотрудникНаименование= invoice.StaffName;			
			НоваяСтрока.НКодИИКО= invoiceItem.Article;    
			НоваяСтрока.ННаименованиеИИКО= invoiceItem.Nomenclature;    
			НоваяСтрока.ГруппаучетаНазвание= invoiceItem.AccountingCategory; 
			НоваяСтрока.ГруппаучетаКод= invoiceItem.AccountingCategoryCode;   
			//НоваяСтрока.СкладКод= invoiceItem.StoreCode;    
			//НоваяСтрока.СкладНаименование= invoiceItem.StoreName;    
			НоваяСтрока.Колво= invoiceItem.Amount_DecimalAsString;    
			НоваяСтрока.ЦенасНДС= invoiceItem.PriceWithNds_DecimalAsString;    
			НоваяСтрока.СуммасНДС= invoiceItem.SumWithNds_DecimalAsString;    
			НоваяСтрока.СуммаНДС= invoiceItem.Nds_DecimalAsString;    
			НоваяСтрока.СтавкаНДС= invoiceItem.NdsPercent_DecimalAsString; 
			НоваяСтрока.ЮЛИНН= invoiceItem.JuristicPersonINN;
			НоваяСтрока.ЮЛнаименование= invoiceItem.JuristicPersonName;
			// ALEXV: Добавляем код и название подразделения
			НоваяСтрока.Торговоепредприятиекод= invoiceItem.DepartmentCode;
			НоваяСтрока.Торговоепредприятиенаименование= invoiceItem.DepartmentName;
			НоваяСтрока.Единицаизмеренияназвание=invoiceItem.MeasureUnitName;
			НоваяСтрока.КонцепцияКод = invoice.ConceptionCode;
			НоваяСтрока.КонцепцияНазвание = invoice.ConceptionName;
			Попытка
				НоваяСтрока.Комментарий = invoice.Comment;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры "+invoiceItem.Nomenclature+" не задан код!!!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПередУдалением(Элемент, Отказ)
	Ответ = Вопрос("Удалить из загрузки все документы с контрагентом: "+
	Этаформа.ТекущийЭлемент.ТекущиеДанные.КНаименованиеИИКО+"?", 
	РежимДиалогаВопрос.ДаНет); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ=истина;
		Возврат;
	КонецЕсли;
	
	КодАйко=Этаформа.ТекущийЭлемент.ТекущиеДанные.КНаименованиеИИКО;
	
	Доки = Объект.Докум.НайтиСТроки(Новый структура("Контрагент, ВидДок",КодАйко,"Приходная Накладная"));
	Доки2 = Объект.Докум.НайтиСТроки(Новый структура("Контрагент, ВидДок",КодАйко,"Расходная Накладная"));
	
	Если Доки.КОличество() > 0 тогда 
		Индекс = Доки.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			Объект.Докум.Удалить(Доки[Индекс]);
			Индекс = Индекс - 1;
			
		КонецЦикла;
	КОнецЕсли;
	
	Если Доки2.КОличество() > 0 тогда 
		Индекс = Доки2.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			Объект.Докум.Удалить(Доки2[Индекс]);
			Индекс = Индекс - 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АПУПриИзменении(Элемент)
	
	ВидимостьПодразделения();
	ВидимостьРКО();
	ВидимостьСтатьиЗатрат();
	ВидимостьСтатьиЗатратУслуги();	
КонецПроцедуры

&НаКлиенте
Процедура АУПриИзменении(Элемент)
	ВидимостьПКО();
	ВидимостьПодразделения();
	ВидимостьСтатьиЗатрат();
	ВидимостьСДДС();	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКолонки()
	Элементы.Докум.ПодчиненныеЭлементы.ДокумДок2.Видимость = Истина;
КонецПроцедуры
	  
&НаКлиенте
Процедура ВидимостьПКО()
	  	
Элементы.СоздатьПКО.Видимость = АУ;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьРКО() 	
	
Элементы.СоздатьРКО.Видимость = АПУ;
	
КонецПроцедуры

Процедура СоздатьАктПриготовления(табз,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
	таб = ПодготовитьАктПриготовления(табз);
	СоздатьАктПриготовленияПодговленный(таб,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
КонецПроцедуры

Функция ПодготовитьАктПриготовления(табз)
	
	Тзз1=Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
	Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("СкладСписания"); 
	Тзз1.Колонки.Добавить("СкладПрихода"); 
	Тзз1.Колонки.Добавить("СкладПодразделение"); 
	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз1.Колонки.Добавить("ЗнакОперации");
	
	табз = ПолучитьИзВременногоХранилища(АдресАП);
	Для Каждого Стр из табз Цикл
		ОкрКоличество=Окр(стр.Количество,3);
		Если ОкрКоличество=0 Тогда
			Продолжить;
		КонецЕсли;
		ххх=Тзз1.Добавить();
		ххх.Номер=стр.НомерДок;
		ххх.Дата=ПолучитьДату(стр.Дата);
		ххх.Номенклатура=НайтиНоменклатуру(стр.НКодИИКО, стр.Ставкандс, стр.ГруппаучетаНазвание).Номенклатура;  
		скл = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стр.СкладСписанияНаименование));
		скл2 = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стр.СкладПриходаНаименование));
		
		Если ЗначениеЗаполнено(Скл) тогда 
			ххх.СкладСписания = Скл[0].Склад;
			ххх.СкладПодразделение=скл[0].Подразделение;
		ИначеЕсли ЗначениеЗаполнено(Скл2) тогда
			ххх.СкладПрихода = Скл2[0].Склад;
			ххх.СкладПодразделение=скл2[0].Подразделение;
		КонецЕсли;  		
		
		ххх.ЮЛнаименование=стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод=стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН=стр.ЮЛИнн;
		ххх.Количество=ОкрКоличество;
		ххх.СебестоимостьЗаедБезНДС=стр.СебестоимостьЗаедБезНДС;
		ххх.СебестоимостьБезНДС=стр.СебестоимостьБезНДС;
		ххх.ЗнакОперации=стр.ЗнакОперации;
	КонецЦикла;	
		
	возврат Тзз1;	
	
КонецФункции

Процедура СвернутьАктПриготовления(Таб)
	СоворачиватьПо="Номер,Дата,Номенклатура,СкладСписания,СкладПрихода,ЮЛнаименование,ЮЛИНН,ЗнакОперации,СкладПодразделение";
	Если АналитикаДокументов="По Документам" Тогда
		СоворачиватьПо=СоворачиватьПо+",ТорговоеПредприятиеКод";	
	КонецЕсли;		
КонецПроцедуры

Процедура СоздатьАктПриготовленияПодговленный(таб,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
	  Доки = таб.Скопировать(); 
	Доки2 = Таб.Скопировать();
	СоворачиватьПо="Номер,Дата,ЮЛнаименование,ЮЛИНН,СкладПодразделение,ТорговоеПредприятиеКод";
	
		
	Доки.Свернуть(СоворачиватьПо);
	Доки.Сортировать("Дата");
	Доки2.Свернуть("Номер,Дата,СкладСписания,СкладПрихода,ЮЛнаименование,ЮЛИНН,СкладПодразделение,ТорговоеПредприятиеКод");
	
	СтарыйНомер = "";
	Для Каждого Стр из Доки Цикл
		Если Стр.Номер = СтарыйНомер тогда          
			ДатаДокум = ПолучитьДату(стр.Дата);
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+ДатаДокум+" имеется 2 акта приготовления, либо используется 2 склада!");
			Продолжить;
		Иначе
			СтарыйНомер = Стр.Номер;
		КонецЕсли;	
	КонецЦикла;	 
	
	Для каждого стр из Доки цикл
		номернаклиико = СокрЛП(Стр.Номер) + "!" + "Акт Приготовления";
		Если ПустаяСтрока(базовыйДокумент) Тогда
			д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
			Если д.Количество() = 0 или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;	
		Иначе
			номерБазовый = СокрЛП(Стр.Номер)+"!" + базовыйДокумент;
			д = Объект.Докум.НайтиСтроки(Новый Структура("Документ",номерБазовый));
			Если д.Количество() = 0 или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Юрлицо) тогда
			Если Стр.ЮЛнаименование<>Юрлицо тогда
				Продолжить;
			КонецЕСли;
		КонецЕСли;	
		Отб = Новый Структура("Номер",стр.Номер);
		НСтр = таб.НайтиСтроки(Отб);
		ДатаДокум=ПолучитьДату(стр.Дата);
		НомерДокумента=НомерНакладной(стр,стр.Номер,Префикс,ДеньПрефикс,"Акт Приготовления");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		    // Создаем ОПЗС
		Док = Документы.ОтчетПроизводстваЗаСмену.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Отчет производства за смену № "+Док.Номер+" от "+Док.Дата  +" существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		
		Док.Организация=НайтиОгранизациюПоИНН(ИсправленныйЮЛИНН(СокрЛП(Стр.ЮЛИНН)), истина);
		Док.Дата = ДатаДокум - 600;
		//Получим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Истина;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;
		Док.СчетЗатрат= ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");
		Док.НДСвСтоимостиТоваров = НДСвСтоимости;
		Док.Номер = НомерДокумента;
		
		//Заполнение склада
		Отбор = Новый Структура("Номер, Дата, ЗнакОперации", Стр.Номер, ДатаДокум, Число("2"));		
		Нашли = Таб.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(Нашли) тогда
			Док.Склад = Нашли[0].СкладСписания;
			Док.ПодразделениеЗатрат = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;
			Док.ПодразделениеОрганизации = Док.ПодразделениеЗатрат;
		КонецЕсли;
		
		
		ТабЧасть = Новый ТаблицаЗначений;
		Табчасть = Таб.Скопировать(НСтр);
		Табчасть.Свернуть("Номенклатура, ЗнакОперации","СебестоимостьБезНДС, Количество");
		
		Док.Продукция.Очистить();
		Док.Материалы.Очистить();

		Для каждого стрр из Табчасть Цикл 
			ОкрКоличество=Окр(стрр.Количество,3);
			Если ОкрКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
			Если СокрЛП(стрр.ЗнакОперации)="1" Тогда
				ПлановаяСтоимость=Число(стрр.СебестоимостьБезНДС/ОкрКоличество);
				Если ПлановаяСтоимость < 0.01 Тогда
					ПлановаяСтоимость=0.01;
					СуммаПлановая = ПлановаяСтоимость*ОкрКоличество;
				Иначе
					СуммаПлановая = Число(стрр.СебестоимостьБезНДС);
				КонецЕсли;
				Если СуммаПлановая<0.01 Тогда
					СуммаПлановая=0.01;
				КонецЕсли;	
				
				стр2 = Док.Продукция.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.НоменклатурнаяГруппа=ПолучитьНоменклатурнуюГруппу(стр2.Номенклатура);	
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
				
				Если не СуммовойУчет тогда 
					стр2.Количество = ОкрКоличество;
					стр2.Коэффициент = 1;
					стр2.ПлановаяСтоимость = ПлановаяСтоимость;
					стр2.СуммаПлановая = СуммаПлановая;
				Иначе
					стр2.Количество = СуммаПлановая;
					стр2.Коэффициент = 1;
					стр2.ПлановаяСтоимость = 1;
					стр2.СуммаПлановая = СуммаПлановая;
				КонецЕсли;
			
				
				строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если строкк<>неопределено тогда
					стр2.Счет = строкк.СчетУчета;
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
			Иначе  // операция=2
				стр2 = Док.Материалы.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
				
				Если не СуммовойУчет тогда 
					стр2.Количество = ОкрКоличество;
					стр2.Коэффициент = 1;
					//Считаем себестоимость в 1С
					Если СебестоимостьВ1С тогда 
						стрр.СебестоимостьБезНДС = 0;
					КонецЕсли; 					
					стр2.Себестоимость = стрр.СебестоимостьБезНДС;
				Иначе
					стр2.Количество = стрр.СебестоимостьБезНДС;
					стр2.Коэффициент = 1;
					//Считаем себестоимость в 1С
					Если СебестоимостьВ1С тогда 
						стрр.СебестоимостьБезНДС = 0;
					КонецЕсли; 					
					стр2.Себестоимость = стрр.СебестоимостьБезНДС;
				КонецЕсли;
				
				//стр2.ОтражениеВУСН=Перечисления.ОтражениеВУСН.Принимаются;
				Стр2.ОтражениеВУСН = РасходыНУ;
				стр2.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(стр2.Номенклатура);
				строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если строкк<>неопределено тогда
					стр2.Счет = строкк.СчетУчета;
					Если ЗначениеЗаполнено(СтатьяЗатрат) тогда
						стр2.СтатьяЗатрат = СтатьяЗатрат;
					Иначе
						стр2.СтатьяЗатрат = стр2.Номенклатура.СтатьяЗатрат;
					КонецЕсли;	
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура, СтатусСообщения.Внимание);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		ВремяДокумента = Документы.ОтчетПроизводстваЗаСмену.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		
		Если НЕ Проводить тогда
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Запись); 
				Сообщить("Записан"+" Отчет производства за смену № "+Док.Номер+" от "+Док.Дата);
				Если ПустаяСтрока(базовыйДокумент) Тогда
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док=Док.Ссылка;
				Иначе
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номерБазовый))[0].Док2=Док.Ссылка;	
					НужнаКолонка = Истина;
				КонецЕсли;
				базовыйДокумент = номернаклиико;
			Исключение
				Сообщить("Не удалось записать Отчет производства за смену № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
		Иначе
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение); 
				Сообщить("Проведен"+" Отчет производства за смену № "+Док.Номер+" от "+Док.Дата);
				Если ПустаяСтрока(базовыйДокумент) Тогда
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док=Док.Ссылка;
				Иначе
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номерБазовый))[0].Док2=Док.Ссылка;	
					НужнаКолонка = Истина;
				КонецЕсли;
				базовыйДокумент = номернаклиико;
			Исключение
				Сообщить("Не удалось провести Отчет производства за смену № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		КонецЕсли;
		
		//Проверим склады
		Отбор = Новый Структура("Номер, Дата, ЗнакОперации", Стр.Номер, Док.Дата, Число("2"));		
		Нашли = Таб.НайтиСтроки(Отбор);
		Отбор = Новый Структура("Номер, Дата, ЗнакОперации", Стр.Номер, Док.Дата, Число("1"));		
		Нашли1 = Таб.НайтиСтроки(Отбор);
		
		Если Нашли.Количество()<>0 и Нашли1.Количество()<>0 тогда 
			Если  Нашли[0].СкладСписания = Нашли1[0].СкладПрихода тогда
				базовыйДокумент = "";
				Продолжить;	
			Иначе
				// Создаем перемещение	
				Док1 = Документы.ПеремещениеТоваров.НайтиПоНомеру(НомерДокумента,ДатаДокум);
				Если не ЗначениеЗаполнено(Док1) Тогда
					Док1 = Документы.ПеремещениеТоваров.СоздатьДокумент();
					Док1.Номер = НомерДокумента;
				Иначе
					Если зд Тогда
						Док1 = Док1.ПолучитьОбъект();
						Док1.УстановитьПометкуУдаления(Ложь);
						Док1.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						Сообщить("Отчет производства за смену № " + Док1.Номер + " от " + Док1.Дата + " существует!");
						Продолжить;					
					КОнецЕсли;
				КОнецЕсли;
				
				// Шапка документа
				Заполнять = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", Док.Метаданные());
				
				Если Заполнять тогда 
					Док1.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
				КонецЕсли;
				
				Док1.Дата = Док.Дата;
				Док1.Номер = НомерДокумента; 
				Док1.Организация = Док.Организация;
				//Получим систему налогооблажения
				УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док1.Организация, Док1.Дата);
				
				Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
					//НДСВСтоимости = Истина;
					УчитыватьНДС = Истина;
				Иначе
					//НДСВСтоимости = Ложь;
					УчитыватьНДС = Истина;
				КонецЕсли;
				
				Если НДСВСтоимости тогда 		
					Док.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
				Иначе
					Док.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
				КонецЕсли;
				
				Док1.СкладОтправитель = Нашли[0].СкладСписания;
				Док1.ПодразделениеОтправитель = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док1.СкладОтправитель))[0].Подразделение;
				
				Док1.СкладПолучатель = Нашли1[0].СкладПрихода;
				Док1.ПодразделениеПолучатель = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док1.СкладПолучатель))[0].Подразделение;
				
				Док1.Товары.Очистить();
				
				//Заполнение ТЧ		
				Для каждого стрр из Табчасть Цикл 
					ОкрКоличество = Окр(стрр.Количество,3);
					Если ОкрКоличество = 0 Тогда
						Продолжить;
					КонецЕсли;
					Если СокрЛП(стрр.ЗнакОперации) = "1" Тогда
						ПлановаяСтоимость = Число(стрр.СебестоимостьБезНДС/ОкрКоличество);
						Если ПлановаяСтоимость < 0.01 Тогда
							ПлановаяСтоимость = 0.01;
							СуммаПлановая = ПлановаяСтоимость*ОкрКоличество;
						Иначе
							СуммаПлановая = Число(стрр.СебестоимостьБезНДС);
						КонецЕсли;
						Если СуммаПлановая < 0.01 Тогда
							СуммаПлановая = 0.01;
						КонецЕсли;					
						
						стр2 = Док1.Товары.Добавить();
						стр2.Номенклатура = стрр.Номенклатура;
						
												
						Если не СуммовойУчет тогда 
							//Считаем себестоимость в 1С
							Если СебестоимостьВ1С тогда 
								стрр.СебестоимостьБезНДС = 0;
							КонецЕсли; 							
							стр2.Себестоимость = стрр.СебестоимостьБезНДС;
							стр2.Количество = ОкрКоличество;
						Иначе
							стр2.Количество = стрр.СебестоимостьБезНДС;
							//Считаем себестоимость в 1С
							Если СебестоимостьВ1С тогда 
								стрр.СебестоимостьБезНДС = 0;
							КонецЕсли; 							
							стр2.Себестоимость = стрр.СебестоимостьБезНДС;							
						КонецЕсли;
						
						стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
						стр2.Коэффициент = 1;				
						строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
						Если строкк <> неопределено тогда
							стр2.СчетУчета = строкк.СчетУчета;
							Стр2.НовыйСчетУчета = Строкк.СчетУчета;
						Иначе
							Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
						КонецЕсли;	
						
					КонецЕсли;		
				КонецЦикла;
				
				ВремяДокумента = Документы.ПеремещениеТоваров.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Док1,ВремяДокумента);
				
				Если НЕ Проводить тогда 
					Попытка 
						Док1.Записать(РежимЗаписиДокумента.Запись); 
						Сообщить("Записано перемещение товаров № "+Док1.Номер+" от "+Док1.Дата);
						Если ПустаяСтрока(базовыйДокумент) Тогда
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док1.Ссылка;
						Иначе
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док2 = Док1.Ссылка;	
							НужнаКолонка = Истина;
						КонецЕсли;
					Исключение
						Сообщить("Не удалось записать перемещение товаров № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
					КонецПопытки;
				Иначе
					Попытка 
						Док1.Записать(РежимЗаписиДокумента.Проведение); 
						Сообщить("Проведено перемещение товаров № "+Док1.Номер+" от "+Док1.Дата);
						Если ПустаяСтрока(базовыйДокумент) Тогда
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док1.Ссылка;
						Иначе
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док2 = Док1.Ссылка;	
							НужнаКолонка = Истина;
						КонецЕсли;
					Исключение
						Сообщить("Не удалось провести перемещение товаров № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
					КонецПопытки;
				КонецЕсли;
				базовыйДокумент = "";	
			КонецЕсли;
		Иначе
			 базовыйДокумент = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СохранитьСтатьи() 
	
	ТекущаяНастройка = ПолучитьИзВременногоХранилища(АдресТекН);
	Ошибок = 0;
	
	Для каждого Стр из Объект.Статьи цикл
		Если не ЗначениеЗаполнено(Стр.СтатьяЗатрат1С) Тогда
			Сообщить("Для загруженной статьи расходов " + Стр.СтатьяРасходовИИКО +  " не сопоставлена статья затрат в 1С", СтатусСообщения.ОченьВажное);
			Ошибок = Ошибок  + 1;
		Иначе
			строка=ТекущаяНастройка.СохраненнаяНастройка.СтатьиЗатрат.Найти(Стр.СтатьяРасходовИИКО, "СтатьяРасходовИИКО");
			Если ЗначениеЗаполнено(строка) Тогда
				строка.СтатьяЗатрат1С = Стр.СтатьяЗатрат1С;
				строка.СчетЗатрат1С = Стр.СчетЗатрат1С;
			Иначе
				новаяСтрока=ТекущаяНастройка.СохраненнаяНастройка.СтатьиЗатрат.Добавить();
				новаяСтрока.СтатьяРасходовИИКО = Стр.СтатьяРасходовИИКО;
				новаяСтрока.СтатьяЗатрат1С = Стр.СтатьяЗатрат1С;
				НоваяСтрока.СчетЗатрат1С = Стр.СчетЗатрат1С;
			КонецЕсли;

		КонецЕсли
	КонецЦИкла;
	
	АдресТекН = ПоместитьВоВременноеХранилище(ТекущаяНастройка, УИДФормы);
	Возврат Ошибок;
	
КонецФункции

Процедура СоздатьПриготовлениеСписания(таб,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
	Доки = таб.Скопировать(); 
	Доки2 = Таб.Скопировать();
	СоворачиватьПо="Номер,Дата,ЮЛнаименование,ЮЛИНН,СкладПодразделение";
	
	Если АналитикаДокументов="По Документам" Тогда
		СоворачиватьПо=СоворачиватьПо+",ТорговоеПредприятиеКод";	
	КонецЕсли;
	
	
	Доки.Свернуть(СоворачиватьПо);
	Доки.Сортировать("Дата");
	Доки2.Свернуть("Номер,Дата,СкладСписания,СкладПрихода,ЮЛнаименование,ЮЛИНН,СкладПодразделение,ТорговоеПредприятиеКод");
	
	СтарыйНомер = "";
	ПрошлоеЮЛ = "";
	Для Каждого Стр из Доки Цикл
		Если (Стр.Номер = СтарыйНомер) и (СТр.ЮлНаименование = ПрошлоеЮЛ)  тогда          
			ДатаДокум = ПолучитьДату(стр.Дата);
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+ДатаДокум+" имеется 2 акта списания, либо используется 2 склада!");
			Продолжить;
		Иначе
			СтарыйНомер = Стр.Номер;
			ПрошлоеЮЛ = СТр.ЮлНаименование;
		КонецЕсли;	
	КонецЦикла;	 
	
	Для каждого стр из Доки цикл
		номернаклиико = СокрЛП(Стр.Номер) + "!" + "Акт Списания";
		Если ПустаяСтрока(базовыйДокумент) Тогда
			д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
			Если д.Количество() = 0 или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;	
		Иначе
			номерБазовый = СокрЛП(Стр.Номер)+"!" + базовыйДокумент;
			д = Объект.Докум.НайтиСтроки(Новый Структура("Документ",номерБазовый));
			Если д.Количество() = 0 или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Юрлицо) тогда
			Если Стр.ЮЛнаименование<>Юрлицо тогда
				Продолжить;
			КонецЕСли;
		КонецЕСли;	
		Отб = Новый Структура("Номер",стр.Номер);
		НСтр = таб.НайтиСтроки(Отб);
		ДатаДокум=ПолучитьДату(стр.Дата);
		НомерДокумента=НомерНакладной(стр,стр.Номер,Префикс,ДеньПрефикс,"Акт Списания");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		// Создаем ОПЗС
		Док = Документы.ОтчетПроизводстваЗаСмену.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Отчет производства за смену № "+Док.Номер+" от "+Док.Дата  +" существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		Док.Дата = ДатаДокум- 600;
		Док.Организация=НайтиОгранизациюПоИНН(ИсправленныйЮЛИНН(СокрЛП(Стр.ЮЛИНН)), истина);
		//Поулчим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Истина;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;
		
		Док.СчетЗатрат= ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");
		Док.НДСвСтоимостиТоваров = НДСвСтоимости; 				
		Док.Номер = НомерДокумента;
		
		//Заполнение склада
		Отбор = Новый Структура("Номер, Дата, ЗнакОперации", Стр.Номер, ДатаДокум, Число("2"));		
		Нашли = Таб.НайтиСтроки(Отбор);                                                        
		Если Нашли.Количество()>0 тогда
			Док.Склад = Нашли[0].СкладСписания;
			Док.ПодразделениеЗатрат = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;;
			Док.ПодразделениеОрганизации = Док.ПодразделениеЗатрат;
		КонецЕсли;
		
		Док.Продукция.Очистить();
		Док.Материалы.Очистить(); 
		
		ТабЧасть = Новый ТаблицаЗначений;
		Табчасть = Таб.Скопировать(НСтр);
		Табчасть.Свернуть("Номенклатура, ЗнакОперации","СебестоимостьБезНДС, Количество");
		
		Для каждого стрр из Табчасть Цикл 
			ОкрКоличество=Окр(стрр.Количество,3);
			Если ОкрКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
			Если СокрЛП(стрр.ЗнакОперации)="1" Тогда
				ПлановаяСтоимость=Число(стрр.СебестоимостьБезНДС/ОкрКоличество);
				Если ПлановаяСтоимость < 0.01 Тогда
					ПлановаяСтоимость=0.01;
					СуммаПлановая = стрр.СебестоимостьБезНДС;
				Иначе
					СуммаПлановая = Число(стрр.СебестоимостьБезНДС);
				КонецЕсли;
				Если СуммаПлановая<0.01 Тогда
					СуммаПлановая=0.01;
				КонецЕсли;	
				
				стр2 = Док.Продукция.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.НоменклатурнаяГруппа=ПолучитьНоменклатурнуюГруппу(стр2.Номенклатура);	
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;  				
				стр2.Коэффициент = 1;
				Если не СуммовойУчет тогда 
					стр2.Количество = ОкрКоличество;
					стр2.ПлановаяСтоимость = ПлановаяСтоимость;
					стр2.СуммаПлановая = СуммаПлановая;
				Иначе
					стр2.Количество = СуммаПлановая;
					стр2.ПлановаяСтоимость = ПлановаяСтоимость;
					стр2.СуммаПлановая = СуммаПлановая; 
				КонецЕсли;
				
				строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если строкк<>неопределено тогда
					стр2.Счет = строкк.СчетУчета;
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
			Иначе  // операция=2
				стр2 = Док.Материалы.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
				стр2.Коэффициент = 1;
				
				Если не СуммовойУчет тогда 
					стр2.Количество = ОкрКоличество;					
				Иначе
					стр2.Количество = стрр.СебестоимостьБезНДС;					
				КонецЕсли;
				
				//Считаем себестоимость в 1С
				Если СебестоимостьВ1С тогда 
					стрр.СебестоимостьБезНДС = 0;
				КонецЕсли;
				
				стр2.Себестоимость = стрр.СебестоимостьБезНДС;
				//стр2.ОтражениеВУСН=Перечисления.ОтражениеВУСН.Принимаются;
				Стр2.ОтражениеВУСН = РасходыНУ;
				стр2.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(стр2.Номенклатура);
				строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если строкк<>неопределено тогда
					стр2.Счет = строкк.СчетУчета;
					Если ЗначениеЗаполнено(СтатьяЗатрат) тогда
						стр2.СтатьяЗатрат = СтатьяЗатрат;
					Иначе
						стр2.СтатьяЗатрат = стр2.Номенклатура.СтатьяЗатрат;
					КонецЕсли;
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура, СтатусСообщения.Внимание);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		ВремяДокумента = Документы.ОтчетПроизводстваЗаСмену.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		Если Проводить тогда
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение); 
				Сообщить("Проведен"+" Отчет производства за смену № "+Док.Номер+" от "+Док.Дата);
				Если ПустаяСтрока(базовыйДокумент) Тогда
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док=Док.Ссылка;
				Иначе
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номерБазовый))[0].Док2=Док.Ссылка;	
					НужнаКолонка = Истина;
				КонецЕсли;
				базовыйДокумент = номернаклиико;
			Исключение
				Сообщить("Не удалось провести Отчет производства за смену № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				Док.Записать(РежимЗаписиДокумента.Запись); 
			КонецПопытки;
		Иначе
			Попытка 
			Док.Записать(РежимЗаписиДокумента.Запись); 
			Сообщить("Записан"+" Отчет производства за смену № "+Док.Номер+" от "+Док.Дата);
			Если ПустаяСтрока(базовыйДокумент) Тогда
				Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док=Док.Ссылка;
			Иначе
				Объект.Докум.НайтиСтроки(Новый Структура("Документ", номерБазовый))[0].Док2=Док.Ссылка;	
				НужнаКолонка = Истина;
			КонецЕсли;
			базовыйДокумент = номернаклиико;
		Исключение
			Сообщить("Не удалось записать Отчет производства за смену № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
		КонецПопытки;

		КонецЕсли;
		Отбор = Новый Структура("Номер, Дата", Стр.Номер, ДатаДокум);		
		Нашли = Таб.НайтиСтроки(Отбор);
		
		Если Нашли[0].СкладСписания = Нашли[0].СкладПрихода тогда
			базовыйДокумент = "Акт Списания";
			Продолжить;
		КонецЕсли;
		
		// Создаем перемещение	
		Док1 = Документы.ПеремещениеТоваров.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док1) Тогда
			Док1 = Документы.ПеремещениеТоваров.СоздатьДокумент();
			Док1.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док1 = Док1.ПолучитьОбъект();
				Док1.УстановитьПометкуУдаления(Ложь);
				Док1.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Перемещение товаров № " + Док1.Номер + " от " + Док1.Дата + " существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		
		// Шапка документа
		Заполнять = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", Док.Метаданные());
		
		Если Заполнять тогда 
			Док1.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		КонецЕсли;
		
		Док1.Дата = Док.Дата;
		Док1.Номер = НомерДокумента; 
		Док1.Организация = Док.Организация;
		//Поулчим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Истина;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;
		
		Если НДСВСтоимости тогда 		
			Док.НДСВСтоимостиТоваров = перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
		Иначе
			Док.НДСВСтоимостиТоваров = перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
		КонецЕсли;
		
		Отбор = Новый Структура("Номер, Дата, ЗнакОперации", Стр.Номер, Док.Дата, Число("2"));		
		Нашли = Таб.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(Нашли) тогда
			Док1.СкладОтправитель = Нашли[0].СкладСписания;
			Док1.ПодразделениеОтправитель = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док1.СкладОтправитель))[0].Подразделение;
		КонецЕсли;
		
		Отбор = Новый Структура("Номер, Дата, ЗнакОперации", Стр.Номер, Док.Дата, Число("1"));		
		Нашли = Таб.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(Нашли) тогда
			Док1.СкладПолучатель = Нашли[0].СкладПрихода;
			Док1.ПодразделениеПолучатель = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док1.СкладПолучатель))[0].Подразделение;
		КонецЕсли;
		
		Док1.Товары.Очистить(); 
		//Заполнение ТЧ		
		Для каждого стрр из Табчасть Цикл 
			ОкрКоличество = Окр(стрр.Количество,3);
			Если ОкрКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если СокрЛП(стрр.ЗнакОперации) = "1" Тогда
				ПлановаяСтоимость = Число(стрр.СебестоимостьБезНДС/ОкрКоличество);
				Если ПлановаяСтоимость < 0.01 Тогда
					ПлановаяСтоимость = 0.01;
					СуммаПлановая = стрр.СебестоимостьБезНДС;
				Иначе
					СуммаПлановая = Число(стрр.СебестоимостьБезНДС);
				КонецЕсли;
				Если СуммаПлановая < 0.01 Тогда
					СуммаПлановая = 0.01;
				КонецЕсли;				
								
				стр2 = Док1.Товары.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
				стр2.Коэффициент = 1;
				
				Если не СуммовойУчет тогда 
					стр2.Количество = ОкрКоличество;					
				Иначе
					стр2.Количество = стрр.СебестоимостьБезНДС;					
				КОнецЕсли;
				
				//Считаем себестоимость в 1С
				Если СебестоимостьВ1С тогда 
					стрр.СебестоимостьБезНДС = 0;
				КонецЕсли;
				
				стр2.Себестоимость = стрр.СебестоимостьБезНДС;
				строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если строкк <> неопределено тогда
					стр2.СчетУчета = строкк.СчетУчета;
					Стр2.НовыйСчетУчета = Строкк.СчетУчета;
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
				
			КонецЕсли;		
		КонецЦикла;
		
		ВремяДокумента = Документы.ПеремещениеТоваров.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док1,ВремяДокумента);
			
		Если Проводить тогда 			
			Попытка 
				Док1.Записать(РежимЗаписиДокумента.Проведение); 
				Сообщить("Проведено перемещение товаров № "+Док1.Номер+" от "+Док1.Дата);
				Если ПустаяСтрока(базовыйДокумент) Тогда
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док1.Ссылка;
				Иначе
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док3 = Док1.Ссылка;	
					НужнаКолонка = Истина;
				КонецЕсли;
			Исключение
				Сообщить("Не удалось провести перемещение товаров № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
		Иначе
			Попытка 
				Док1.Записать(РежимЗаписиДокумента.Запись); 
				Сообщить("Записано перемещение товаров № "+Док1.Номер+" от "+Док1.Дата);
				Если ПустаяСтрока(базовыйДокумент) Тогда
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док1.Ссылка;
				Иначе
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док3 = Док1.Ссылка;	
					НужнаКолонка = Истина;
				КонецЕсли;
			Исключение
				Сообщить("Не удалось записать перемещение товаров № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
	КонецЕсли; 		
		базовыйДокумент = "";
	КонецЦикла;

КонецПроцедуры

&НаКлиенте 
Процедура ВидимостьСтатьиЗатрат()
	Если АПУ или АУ или АР или АПЕР или АП или РН или АС тогда 
	    Элементы.СтатьяЗатрат.Видимость = Истина;
	Иначе
		Элементы.СтатьяЗатрат.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьСтатьиЗатратУслуги()
	
		Элементы.СтатьяЗатратУслуги.Видимость = ПН или АПУ;	
	
КонецПроцедуры

&НаКлиенте
Процедура Поле11ПриИзменении(Элемент)
	ВидимостьСтатьиЗатратУслуги();
	Элементы.РасходыНУ.Видимость = ПН;
КонецПроцедуры

&НаКлиенте
Процедура СкладыПередУдалением(Элемент, Отказ)
	СкладыПередУдалениемНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СкладыПередУдалениемНаСервере()
	Ответ = Вопрос("Удалить из загрузки все документы со складом "+
	Этаформа.ТекущийЭлемент.ТекущиеДанные.СкладНаименование+"?", 
	РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ=истина;
		Возврат;
	КонецЕсли;
	
	КодАйко=Этаформа.ТекущийЭлемент.ТекущиеДанные.СкладКод;	
	Доки = Объект.Докум.НайтиСТроки(Новый структура("СкладКодАйко",КодАйко)); 	
	Индекс = Доки.Количество() - 1;
	Пока Индекс >= 0 Цикл		
		Объект.Докум.Удалить(Доки[Индекс]);
		Индекс = Индекс - 1; 		
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ПодготовитьКонцепцию ()	
	   
	СписокКонцепций = Новый СписокЗначений;
	
	Если ПН и ЗначениеЗаполнено(АдресПН)Тогда
		Тз = ПолучитьИзВременногоХранилища(АдресПН);
		ТаблицаКонцепций = ТЗ.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресПН = ПоместитьВоВременноеХранилище(ТЗ, УИДФормы);
	КонецЕсли;
	
	Если ВП и ЗначениеЗаполнено(АдресВП) Тогда
		Тз2 = ПолучитьИзВременногоХранилища(АдресВП);
		ТаблицаКонцепций = ТЗ2.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресВП = ПоместитьВоВременноеХранилище(Тз2, УИДФормы);
	КонецЕсли;
	
	Если РН и ЗначениеЗаполнено(АдресРН) Тогда
		Тз8 = ПолучитьИзВременногоХранилища(АдресРН);
		ТаблицаКонцепций = ТЗ8.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла; 
		АдресРН = ПоместитьВоВременноеХранилище(Тз8, УИДФормы);
	КонецЕсли;
	
	Если АП и ЗначениеЗаполнено(АдресАП) Тогда
		Тз3 = ПолучитьИзВременногоХранилища(АдресАП);
		ТаблицаКонцепций = ТЗ3.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресАП = ПоместитьВоВременноеХранилище(Тз3, УИДФормы);
	КонецЕсли;
	
	Если АР и ЗначениеЗаполнено(АдресАР) Тогда
		Тз1 = ПолучитьИзВременногоХранилища(АдресАР);
		ТаблицаКонцепций = ТЗ1.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресАР = ПоместитьВоВременноеХранилище(Тз1, УИДФормы);
	КонецЕсли;
	
	Если АС и ЗначениеЗаполнено(АдресАС) Тогда
		Тз6 = ПолучитьИзВременногоХранилища(АдресАС);
		ТаблицаКонцепций = ТЗ6.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресАС = ПоместитьВоВременноеХранилище(Тз6, УИДФормы);
	КонецЕсли;
	
		
	Если ВН и ЗначениеЗаполнено(АдресВН) Тогда
		Тз9 = ПолучитьИзВременногоХранилища(АдресВН);
		ТаблицаКонцепций = ТЗ9.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресВН = ПоместитьВоВременноеХранилище(Тз9, УИДФормы);
	КонецЕсли; 
	
	Если АПЕР и ЗначениеЗаполнено(АдресАПЕР) Тогда
		Тз5 = ПолучитьИзВременногоХранилища(АдресАпер);
		ТаблицаКонцепций = ТЗ5.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресАПЕР = ПоместитьВоВременноеХранилище(Тз5, УИДФормы);
	КонецЕсли;
	
	Если (БезналичныеОплаты = "ИзПриемаКассовойВыручки") и ЗначениеЗаполнено(АдресАРиБезнал) Тогда
		Тз4 = ПолучитьИзВременногоХранилища(АдресАРиБезнал);
		ТаблицаКонцепций = ТЗ4.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресАРиБезнал = ПоместитьВоВременноеХранилище(Тз4, УИДФормы);
	КонецЕсли; 
		
	Если АПУ и ЗначениеЗаполнено(АдресАПУ) Тогда
		Тз11 = ПолучитьИзВременногоХранилища(АдресАПУ);
		ТаблицаКонцепций = ТЗ11.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресАПУ = ПоместитьВоВременноеХранилище(ТЗ11, УИДФормы);
	КонецЕсли;
	
	Если АУ и ЗначениеЗаполнено(АдресАУ) Тогда
		Тз10 = ПолучитьИзВременногоХранилища(АдресАУ);
		ТаблицаКонцепций = Тз10.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресАУ = ПоместитьВоВременноеХранилище(Тз10, УИДФормы);
	КонецЕсли;
	
	
	Если Араз и ЗначениеЗаполнено(АдресАРаз) Тогда
		Тз12 = ПолучитьИзВременногоХранилища(АдресАРаз);
		ТаблицаКонцепций = ТЗ12.Скопировать();
		ТаблицаКонцепций.Свернуть("КонцепцияНазвание");
		Для каждого Стр из ТаблицаКонцепций Цикл   
			Если ЗначениеЗаполнено(Стр.КонцепцияНазвание) Тогда
				Если СписокКонцепций.НайтиПоЗначению(Стр.КонцепцияНазвание) = неопределено Тогда
					СписокКонцепций.Добавить(Стр.КонцепцияНазвание); 
				КонецЕсли;
			КонецЕсли;   
		КонецЦикла;
		АдресАРаз = ПоместитьВоВременноеХранилище(Тз12, УИДФормы);
	КонецЕсли;

	 Возврат СписокКонцепций;
КонецФункции

&НаСервере
Процедура УдалитьКонцепции(Концепция)
	
	Если ВП и ЗначениеЗаполнено(АдресВП) Тогда
		Тз2 = ПолучитьИзВременногоХранилища(АдресВП);		
		ТЗ2 = ОчиститьТЗ(ТЗ2, Концепция);
		АдресВП = ПоместитьВоВременноеХранилище(Тз2, УИДФормы);
	КонецЕсли;   
	
	Если ПН и ЗначениеЗаполнено(АдресПН) Тогда
		Тз = ПолучитьИзВременногоХранилища(АдресПН);
		ТЗ = ОчиститьТЗ(ТЗ, Концепция);
		//НужныеСтроки = Тз.НайтиСтроки(Новый Структура("КонцепцияНазвание", Концепция));
		//Для каждого Стр из НужныеСтроки цикл
		//	Тз.Удалить(Стр);	
		//КонецЦикла;		
		АдресПН = ПоместитьВоВременноеХранилище(Тз, УИДФормы);
	КонецЕсли; 
	
	Если АР и ЗначениеЗаполнено(АдресАР) Тогда
		Тз1 = ПолучитьИзВременногоХранилища(АдресАР);
		ТЗ1 = ОчиститьТЗ(ТЗ1, Концепция);  
		АдресАр = ПоместитьВоВременноеХранилище(Тз1, УИДФормы);
	КонецЕсли;  
	
	Если АП и ЗначениеЗаполнено(АдресАП) Тогда
		Тз3 = ПолучитьИзВременногоХранилища(АдресАП);
		ТЗ3 = ОчиститьТЗ(ТЗ3, Концепция);  
		АдресАП = ПоместитьВоВременноеХранилище(Тз3, УИДФормы);
	КонецЕсли;
	
	Если РН и ЗначениеЗаполнено(АдресРН) Тогда
		Тз8 = ПолучитьИзВременногоХранилища(АдресРН);
		ТЗ8 = ОчиститьТЗ(ТЗ8, Концепция); 
		АдресРН = ПоместитьВоВременноеХранилище(Тз8, УИДФормы);
	КонецЕсли;
	
	Если АС и ЗначениеЗаполнено(АдресАС) Тогда
		Тз6 = ПолучитьИзВременногоХранилища(АдресАС);
		ТЗ6 = ОчиститьТЗ(ТЗ6, Концепция);   
		АдресАС = ПоместитьВоВременноеХранилище(Тз6, УИДФормы);
	КонецЕсли; 
	
	Если ВН и ЗначениеЗаполнено(АдресВН) Тогда
		Тз9 = ПолучитьИзВременногоХранилища(АдресВН);
		ТЗ9 = ОчиститьТЗ(ТЗ9, Концепция);   
		АдресВН = ПоместитьВоВременноеХранилище(Тз9, УИДФормы);
	КонецЕсли;
	
	Если АПЕР и ЗначениеЗаполнено(АдресАПЕР) Тогда
		Тз5 = ПолучитьИзВременногоХранилища(АдресАПЕР);
		ТЗ5 = ОчиститьТЗ(ТЗ5, Концепция);   
		АдресАПЕР = ПоместитьВоВременноеХранилище(Тз5, УИДФормы);
	КонецЕсли; 
	
	Если (БезналичныеОплаты = "ИзПриемаКассовойВыручки") и ЗначениеЗаполнено(АдресАРиБезнал) Тогда
		Тз4 = ПолучитьИзВременногоХранилища(АдресАРиБезнал);
		ТЗ4 = ОчиститьТЗ(ТЗ4, Концепция);
		АдресАРиБезнал = ПоместитьВоВременноеХранилище(Тз4, УИДФормы);
	КонецЕсли; 
	
	Если АПУ и ЗначениеЗаполнено(АдресАПУ) Тогда
		Тз11 = ПолучитьИзВременногоХранилища(АдресАПУ);
		ТЗ11 = ОчиститьТЗ(ТЗ11, Концепция);   
		АдресАПУ = ПоместитьВоВременноеХранилище(Тз11, УИДФормы);
	КонецЕсли; 

	Если АУ и ЗначениеЗаполнено(АдресАУ) Тогда
		Тз10 = ПолучитьИзВременногоХранилища(АдресАУ);
		ТЗ10 = ОчиститьТЗ(ТЗ10, Концепция);   
		АдресАУ = ПоместитьВоВременноеХранилище(Тз10, УИДФормы);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ОчиститьТЗ(ТЗ, Концепция)
	
	Строка = ТЗ.Количество()-1;
	
	Пока Строка >= 0 цикл		 
		Если СокрЛП(ТЗ[Строка].КонцепцияНазвание) <> Концепция тогда 
			ТЗ.Удалить(Строка);
			Строка = Строка-1;
		Иначе
			Строка = Строка-1;
		КонецЕсли;
	КонецЦикла; 	 
	
	Возврат ТЗ;	
КонецФункции

&НаСервере
Функция ПолучитьООРП()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах";
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат[0].ССылка;
КонецФункции

&НаСервере
Процедура СоздатьАктРазбора(табз,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
	таб = ПодготовитьАктРазбора(табз);
	СоздатьАктыРазбораПодготовленные(таб,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент);
КонецПроцедуры

&НаСервере
Функция ПодготовитьАктРазбора(Табз)
	
	Тзз1=Новый ТаблицаЗначений;  
	Тзз1.Колонки.Добавить("Номер"); 
	Тзз1.Колонки.Добавить("Дата");
	Тзз1.Колонки.Добавить("Номенклатура"); 
	Тзз1.Колонки.Добавить("СкладПрихода");
	Тзз1.Колонки.Добавить("СкладСписания");
	Тзз1.Колонки.Добавить("СкладПодразделение"); 
	Тзз1.Колонки.Добавить("Количество");
	Тзз1.Колонки.Добавить("ЮЛнаименование");
	Тзз1.Колонки.Добавить("ТорговоеПредприятиеКод");
	Тзз1.Колонки.Добавить("ЮЛИНН");
	Тзз1.Колонки.Добавить("СебестоимостьЗаедБезНДС");
	Тзз1.Колонки.Добавить("СебестоимостьБезНДС");
	Тзз1.Колонки.Добавить("Операция");
	Тзз1.Колонки.Добавить("ПроцентСебестоимости");
	
	табз = ПолучитьИзВременногоХранилища(АдресАРаз);
	Для Каждого Стр из табз Цикл
		ОкрКоличество = Окр(стр.Количество,3);
		Если ОкрКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ххх = Тзз1.Добавить();
		ххх.Номер = стр.НомерДок;
		ххх.Дата = ПолучитьДату(стр.Дата);
		ххх.Номенклатура = НайтиНоменклатуру(стр.НКодИИКО, стр.Ставкандс, стр.ГруппаучетаНазвание).Номенклатура;  
		Склад = Объект.Склады.НайтиСтроки(Новый Структура("СкладНаименование", Стр.СкладНаименование));
		Если Стр.Операция = 1 тогда 
			ххх.СкладСписания = Склад[0].Склад;
		Иначе
			ххх.СкладПрихода = Склад[0].Склад;
		КонецЕсли;
		
		ххх.СкладПодразделение = Склад[0].Подразделение;		
		ххх.ЮЛнаименование = стр.ЮЛнаименование;
		ххх.ТорговоеПредприятиеКод = стр.ТорговоеПредприятиеКод;
		ххх.ЮЛИНН = стр.ЮЛИнн;
		ххх.Количество = ОкрКоличество;
		ххх.СебестоимостьЗаедБезНДС = стр.СебестоимостьЗаедБезНДС;
		ххх.СебестоимостьБезНДС = стр.СебестоимостьБезНДС;
		ххх.Операция = стр.Операция;
		ххх.ПроцентСебестоимости = Стр.ПроцентСебестоимости;
	КонецЦикла;	
	
	возврат Тзз1;	
КонецФункции

&НаСервере
Процедура СоздатьАктыРазбораПодготовленные(таб,префикс,ДеньПрефикс,порядок, сдвинутьДату,базовыйДокумент)
	 	
	
	Доки = таб.Скопировать(); 
	Доки2 = Таб.Скопировать();
	СоворачиватьПо="Номер,Дата,ЮЛнаименование,ЮЛИНН,СкладПодразделение,ТорговоеПредприятиеКод";
	
	Доки.Свернуть(СоворачиватьПо);
	Доки.Сортировать("Дата");
	Доки2.Свернуть("Номер,Дата,СкладСписания,СкладПрихода,ЮЛнаименование,ЮЛИНН,СкладПодразделение,ТорговоеПредприятиеКод");
	
	СтарыйНомер = "";
	Для Каждого Стр из Доки Цикл
		Если Стр.Номер = СтарыйНомер тогда          
			ДатаДокум = ПолучитьДату(стр.Дата);
			Сообщить("В iiko с номером "+СтарыйНомер+" от "+ДатаДокум+" имеется 2 акта разбора, либо используется 2 склада!");
			Продолжить;
		Иначе
			СтарыйНомер = Стр.Номер;
		КонецЕсли;	
	КонецЦикла;	 
	
	Для каждого стр из Доки цикл
		номернаклиико = СокрЛП(Стр.Номер) + "!" + "Акт разбора";
		Если ПустаяСтрока(базовыйДокумент) Тогда
			д = Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико));
			Если д.Количество() = 0 или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;	
		Иначе
			номерБазовый = СокрЛП(Стр.Номер)+"!" + базовыйДокумент;
			д = Объект.Докум.НайтиСтроки(Новый Структура("Документ",номерБазовый));
			Если д.Количество() = 0 или не д[0].Выбор тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Юрлицо) тогда
			Если Стр.ЮЛнаименование<>Юрлицо тогда
				Продолжить;
			КонецЕСли;
		КонецЕСли;	
		Отб = Новый Структура("Номер",стр.Номер);
		НСтр = таб.НайтиСтроки(Отб);
		ДатаДокум=ПолучитьДату(стр.Дата);
		НомерДокумента=НомерНакладной(стр,стр.Номер,Префикс,ДеньПрефикс,"Акт разбора");
		Если НомерДокумента=Неопределено Тогда
			продолжить;
		КонецЕсли;
		
		// Создаем ОПЗС
		
		Док = Документы.ОтчетПроизводстваЗаСмену.НайтиПоНомеру(НомерДокумента,ДатаДокум);
		Если не ЗначениеЗаполнено(Док) Тогда
			Док = Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
			Док.Номер = НомерДокумента;
		Иначе
			Если зд Тогда
				Док = Док.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Ложь);
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Сообщить("Отчет производства за смену № "+Док.Номер+" от "+Док.Дата  +" существует!");
				Продолжить;					
			КОнецЕсли;
		КОнецЕсли;
		
		Док.Организация=НайтиОгранизациюПоИНН(ИсправленныйЮЛИНН(СокрЛП(Стр.ЮЛИНН)), истина);
		Док.Дата = ДатаДокум - 600;
		//Получим систему налогооблажения
		УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
		
		Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
			//НДСВСтоимости = Истина;
			УчитыватьНДС = Истина;
		Иначе
			//НДСВСтоимости = Ложь;
			УчитыватьНДС = Истина;
		КонецЕсли;
		
		Док.СчетЗатрат= ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");
		Док.НДСвСтоимостиТоваров = НДСвСтоимости;
		Док.Номер = НомерДокумента;
		
		//Заполнение склада
		Отбор = Новый Структура("Номер, Дата, Операция", Стр.Номер, ДатаДокум, Число("2"));		
		Нашли = Таб.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(Нашли) тогда
			Док.Склад = Нашли[0].СкладПрихода;
			Док.ПодразделениеЗатрат = Объект.Склады.НайтиСтроки(Новый Структура("Склад",Док.Склад))[0].Подразделение;
			Док.ПодразделениеОрганизации = Док.ПодразделениеЗатрат;
		КонецЕсли;
		
		ТабЧасть = Новый ТаблицаЗначений;
		Табчасть = Таб.Скопировать(НСтр);
		Табчасть.Свернуть("Номенклатура, Операция","СебестоимостьБезНДС, Количество");
		
		Док.Продукция.Очистить();
		Док.Материалы.Очистить();
		
		Для каждого стрр из Табчасть Цикл 
			ОкрКоличество=Окр(стрр.Количество,3);
			Если ОкрКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
			Если СокрЛП(стрр.Операция)="2" Тогда
				ПлановаяСтоимость=Число(стрр.СебестоимостьБезНДС/ОкрКоличество);
				Если ПлановаяСтоимость < 0.01 Тогда
					ПлановаяСтоимость=0.01;
					СуммаПлановая = ПлановаяСтоимость*ОкрКоличество;
				Иначе
					СуммаПлановая = Число(стрр.СебестоимостьБезНДС);
				КонецЕсли;
				Если СуммаПлановая<0.01 Тогда
					СуммаПлановая=0.01;
				КонецЕсли;	
				
				стр2 = Док.Продукция.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.НоменклатурнаяГруппа=ПолучитьНоменклатурнуюГруппу(стр2.Номенклатура);	
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
				
				Если не СуммовойУчет тогда 
					стр2.Количество = ОкрКоличество;
					стр2.Коэффициент = 1;
					стр2.ПлановаяСтоимость = ПлановаяСтоимость;
					стр2.СуммаПлановая = СуммаПлановая;
				Иначе
					стр2.Количество = СуммаПлановая;
					стр2.Коэффициент = 1;
					стр2.ПлановаяСтоимость = 1;
					стр2.СуммаПлановая = СуммаПлановая;
				КонецЕсли;
				
				
				строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если строкк<>неопределено тогда
					стр2.Счет = строкк.СчетУчета;
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
				КонецЕсли;	
			Иначе  // операция=1
				стр2 = Док.Материалы.Добавить();
				стр2.Номенклатура = стрр.Номенклатура;
				стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
				
				Если не СуммовойУчет тогда 
					стр2.Количество = ОкрКоличество;
					стр2.Коэффициент = 1;
					//Считаем себестоимость в 1С
					Если СебестоимостьВ1С тогда 
						стрр.СебестоимостьБезНДС = 0;
					КонецЕсли; 					
					стр2.Себестоимость = стрр.СебестоимостьБезНДС;
				Иначе
					стр2.Количество = стрр.СебестоимостьБезНДС;
					стр2.Коэффициент = 1;
					//Считаем себестоимость в 1С
					Если СебестоимостьВ1С тогда 
						стрр.СебестоимостьБезНДС = 0;
					КонецЕсли; 					
					стр2.Себестоимость = стрр.СебестоимостьБезНДС;
				КонецЕсли;
				
				//стр2.ОтражениеВУСН=Перечисления.ОтражениеВУСН.Принимаются;
				Стр2.ОтражениеВУСН = РасходыНУ;
				стр2.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(стр2.Номенклатура);
				строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
				Если строкк<>неопределено тогда
					стр2.Счет = строкк.СчетУчета;
					Если ЗначениеЗаполнено(СтатьяЗатрат) тогда
						стр2.СтатьяЗатрат = СтатьяЗатрат;
					Иначе
						стр2.СтатьяЗатрат = стр2.Номенклатура.СтатьяЗатрат;
					КонецЕсли;	
				Иначе
					Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура, СтатусСообщения.Внимание);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		ВремяДокумента = Документы.ОтчетПроизводстваЗаСмену.ВремяДокументаПоУмолчанию();
		УстановитьВремяПоУмолчанию(Док,ВремяДокумента);
		Если Проводить тогда 
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение); 
				Сообщить("Проведен"+" Отчет производства за смену № "+Док.Номер+" от "+Док.Дата);
				Если ПустаяСтрока(базовыйДокумент) Тогда
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док=Док.Ссылка;
				Иначе
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номерБазовый))[0].Док2=Док.Ссылка;	
					НужнаКолонка = Истина;
				КонецЕсли;
				базовыйДокумент = номернаклиико;
			Исключение
				Сообщить("Не удалось провести Отчет производства за смену № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		Иначе
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Запись); 
				Сообщить("Записан"+" Отчет производства за смену № "+Док.Номер+" от "+Док.Дата);
				Если ПустаяСтрока(базовыйДокумент) Тогда
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док=Док.Ссылка;
				Иначе
					Объект.Докум.НайтиСтроки(Новый Структура("Документ", номерБазовый))[0].Док2=Док.Ссылка;	
					НужнаКолонка = Истина;
				КонецЕсли;
				базовыйДокумент = номернаклиико;
			Исключение
				Сообщить("Не удалось записать Отчет производства за смену № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			КонецПопытки;
		КонецЕсли;
	//	Док = Документы.КомплектацияНоменклатуры.НайтиПоНомеру(НомерДокумента,ДатаДокум);
	//	Если не ЗначениеЗаполнено(Док) Тогда
	//		Док = Документы.КомплектацияНоменклатуры.СоздатьДокумент();
	//		Док.Номер = НомерДокумента;
	//	Иначе
	//		Если зд Тогда
	//			Док = Док.ПолучитьОбъект();
	//			Док.УстановитьПометкуУдаления(Ложь);
	//			Док.Проведен=ложь;
	//		Иначе
	//			Сообщить("Комплектация номенклатуры № "+Док.Номер+" от "+Док.Дата  +" существует!");
	//			Продолжить;					
	//		КОнецЕсли;
	//	КОнецЕсли;	
	//	
	//	
	//	Док.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация;		
	//	Док.Организация=НайтиОгранизациюПоИНН(ИсправленныйЮЛИНН(СокрЛП(Стр.ЮЛИНН)), истина);
	//	Док.Дата = ДатаДокум;
	//	
	//	//Получим систему налогооблажения
	//	УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док.Организация, Док.Дата);
	//	
	//	Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
	//		НДСВСтоимости = Истина;
	//		УчитыватьНДС = Истина;
	//	Иначе
	//		НДСВСтоимости = Ложь;
	//		УчитыватьНДС = Истина;
	//	КонецЕсли;
	//	
	//	Док.НДСвСтоимостиТоваров = НДСвСтоимости;
	//	Док.Номер = НомерДокумента;
	//	Док.ПодразделениеОрганизации=Стр.СкладПодразделение;
	//	
	//	//Заполнение склада
	//	Отбор = Новый Структура("Номер, Дата, Операция", Стр.Номер, Док.Дата, Число("1"));		
	//	Нашли = Таб.НайтиСтроки(Отбор);
	//	Если ЗначениеЗаполнено(Нашли) тогда
	//		Док.Склад = Нашли[0].СкладСписания;
	//	КонецЕсли;
	//	
	//	ТабЧасть = Новый ТаблицаЗначений;
	//	Табчасть = Таб.Скопировать(НСтр);
	//	Табчасть.Свернуть("Номенклатура, Операция","СебестоимостьБезНДС, Количество, ПроцентСебестоимости");
	//	
	//	Док.Комплектующие.Очистить();
	//	
	//	Для каждого стрр из Табчасть Цикл 
	//		ОкрКоличество=Окр(стрр.Количество,3);
	//		Если ОкрКоличество=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если СокрЛП(стрр.Операция)="1" Тогда //Разбираемое
	//			
	//			Док.Номенклатура = Стрр.Номенклатура;
	//			Док.Количество = Стрр.Количество; 							
	//			
	//			строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса);
	//			Если строкк<>неопределено тогда
	//				Док.СчетУчета = строкк.СчетУчета;
	//			Иначе
	//				Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
	//			КонецЕсли;
	//			
	//		Иначе  // Комплектующие
	//			
	//			Стр2 = Док.Комплектующие.Добавить();
	//			Стр2.Номенклатура = Стрр.Номенклатура;
	//			Стр2.Количество = ОкрКоличество;
	//			Стр2.ДоляСтоимости = Стрр.ПроцентСебестоимости;
	//			Если СебестоимостьВ1С тогда 
	//				Стр2.Себестоимость = 0;
	//				Стр2.Сумма = 0;
	//			Иначе 					
	//			Стр2.Себестоимость = Стрр.СебестоимостьБезНДС/Стрр.Количество;
	//			Стр2.Сумма = Стрр.СебестоимостьБезНДС;
	//			КонецЕсли;
	//			
	//			
	//			Если НДСВСтоимости тогда 
	//				Стр2.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Списывается;
	//			Иначе
	//				Стр2.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
	//			КонецЕсли;
	//
	//			строкк=НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса);
	//			Если строкк<>неопределено тогда
	//				стр2.СчетУчета = строкк.СчетУчета;						
	//			Иначе
	//				Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура, СтатусСообщения.Внимание);
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//	КонецЦикла;
	//	Если Проводить тогда 
	//		Попытка 
	//			Док.Записать(РежимЗаписиДокумента.Проведение); 
	//			Сообщить("Записана"+" Комплектация товаров № "+Док.Номер+" от "+Док.Дата);
	//			Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док=Док.Ссылка;
	//			базовыйДокумент = номернаклиико;
	//		Исключение
	//			Сообщить("Не удалось записать Комплектацию товаров № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
	//		КонецПопытки;
	//	Иначе
	//		Попытка 
	//			Док.Записать(РежимЗаписиДокумента.Запись); 
	//			Сообщить("Записана"+" Комплектация товаров № "+Док.Номер+" от "+Док.Дата);
	//			Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док=Док.Ссылка;
	//			базовыйДокумент = номернаклиико;
	//		Исключение
	//			Сообщить("Не удалось записать Комплектацию товаров № "+Док.Номер+" от "+Док.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
	//		КонецПопытки;
	//	КонецЕсли;
		
		
		//Проверим склады
		Отбор = Новый Структура("Номер, Дата, Операция", Стр.Номер, Док.Дата, Число("2"));		
		Нашли = Таб.НайтиСтроки(Отбор);
		Отбор = Новый Структура("Номер, Дата, Операция", Стр.Номер, Док.Дата, Число("1"));		
		Нашли1 = Таб.НайтиСтроки(Отбор);
		
		Если Нашли.Количество()<>0 и Нашли1.Количество()<>0 тогда 
			Если  Нашли[0].СкладСписания = Нашли1[0].СкладПрихода тогда
				базовыйДокумент = "";
				Продолжить;	
			Иначе
				// Создаем перемещение	
				Док1 = Документы.ПеремещениеТоваров.НайтиПоНомеру(НомерДокумента,ДатаДокум);
				Если не ЗначениеЗаполнено(Док1) Тогда
					Док1 = Документы.ПеремещениеТоваров.СоздатьДокумент();
					Док1.Номер = НомерДокумента;
				Иначе
					Если зд Тогда
						Док1 = Док1.ПолучитьОбъект();
						Док1.УстановитьПометкуУдаления(Ложь);
						Док1.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						Сообщить("Отчет производства за смену № " + Док1.Номер + " от " + Док1.Дата + " существует!");
						Продолжить;					
					КОнецЕсли;
				КОнецЕсли;
				
				// Шапка документа
				Заполнять = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", Док.Метаданные());
				
				Если Заполнять тогда 
					Док1.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
				КонецЕсли;
				
				Док1.Дата = Док.Дата;
				Док1.Номер = НомерДокумента; 
				Док1.Организация = Док.Организация;
				//Получим систему налогооблажения
				УчПолитика = УчетнаяПолитика.СистемаНалогообложения(Док1.Организация, Док1.Дата);
				
				Если УчПолитика = Перечисления.СистемыНалогообложения.Упрощенная тогда 
					//НДСВСтоимости = Истина;
					УчитыватьНДС = Истина;
				Иначе
					//НДСВСтоимости = Ложь;
					УчитыватьНДС = Истина;
				КонецЕсли;
				
				Если НДСВСтоимости тогда 		
					Док.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
				Иначе
					Док.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
				КонецЕсли;
				Док1.СкладОтправитель = Нашли[0].СкладСписания;
				Док1.СкладПолучатель = Нашли1[0].СкладПрихода;
				
				Док1.Товары.Очистить();
				
				//Заполнение ТЧ		
				Для каждого стрр из Табчасть Цикл 
					ОкрКоличество = Окр(стрр.Количество,3);
					Если ОкрКоличество = 0 Тогда
						Продолжить;
					КонецЕсли;
					Если СокрЛП(стрр.ОперацияОперации) = "2" Тогда
						ПлановаяСтоимость = Число(стрр.СебестоимостьБезНДС/ОкрКоличество);
						Если ПлановаяСтоимость < 0.01 Тогда
							ПлановаяСтоимость = 0.01;
							СуммаПлановая = ПлановаяСтоимость*ОкрКоличество;
						Иначе
							СуммаПлановая = Число(стрр.СебестоимостьБезНДС);
						КонецЕсли;
						Если СуммаПлановая < 0.01 Тогда
							СуммаПлановая = 0.01;
						КонецЕсли;					
						
						стр2 = Док1.Товары.Добавить();
						стр2.Номенклатура = стрр.Номенклатура; 						
												
						Если не СуммовойУчет тогда 
							//Считаем себестоимость в 1С
							Если СебестоимостьВ1С тогда 
								стрр.СебестоимостьБезНДС = 0;
							КонецЕсли; 							
							стр2.Себестоимость = стрр.СебестоимостьБезНДС;
							стр2.Количество = ОкрКоличество;
						Иначе
							стр2.Количество = стрр.СебестоимостьБезНДС;
							//Считаем себестоимость в 1С
							Если СебестоимостьВ1С тогда 
								стрр.СебестоимостьБезНДС = 0;
							КонецЕсли; 							
							стр2.Себестоимость = стрр.СебестоимостьБезНДС;							
						КонецЕсли;
						
						стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаИзмерения;
						стр2.Коэффициент = 1;				
						строкк = НайтиСчетаДляНоменклатуры(стрр.Номенклатура,ТаблицаЗапроса,Док.Склад);
						Если строкк <> неопределено тогда
							стр2.СчетУчета = строкк.СчетУчета;
							Стр2.НовыйСчетУчета = Строкк.СчетУчета;
						Иначе
							Сообщить("Не найден счет учета для номенклатуры: " + стрр.Номенклатура.Наименование, СтатусСообщения.Внимание);
						КонецЕсли;	
						
					КонецЕсли;		
				КонецЦикла;
				
				Если Проводить тогда 
					Попытка 
						Док1.Записать(РежимЗаписиДокумента.Проведение); 
						Сообщить("Записано перемещение товаров № "+Док1.Номер+" от "+Док1.Дата);
						Если ПустаяСтрока(базовыйДокумент) Тогда
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док1.Ссылка;
						Иначе
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док2 = Док1.Ссылка;	
							НужнаКолонка = Истина;
						КонецЕсли;
					Исключение
						Сообщить("Не удалось записать Отчет производства за смену № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
					КонецПопытки;
				Иначе
					Попытка 
						Док1.Записать(РежимЗаписиДокумента.Запись); 
						Сообщить("Записано перемещение товаров № "+Док1.Номер+" от "+Док1.Дата);
						Если ПустаяСтрока(базовыйДокумент) Тогда
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док = Док1.Ссылка;
						Иначе
							Объект.Докум.НайтиСтроки(Новый Структура("Документ", номернаклиико))[0].Док2 = Док1.Ссылка;	
							НужнаКолонка = Истина;
						КонецЕсли;
					Исключение
						Сообщить("Не удалось записать Отчет производства за смену № "+Док1.Номер+" от "+Док1.Дата+" "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
					КонецПопытки; 					
				КонецЕсли;
				базовыйДокумент = "";	
			КонецЕсли;
		Иначе
			 базовыйДокумент = "";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЗаписатьАРаз(oDocument)
	
	Попытка
		oDocumentItem = odocument.ItemsGetFirstElement();
	Исключение 
		Возврат ложь;
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ЗаписатьСТрокуРазбора(oDocument,oDocumentItem);   
			oDocumentItem = oDocument.ItemsGetNextElement();
		Исключение 
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ЗаписатьСтрокуРазбора(Document, DocumentItem)
	
	Если ЗначениеЗаполнено(DocumentItem.Article) = Истина тогда
		Если Число(DocumentItem.Amount) <>  0 Тогда
			Если ЗначениеЗаполнено(ЮрЛицо) тогда
				Если СокрЛП(Document.JuristicPersonName) <>  СокрЛП(ЮрЛИЦо) Тогда
					Возврат;
				КонецЕСли;	
			КонецЕСли;	
			НоваяСтрока = Тз12.Добавить();
			НоваяСтрока.Дата =  Document.Date;
			НоваяСтрока.НомерДок =  Document.Number;
			НоваяСтрока.СкладКод =  DocumentItem.StoreCode;
			НоваяСтрока.СкладНаименование =  DocumentItem.StoreName;			
			НоваяСтрока.Операция = DocumentItem.Operation;    
			НоваяСтрока.ОперацияНазвание =  DocumentItem.OperationName;   
			НоваяСтрока.НКодИИКО =  DocumentItem.Article;    
			НоваяСтрока.ННаименованиеИИКО =  DocumentItem.Nomenclature;    
			НоваяСтрока.Группаучетаназвание =  DocumentItem.AccountingCategory; 
			НоваяСтрока.ГруппаучетаКод =  DocumentItem.AccountingCategoryCode;
			НоваяСтрока.Количество =  DocumentItem.Amount; 
			НоваяСтрока.СебестоимостьзаедбезНДС =  DocumentItem.CostPriceByUnit; 
			НоваяСтрока.СебестоимостьбезНДС =  DocumentItem.CostPrice; 
			НоваяСтрока.СтавкаНДС =  DocumentItem.NdsProductPercent; 
			НоваяСтрока.Торговоепредприятиекод =  Document.DepartmentCode; 
			НоваяСтрока.Торговоепредприятиенаименование =  Document.DepartmentName; 
			НоваяСтрока.ЮЛИНН =  Document.JuristicPersonINN; 
			НоваяСтрока.ЮЛнаименование =  Document.JuristicPersonName; 
			НоваяСтрока.Единицаизмеренияназвание = DocumentItem.MeasureUnitName;
			НоваяСтрока.ПроцентСебестоимости = DocumentItem.MainProductAmountPercent;
			Попытка
				НоваяСтрока.Комментарий = Document.Comment;
				НоваяСтрока.КонцепцияКод = Document.ConceptionCode;
				НоваяСтрока.КонцепцияНазвание = Document.ConceptionName;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Для номенклатуры " + DocumentItem.Nomenclature + " не задан код!!!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьНомерГТД(Номер)
	
	Элемент = Справочники.НомераГТД.СоздатьЭлемент();
	Элемент.Код = Номер;
	Элемент.Записать();
	
	Возврат Элемент.Ссылка;
	
КонецФункции

// Устанавливает время согластно хронологии
&НаСервере
Процедура УстановитьВремяПоУмолчанию(Источник,ВремяДокумента)
	
		ТекущаяДата = НачалоДня(Источник.Дата);
		Источник.Дата  = ТекущаяДата + ВремяДокумента.Часы * 3600 + ВремяДокумента.Минуты * 60
							+ ?(ВремяДокумента.Свойство("Секунды"), ВремяДокумента.Секунды, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыУстановитьВсе(Команда)
	Для Каждого ЭлементСписка Из Объект.Докум Цикл
		ЭлементСписка.Выбор = Истина;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСнятьВсе(Команда)
	Для Каждого ЭлементСписка Из Объект.Докум Цикл
		ЭлементСписка.Выбор = Ложь;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыИнвертироватьВыбор(Команда)
	Для Каждого ЭлементСписка Из Объект.Докум Цикл
		ЭлементСписка.Выбор = Не ЭлементСписка.Выбор;	
	КонецЦикла;
КонецПроцедуры 